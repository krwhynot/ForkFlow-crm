{
  "metadata": {
    "analysisDate": "2025-07-06T15:45:01.529Z",
    "totalComponents": 90,
    "totalUsages": 1127
  },
  "mostUsedComponents": [
    {
      "name": "Box",
      "usageCount": 109,
      "styleComplexity": 3,
      "module": "./Box"
    },
    {
      "name": "Typography",
      "usageCount": 103,
      "styleComplexity": 12,
      "module": "./Typography"
    },
    {
      "name": "Chip",
      "usageCount": 77,
      "styleComplexity": 38,
      "module": "./Chip"
    },
    {
      "name": "Card",
      "usageCount": 69,
      "styleComplexity": 25,
      "module": "./Card"
    },
    {
      "name": "CardContent",
      "usageCount": 59,
      "styleComplexity": 0,
      "module": "./Card"
    },
    {
      "name": "Stack",
      "usageCount": 58,
      "styleComplexity": 6,
      "module": "./Stack"
    },
    {
      "name": "Button",
      "usageCount": 54,
      "styleComplexity": 19,
      "module": "./Button"
    },
    {
      "name": "Alert",
      "usageCount": 37,
      "styleComplexity": 57,
      "module": "./Alert"
    },
    {
      "name": "IconButton",
      "usageCount": 35,
      "styleComplexity": 37,
      "module": "./IconButton"
    },
    {
      "name": "Avatar",
      "usageCount": 24,
      "styleComplexity": 44,
      "module": "./Avatar"
    },
    {
      "name": "Paper",
      "usageCount": 23,
      "styleComplexity": 20,
      "module": "./Paper"
    },
    {
      "name": "Grid",
      "usageCount": 21,
      "styleComplexity": 18,
      "module": "./Grid"
    },
    {
      "name": "ListItemText",
      "usageCount": 20,
      "styleComplexity": 0,
      "module": "./List"
    },
    {
      "name": "List",
      "usageCount": 19,
      "styleComplexity": 31,
      "module": "./List"
    },
    {
      "name": "ListItem",
      "usageCount": 19,
      "styleComplexity": 0,
      "module": "./List"
    }
  ],
  "mostComplexComponents": [
    {
      "name": "Stepper",
      "styleComplexity": 96,
      "classNameCount": 85,
      "propsCount": 11,
      "usageCount": 2
    },
    {
      "name": "Fab",
      "styleComplexity": 68,
      "classNameCount": 51,
      "propsCount": 17,
      "usageCount": 2
    },
    {
      "name": "HomepageButton",
      "styleComplexity": 68,
      "classNameCount": 66,
      "propsCount": 2,
      "usageCount": null
    },
    {
      "name": "Alert",
      "styleComplexity": 57,
      "classNameCount": 50,
      "propsCount": 7,
      "usageCount": 37
    },
    {
      "name": "Dialog",
      "styleComplexity": 56,
      "classNameCount": 51,
      "propsCount": 5,
      "usageCount": 17
    },
    {
      "name": "Menu",
      "styleComplexity": 50,
      "classNameCount": 44,
      "propsCount": 6,
      "usageCount": 2
    },
    {
      "name": "Select",
      "styleComplexity": 48,
      "classNameCount": 32,
      "propsCount": 16,
      "usageCount": 5
    },
    {
      "name": "Avatar",
      "styleComplexity": 44,
      "classNameCount": 35,
      "propsCount": 9,
      "usageCount": 24
    },
    {
      "name": "Chip",
      "styleComplexity": 38,
      "classNameCount": 27,
      "propsCount": 11,
      "usageCount": 77
    },
    {
      "name": "IconButton",
      "styleComplexity": 37,
      "classNameCount": 25,
      "propsCount": 12,
      "usageCount": 35
    },
    {
      "name": "Switch",
      "styleComplexity": 37,
      "classNameCount": 31,
      "propsCount": 6,
      "usageCount": 2
    },
    {
      "name": "Autocomplete",
      "styleComplexity": 33,
      "classNameCount": 12,
      "propsCount": 21,
      "usageCount": 1
    },
    {
      "name": "Badge",
      "styleComplexity": 33,
      "classNameCount": 25,
      "propsCount": 8,
      "usageCount": 8
    },
    {
      "name": "TextField",
      "styleComplexity": 33,
      "classNameCount": 13,
      "propsCount": 20,
      "usageCount": 9
    },
    {
      "name": "List",
      "styleComplexity": 31,
      "classNameCount": 20,
      "propsCount": 11,
      "usageCount": 19
    }
  ],
  "componentDetails": {
    "Alert": {
      "module": "./Alert",
      "fullPath": "src/components/ui-kit/./Alert.tsx",
      "exports": [
        "Alert"
      ],
      "usageCount": 37,
      "styleComplexity": 57,
      "file": "src/components/ui-kit/Alert.tsx",
      "classNames": [
        "cn(",
        "'rounded-md",
        "border",
        "p-4',",
        "SEVERITY_STYLES[variant][severity],",
        "className",
        ")",
        "flex",
        "flex-shrink-0",
        "cn('h-5",
        "w-5',",
        "ICON_STYLES[severity])",
        "ml-3",
        "flex-1",
        "text-sm",
        "font-medium",
        "mb-1",
        "ml-auto",
        "pl-3",
        "-mx-1.5",
        "-my-1.5",
        "'inline-flex",
        "rounded-md",
        "p-1.5",
        "focus:outline-none",
        "focus:ring-2",
        "focus:ring-offset-2",
        "transition-colors',",
        "severity",
        "===",
        "'success'",
        "&&",
        "'text-green-500",
        "hover:bg-green-100",
        "focus:ring-green-600',",
        "'warning'",
        "'text-yellow-500",
        "hover:bg-yellow-100",
        "focus:ring-yellow-600',",
        "'info'",
        "'text-blue-500",
        "hover:bg-blue-100",
        "focus:ring-blue-600',",
        "'error'",
        "'text-red-500",
        "hover:bg-red-100",
        "focus:ring-red-600'",
        "sr-only",
        "h-5",
        "w-5"
      ],
      "styleProps": [
        "variant?: 'filled' | 'outlined' | 'standard'",
        "severity?",
        "variant?",
        "onClose?",
        "children",
        "className?",
        "title?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "p-4',",
          "ml-3",
          "mb-1",
          "pl-3",
          "p-1.5"
        ],
        "sizing": [
          "w-5',",
          "h-5",
          "w-5"
        ],
        "colors": [],
        "layout": [
          "flex",
          "flex-shrink-0",
          "flex-1"
        ],
        "responsive": [],
        "interactive": [
          "focus:outline-none",
          "focus:ring-2",
          "focus:ring-offset-2",
          "hover:bg-green-100",
          "focus:ring-green-600',",
          "hover:bg-yellow-100",
          "focus:ring-yellow-600',",
          "hover:bg-blue-100",
          "focus:ring-blue-600',",
          "hover:bg-red-100",
          "focus:ring-red-600'"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Autocomplete": {
      "module": "./Autocomplete",
      "fullPath": "src/components/ui-kit/./Autocomplete.tsx",
      "exports": [
        "Autocomplete"
      ],
      "usageCount": 1,
      "styleComplexity": 33,
      "file": "src/components/ui-kit/Autocomplete.tsx",
      "classNames": [
        "absolute",
        "top-full",
        "left-0",
        "right-0",
        "z-50",
        "max-h-60",
        "overflow-auto",
        "mt-1",
        "shadow-lg",
        "px-4",
        "py-2",
        "text-gray-500"
      ],
      "styleProps": [
        "fullWidth?: boolean",
        "id?",
        "label?",
        "placeholder?",
        "options",
        "value?",
        "defaultValue?",
        "onChange?",
        "value",
        "onInputChange?",
        "disabled?",
        "fullWidth?",
        "multiple?",
        "className?",
        "renderOption?",
        "option",
        "getOptionLabel?",
        "isOptionEqualToValue?",
        "noOptionsText?",
        "loading?",
        "loadingText?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mt-1",
          "px-4",
          "py-2"
        ],
        "sizing": [],
        "colors": [
          "text-gray-500"
        ],
        "layout": [
          "absolute"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./Menu",
        "./Paper",
        "./TextField"
      ]
    },
    "Avatar": {
      "module": "./Avatar",
      "fullPath": "src/components/ui-kit/./Avatar.tsx",
      "exports": [
        "Avatar"
      ],
      "usageCount": 24,
      "styleComplexity": 44,
      "file": "src/components/ui-kit/Avatar.tsx",
      "classNames": [
        "cn(",
        "'relative",
        "inline-flex",
        "items-center",
        "justify-center",
        "rounded-full",
        "bg-gray-100",
        "font-medium",
        "text-gray-600",
        "overflow-hidden',",
        "sizeClasses,",
        "className",
        ")",
        "'h-full",
        "w-full",
        "object-cover",
        "transition-opacity",
        "duration-200',",
        "showImage",
        "?",
        "'opacity-100'",
        ":",
        "'opacity-0'",
        "'select-none",
        "font-semibold",
        "uppercase',",
        "customSize",
        "&&",
        "'text-xs'",
        "//",
        "smaller",
        "text",
        "for",
        "custom",
        "sizes"
      ],
      "styleProps": [
        "size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'",
        "src?",
        "alt?",
        "size?",
        "width?",
        "height?",
        "className?",
        "children?",
        "title?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "bg-gray-100",
          "text-gray-600"
        ],
        "layout": [
          "inline-flex"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "AvatarGroup": {
      "module": "./AvatarGroup",
      "fullPath": "src/components/ui-kit/./AvatarGroup.tsx",
      "exports": [
        "AvatarGroup"
      ],
      "usageCount": 1,
      "styleComplexity": 24,
      "file": "src/components/ui-kit/AvatarGroup.tsx",
      "classNames": [
        "cn(",
        "'flex",
        "items-center',",
        "SPACING_VARIANTS[spacing],",
        "className",
        ")",
        "relative",
        "ring-2",
        "ring-white",
        "rounded-full",
        "bg-gray-100",
        "text-gray-600",
        "font-medium",
        "text-xs",
        "flex",
        "items-center",
        "justify-center",
        "h-8",
        "w-8"
      ],
      "styleProps": [
        "children",
        "max?",
        "total?",
        "spacing?",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "h-8",
          "w-8"
        ],
        "colors": [
          "bg-gray-100",
          "text-gray-600"
        ],
        "layout": [
          "relative",
          "flex"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Badge": {
      "module": "./Badge",
      "fullPath": "src/components/ui-kit/./Badge.tsx",
      "exports": [
        "Badge"
      ],
      "usageCount": 8,
      "styleComplexity": 33,
      "file": "src/components/ui-kit/Badge.tsx",
      "classNames": [
        "cn('relative",
        "inline-flex',",
        "className)",
        "cn(",
        "'absolute",
        "-top-2",
        "-right-2",
        "flex",
        "items-center",
        "justify-center",
        "rounded-full",
        "text-xs",
        "font-medium',",
        "COLOR_VARIANTS[color],",
        "variant",
        "===",
        "'dot'",
        "?",
        "'h-2",
        "w-2'",
        ":",
        "'min-h-5",
        "min-w-5",
        "px-1'",
        ")"
      ],
      "styleProps": [
        "color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error'",
        "variant?: 'dot' | 'standard'",
        "children",
        "badgeContent?",
        "color?",
        "variant?",
        "invisible?",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-1'"
        ],
        "sizing": [
          "w-2'"
        ],
        "colors": [],
        "layout": [
          "inline-flex',",
          "flex"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Box": {
      "module": "./Box",
      "fullPath": "src/components/ui-kit/./Box.tsx",
      "exports": [
        "Box"
      ],
      "usageCount": 109,
      "styleComplexity": 3,
      "file": "src/components/ui-kit/Box.tsx",
      "classNames": [
        "twMerge('box-border',",
        "className)"
      ],
      "styleProps": [
        "as?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Button": {
      "module": "./Button",
      "fullPath": "src/components/ui-kit/./Button.tsx",
      "exports": [
        "Button"
      ],
      "usageCount": 54,
      "styleComplexity": 19,
      "file": "src/components/ui-kit/Button.tsx",
      "classNames": [
        "buttonClasses",
        "mr-2",
        "ml-2"
      ],
      "styleProps": [
        "variant?:\n        | 'contained'\n        | 'outlined'\n        | 'text'\n        | 'primary'\n        | 'secondary'\n        | 'icon'",
        "size?: 'small' | 'medium' | 'large' | 'sm' | 'md' | 'lg'",
        "color?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info'",
        "fullWidth?: boolean",
        "variant: string",
        "color: string) => {\n    const colorMap = {\n        primary: {\n            contained:\n                'bg-primary-500 hover:bg-primary-600 text-white shadow-sm hover:shadow-md'",
        "size: string",
        "variant: string) => {\n    // Handle legacy size names\n    const normalizedSize =\n        size === 'small'\n            ? 'sm'\n            : size === 'medium'\n              ? 'md'\n              : size === 'large'\n                ? 'lg'\n                : size",
        "variant?",
        "size?",
        "color?",
        "startIcon?",
        "endIcon?",
        "fullWidth?",
        "component?",
        "children"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mr-2",
          "ml-2"
        ],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Card": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 69,
      "styleComplexity": 25,
      "file": "src/components/ui-kit/Card.tsx",
      "classNames": [
        "cn(",
        "'rounded-lg",
        "border",
        "border-gray-200",
        "bg-white",
        "text-gray-900",
        "shadow-sm',",
        "className",
        ")",
        "cn('flex",
        "flex-col",
        "space-y-1.5",
        "p-6',",
        "className)",
        "'text-lg",
        "font-semibold",
        "leading-none",
        "tracking-tight',",
        "cn('text-sm",
        "text-gray-500',",
        "cn('p-6",
        "pt-0',",
        "items-center",
        "p-6",
        "justify-between"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "p-6',",
          "pt-0',",
          "p-6"
        ],
        "sizing": [],
        "colors": [
          "border-gray-200",
          "text-gray-900",
          "text-gray-500',"
        ],
        "layout": [
          "flex-col"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "CardActions": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 3,
      "styleComplexity": 0
    },
    "CardContent": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 59,
      "styleComplexity": 0
    },
    "CardDescription": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 0,
      "styleComplexity": 0
    },
    "CardFooter": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 0,
      "styleComplexity": 0
    },
    "CardHeader": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 3,
      "styleComplexity": 0
    },
    "CardTitle": {
      "module": "./Card",
      "fullPath": "src/components/ui-kit/./Card.tsx",
      "exports": [
        "Card",
        "CardActions",
        "CardContent",
        "CardDescription",
        "CardFooter",
        "CardHeader",
        "CardTitle"
      ],
      "usageCount": 3,
      "styleComplexity": 0
    },
    "Checkbox": {
      "module": "./Checkbox",
      "fullPath": "src/components/ui-kit/./Checkbox.tsx",
      "exports": [
        "Checkbox"
      ],
      "usageCount": 2,
      "styleComplexity": 23,
      "file": "src/components/ui-kit/Checkbox.tsx",
      "classNames": [
        "cn(",
        "'peer",
        "h-4",
        "w-4",
        "shrink-0",
        "rounded-sm",
        "border",
        "border-gray-300",
        "ring-offset-white",
        "focus-visible:outline-none",
        "focus-visible:ring-2",
        "focus-visible:ring-gray-400",
        "focus-visible:ring-offset-2",
        "disabled:cursor-not-allowed",
        "disabled:opacity-50",
        "data-[state=checked]:bg-gray-900",
        "data-[state=checked]:text-gray-50',",
        "className",
        ")",
        "cn('flex",
        "items-center",
        "justify-center",
        "text-current')"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "h-4",
          "w-4"
        ],
        "colors": [
          "border-gray-300"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "disabled:cursor-not-allowed",
          "disabled:opacity-50"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Chip": {
      "module": "./Chip",
      "fullPath": "src/components/ui-kit/./Chip.tsx",
      "exports": [
        "Chip"
      ],
      "usageCount": 77,
      "styleComplexity": 38,
      "file": "src/components/ui-kit/Chip.tsx",
      "classNames": [
        "cn(",
        "'inline-flex",
        "items-center",
        "rounded-full",
        "border",
        "font-medium",
        "transition-colors',",
        "COLOR_VARIANTS[variant][color],",
        "SIZE_VARIANTS[size],",
        "isClickable",
        "&&",
        "'cursor-pointer",
        "hover:scale-105",
        "active:scale-95',",
        "disabled",
        "'opacity-50",
        "cursor-not-allowed',",
        "className",
        ")",
        "justify-center',",
        "size",
        "===",
        "'small'",
        "?",
        "'mr-1'",
        ":",
        "'mr-1.5'"
      ],
      "styleProps": [
        "color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error'",
        "variant?: 'filled' | 'outlined'",
        "size?: 'small' | 'medium'",
        "label",
        "icon?",
        "color?",
        "variant?",
        "size?",
        "onClick?",
        "className?",
        "disabled?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [
          "hover:scale-105",
          "active:scale-95',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "CircularProgress": {
      "module": "./CircularProgress",
      "fullPath": "src/components/ui-kit/./CircularProgress.tsx",
      "exports": [
        "CircularProgress",
        "Spinner"
      ],
      "usageCount": 10,
      "styleComplexity": 25,
      "file": "src/components/ui-kit/CircularProgress.tsx",
      "classNames": [
        "cn(",
        "'inline-flex",
        "items-center",
        "justify-center',",
        "sizeClass,",
        "className",
        ")",
        "COLOR_VARIANTS[color],",
        "isIndeterminate",
        "&&",
        "'animate-spin'",
        "opacity-20",
        "'transition-all",
        "duration-300",
        "ease-in-out',",
        "'animate-pulse'"
      ],
      "styleProps": [
        "size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | number",
        "color?:\n        | 'primary'\n        | 'secondary'\n        | 'success'\n        | 'warning'\n        | 'error'\n        | 'inherit'",
        "variant?: 'determinate' | 'indeterminate'",
        "size?",
        "color?",
        "thickness?",
        "value?",
        "variant?",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Spinner": {
      "module": "./CircularProgress",
      "fullPath": "src/components/ui-kit/./CircularProgress.tsx",
      "exports": [
        "CircularProgress",
        "Spinner"
      ],
      "usageCount": 5,
      "styleComplexity": 0,
      "file": "src/components/ui-kit/Spinner.tsx",
      "classNames": [],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Collapse": {
      "module": "./Collapse",
      "fullPath": "src/components/ui-kit/./Collapse.tsx",
      "exports": [
        "Collapse"
      ],
      "usageCount": 2,
      "styleComplexity": 20,
      "file": "src/components/ui-kit/Collapse.tsx",
      "classNames": [
        "orientation",
        "===",
        "'vertical'",
        "?",
        "'h-full'",
        ":",
        "'w-full'"
      ],
      "styleProps": [
        "in?",
        "children?",
        "timeout?",
        "unmountOnExit?",
        "className?",
        "orientation?",
        "collapsedSize?",
        "onEnter?",
        "onEntering?",
        "onEntered?",
        "onExit?",
        "onExiting?",
        "onExited?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Dialog": {
      "module": "./Dialog",
      "fullPath": "src/components/ui-kit/./Dialog.tsx",
      "exports": [
        "Dialog",
        "DialogActions",
        "DialogCloseButton",
        "DialogContent",
        "DialogTitle"
      ],
      "usageCount": 17,
      "styleComplexity": 56,
      "file": "src/components/ui-kit/Dialog.tsx",
      "classNames": [
        "relative",
        "z-50",
        "fixed",
        "inset-0",
        "bg-black",
        "bg-opacity-25",
        "overflow-y-auto",
        "flex",
        "min-h-full",
        "items-center",
        "justify-center",
        "p-4",
        "text-center",
        "cn(",
        "'w-full",
        "transform",
        "overflow-hidden",
        "rounded-2xl",
        "bg-white",
        "p-6",
        "text-left",
        "align-middle",
        "shadow-xl",
        "transition-all',",
        "MAX_WIDTH_VARIANTS[maxWidth],",
        "className",
        ")",
        "'text-lg",
        "font-medium",
        "leading-6",
        "text-gray-900",
        "mb-4',",
        "cn('mt-2',",
        "className)",
        "cn('mt-6",
        "justify-end",
        "space-x-3',",
        "'absolute",
        "top-4",
        "right-4",
        "text-gray-400",
        "hover:text-gray-600",
        "focus:outline-none",
        "focus:ring-2",
        "focus:ring-blue-500",
        "focus:ring-offset-2",
        "rounded-md",
        "p-1',",
        "sr-only",
        "h-5",
        "w-5"
      ],
      "styleProps": [
        "open",
        "onClose",
        "children",
        "className?",
        "maxWidth?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "p-4",
          "p-6",
          "mb-4',",
          "p-1',"
        ],
        "sizing": [
          "h-5",
          "w-5"
        ],
        "colors": [
          "bg-opacity-25",
          "text-gray-900",
          "text-gray-400"
        ],
        "layout": [
          "relative",
          "fixed",
          "flex"
        ],
        "responsive": [],
        "interactive": [
          "hover:text-gray-600",
          "focus:outline-none",
          "focus:ring-2",
          "focus:ring-blue-500",
          "focus:ring-offset-2"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "DialogActions": {
      "module": "./Dialog",
      "fullPath": "src/components/ui-kit/./Dialog.tsx",
      "exports": [
        "Dialog",
        "DialogActions",
        "DialogCloseButton",
        "DialogContent",
        "DialogTitle"
      ],
      "usageCount": 10,
      "styleComplexity": 0
    },
    "DialogCloseButton": {
      "module": "./Dialog",
      "fullPath": "src/components/ui-kit/./Dialog.tsx",
      "exports": [
        "Dialog",
        "DialogActions",
        "DialogCloseButton",
        "DialogContent",
        "DialogTitle"
      ],
      "usageCount": 0,
      "styleComplexity": 0
    },
    "DialogContent": {
      "module": "./Dialog",
      "fullPath": "src/components/ui-kit/./Dialog.tsx",
      "exports": [
        "Dialog",
        "DialogActions",
        "DialogCloseButton",
        "DialogContent",
        "DialogTitle"
      ],
      "usageCount": 17,
      "styleComplexity": 0
    },
    "DialogTitle": {
      "module": "./Dialog",
      "fullPath": "src/components/ui-kit/./Dialog.tsx",
      "exports": [
        "Dialog",
        "DialogActions",
        "DialogCloseButton",
        "DialogContent",
        "DialogTitle"
      ],
      "usageCount": 13,
      "styleComplexity": 0
    },
    "Divider": {
      "module": "./Divider",
      "fullPath": "src/components/ui-kit/./Divider.tsx",
      "exports": [
        "Divider"
      ],
      "usageCount": 17,
      "styleComplexity": 19,
      "file": "src/components/ui-kit/Divider.tsx",
      "classNames": [
        "cn(",
        "baseClasses,",
        "variantClasses[variant],",
        "orientation",
        "===",
        "'horizontal'",
        "?",
        "'my-2'",
        ":",
        "'mx-2',",
        "className",
        ")"
      ],
      "styleProps": [
        "variant?: 'fullWidth' | 'inset' | 'middle'",
        "fullWidth: orientation === 'horizontal' ? 'w-full' : 'h-full'",
        "orientation?",
        "variant?",
        "component?",
        "className?",
        "style?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Dropdown": {
      "module": "./Dropdown",
      "fullPath": "src/components/ui-kit/./Dropdown.tsx",
      "exports": [
        "Dropdown",
        "DropdownItem"
      ],
      "usageCount": 1,
      "styleComplexity": 19,
      "file": "src/components/ui-kit/Dropdown.tsx",
      "classNames": [
        "relative",
        "inline-block",
        "text-left",
        "absolute",
        "right-0",
        "mt-2",
        "w-56",
        "origin-top-right",
        "divide-y",
        "divide-gray-100",
        "rounded-md",
        "bg-white",
        "shadow-lg",
        "ring-1",
        "ring-black",
        "ring-opacity-5",
        "focus:outline-none",
        "px-1",
        "py-1"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "mt-2",
          "px-1",
          "py-1"
        ],
        "sizing": [
          "w-56"
        ],
        "colors": [],
        "layout": [
          "relative",
          "inline-block",
          "absolute"
        ],
        "responsive": [],
        "interactive": [
          "focus:outline-none"
        ],
        "custom": []
      },
      "dependencies": []
    },
    "DropdownItem": {
      "module": "./Dropdown",
      "fullPath": "src/components/ui-kit/./Dropdown.tsx",
      "exports": [
        "Dropdown",
        "DropdownItem"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "Backdrop": {
      "module": "./Fab",
      "fullPath": "src/components/ui-kit/./Fab.tsx",
      "exports": [
        "Backdrop",
        "Fab",
        "SpeedDial",
        "SpeedDialAction"
      ],
      "usageCount": 2,
      "styleComplexity": 0
    },
    "Fab": {
      "module": "./Fab",
      "fullPath": "src/components/ui-kit/./Fab.tsx",
      "exports": [
        "Backdrop",
        "Fab",
        "SpeedDial",
        "SpeedDialAction"
      ],
      "usageCount": 2,
      "styleComplexity": 68,
      "file": "src/components/ui-kit/Fab.tsx",
      "classNames": [
        "cn(",
        "'fixed",
        "bottom-4",
        "right-4",
        "rounded-full",
        "shadow-lg',",
        "'flex",
        "items-center",
        "justify-center',",
        "'transition-all",
        "duration-200",
        "ease-in-out',",
        "'hover:scale-110",
        "focus:outline-none",
        "focus:ring-4",
        "focus:ring-opacity-50',",
        "'z-50',",
        "sizeClasses[size],",
        "colorClasses[color],",
        "className",
        ")",
        "cn('fixed",
        "z-50',",
        "className)",
        "absolute",
        "transition-all",
        "ease-in-out",
        "shadow-xl",
        "'transition-transform",
        "duration-200',",
        "isOpen",
        "&&",
        "'rotate-45'",
        "flex",
        "space-x-2",
        "bg-gray-800",
        "text-white",
        "px-2",
        "py-1",
        "rounded",
        "text-sm",
        "whitespace-nowrap",
        "'w-12",
        "h-12",
        "'hover:scale-105",
        "'text-white',",
        "inset-0",
        "bg-black",
        "bg-opacity-50",
        "z-40',",
        "'transition-opacity"
      ],
      "styleProps": [
        "size?: 'small' | 'medium' | 'large'",
        "color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error'",
        "color?: string",
        "children",
        "size?",
        "color?",
        "className?",
        "onClick?",
        "style?",
        "icon",
        "open?",
        "onOpen?",
        "onClose?",
        "direction?",
        "tooltipTitle",
        "onClick",
        "open"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-2",
          "py-1"
        ],
        "sizing": [
          "h-12"
        ],
        "colors": [
          "bg-gray-800",
          "bg-opacity-50"
        ],
        "layout": [
          "absolute",
          "flex"
        ],
        "responsive": [],
        "interactive": [
          "focus:outline-none",
          "focus:ring-4",
          "focus:ring-opacity-50',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "SpeedDial": {
      "module": "./Fab",
      "fullPath": "src/components/ui-kit/./Fab.tsx",
      "exports": [
        "Backdrop",
        "Fab",
        "SpeedDial",
        "SpeedDialAction"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "SpeedDialAction": {
      "module": "./Fab",
      "fullPath": "src/components/ui-kit/./Fab.tsx",
      "exports": [
        "Backdrop",
        "Fab",
        "SpeedDial",
        "SpeedDialAction"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "Filter": {
      "module": "./Filter",
      "fullPath": "src/components/ui-kit/./Filter.tsx",
      "exports": [
        "Filter"
      ],
      "usageCount": 1,
      "styleComplexity": 23,
      "file": "src/components/ui-kit/Filter.tsx",
      "classNames": [
        "flex",
        "justify-between",
        "w-full",
        "px-4",
        "py-2",
        "text-sm",
        "font-medium",
        "text-left",
        "text-gray-900",
        "bg-gray-100",
        "rounded-lg",
        "hover:bg-gray-200",
        "focus:outline-none",
        "focus-visible:ring",
        "focus-visible:ring-gray-500",
        "focus-visible:ring-opacity-75",
        "items-center",
        "space-x-2",
        "pt-4",
        "pb-2",
        "text-gray-500",
        "text-gray-700",
        "hover:bg-gray-100"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "px-4",
          "py-2",
          "pt-4",
          "pb-2"
        ],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "text-gray-900",
          "bg-gray-100",
          "text-gray-500",
          "text-gray-700"
        ],
        "layout": [
          "flex"
        ],
        "responsive": [],
        "interactive": [
          "hover:bg-gray-200",
          "focus:outline-none",
          "hover:bg-gray-100"
        ],
        "custom": []
      },
      "dependencies": []
    },
    "FormControl": {
      "module": "./FormControl",
      "fullPath": "src/components/ui-kit/./FormControl.tsx",
      "exports": [
        "FormControl",
        "FormControlContext",
        "useFormControl"
      ],
      "usageCount": 4,
      "styleComplexity": 16,
      "file": "src/components/ui-kit/FormControl.tsx",
      "classNames": [
        "baseClasses.trim()"
      ],
      "styleProps": [
        "fullWidth?: boolean",
        "size?: 'small' | 'medium'",
        "variant?: 'standard' | 'outlined' | 'filled'",
        "color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning'",
        "children?",
        "className?",
        "component?",
        "disabled?",
        "error?",
        "fullWidth?",
        "margin?",
        "required?",
        "size?",
        "variant?",
        "color?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "FormControlContext": {
      "module": "./FormControl",
      "fullPath": "src/components/ui-kit/./FormControl.tsx",
      "exports": [
        "FormControl",
        "FormControlContext",
        "useFormControl"
      ],
      "usageCount": 0,
      "styleComplexity": 0
    },
    "useFormControl": {
      "module": "./FormControl",
      "fullPath": "src/components/ui-kit/./FormControl.tsx",
      "exports": [
        "FormControl",
        "FormControlContext",
        "useFormControl"
      ],
      "usageCount": 0,
      "styleComplexity": 0
    },
    "Grid": {
      "module": "./Grid",
      "fullPath": "src/components/ui-kit/./Grid.tsx",
      "exports": [
        "Grid"
      ],
      "usageCount": 21,
      "styleComplexity": 18,
      "file": "src/components/ui-kit/Grid.tsx",
      "classNames": [
        "classes"
      ],
      "styleProps": [
        "size: GridSize | undefined",
        "container?",
        "item?",
        "xs?",
        "sm?",
        "md?",
        "lg?",
        "xl?",
        "spacing?",
        "direction?",
        "alignItems?",
        "justifyContent?",
        "wrap?",
        "component?",
        "className?",
        "children",
        "style?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "IconButton": {
      "module": "./IconButton",
      "fullPath": "src/components/ui-kit/./IconButton.tsx",
      "exports": [
        "IconButton"
      ],
      "usageCount": 35,
      "styleComplexity": 37,
      "file": "src/components/ui-kit/IconButton.tsx",
      "classNames": [
        "cn(",
        "'inline-flex",
        "items-center",
        "justify-center",
        "rounded-full",
        "transition-colors",
        "duration-200",
        "focus:outline-none",
        "focus:ring-2",
        "focus:ring-offset-2',",
        "SIZE_VARIANTS[size],",
        "COLOR_VARIANTS[variant][color],",
        "disabled",
        "&&",
        "'opacity-50",
        "cursor-not-allowed',",
        "'touch-target-interactive',",
        "//",
        "Ensures",
        "44px",
        "minimum",
        "touch",
        "target",
        "className",
        ")"
      ],
      "styleProps": [
        "size?: 'xs' | 'sm' | 'md' | 'lg'",
        "color?:\n        | 'default'\n        | 'primary'\n        | 'secondary'\n        | 'success'\n        | 'warning'\n        | 'error'",
        "variant?: 'contained' | 'outlined' | 'text'",
        "children",
        "onClick?",
        "disabled?",
        "size?",
        "color?",
        "variant?",
        "className?",
        "title?",
        "type?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [
          "focus:outline-none",
          "focus:ring-2",
          "focus:ring-offset-2',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Input": {
      "module": "./Input",
      "fullPath": "src/components/ui-kit/./Input.tsx",
      "exports": [
        "Input"
      ],
      "usageCount": 3,
      "styleComplexity": 9,
      "file": "src/components/ui-kit/Input.tsx",
      "classNames": [
        "space-y-2",
        "block",
        "text-sm",
        "font-medium",
        "text-gray-700",
        "inputClasses",
        "text-error-500"
      ],
      "styleProps": [
        "label?",
        "error?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [
          "text-gray-700",
          "text-error-500"
        ],
        "layout": [
          "block"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "InputAdornment": {
      "module": "./InputAdornment",
      "fullPath": "src/components/ui-kit/./InputAdornment.tsx",
      "exports": [
        "InputAdornment"
      ],
      "usageCount": 5,
      "styleComplexity": 9,
      "file": "src/components/ui-kit/InputAdornment.tsx",
      "classNames": [
        "baseClasses.trim()"
      ],
      "styleProps": [
        "variant?: 'standard' | 'outlined' | 'filled'",
        "children?",
        "className?",
        "component?",
        "disablePointerEvents?",
        "disableTypography?",
        "position",
        "variant?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "InputLabel": {
      "module": "./InputLabel",
      "fullPath": "src/components/ui-kit/./InputLabel.tsx",
      "exports": [
        "InputLabel"
      ],
      "usageCount": 4,
      "styleComplexity": 18,
      "file": "src/components/ui-kit/InputLabel.tsx",
      "classNames": [
        "baseClasses.trim()",
        "text-red-500",
        "ml-1"
      ],
      "styleProps": [
        "size?: 'small' | 'normal'",
        "variant?: 'standard' | 'outlined' | 'filled'",
        "color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning'",
        "children?",
        "className?",
        "component?",
        "disabled?",
        "error?",
        "focused?",
        "required?",
        "shrink?",
        "size?",
        "variant?",
        "color?",
        "htmlFor?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "ml-1"
        ],
        "sizing": [],
        "colors": [
          "text-red-500"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./FormControl"
      ]
    },
    "LinearProgress": {
      "module": "./LinearProgress",
      "fullPath": "src/components/ui-kit/./LinearProgress.tsx",
      "exports": [
        "LinearProgress"
      ],
      "usageCount": 13,
      "styleComplexity": 26,
      "file": "src/components/ui-kit/LinearProgress.tsx",
      "classNames": [
        "cn(",
        "'w-full",
        "h-2",
        "rounded-full",
        "overflow-hidden',",
        "backgroundColorClasses[color],",
        "className",
        ")",
        "'h-full",
        "transition-all",
        "duration-300",
        "ease-in-out",
        "rounded-full',",
        "colorClasses[color],",
        "variant",
        "===",
        "'indeterminate'",
        "&&",
        "'animate-pulse'"
      ],
      "styleProps": [
        "variant?: 'determinate' | 'indeterminate'",
        "color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error'",
        "value?",
        "variant?",
        "color?",
        "className?",
        "style?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "h-2"
        ],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "List": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 19,
      "styleComplexity": 31,
      "file": "src/components/ui-kit/List.tsx",
      "classNames": [
        "cn('list-none",
        "p-0",
        "m-0',",
        "dense",
        "&&",
        "'space-y-1',",
        "className)",
        "cn('flex",
        "items-center",
        "py-2',",
        "baseClasses",
        "cn('mr-3",
        "flex-shrink-0',",
        "cn('flex-grow',",
        "text-sm",
        "font-medium",
        "text-gray-900",
        "text-xs",
        "text-gray-500",
        "cn('ml-auto"
      ],
      "styleProps": [
        "children",
        "dense?",
        "className?",
        "style?",
        "primary",
        "secondary?",
        "component?",
        "to?",
        "state?",
        "onClick?",
        "disablePadding?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "p-0",
          "m-0',",
          "py-2',"
        ],
        "sizing": [],
        "colors": [
          "text-gray-900",
          "text-gray-500"
        ],
        "layout": [
          "flex-shrink-0',"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "ListItem": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 19,
      "styleComplexity": 0
    },
    "ListItemAvatar": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "ListItemButton": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "ListItemIcon": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 16,
      "styleComplexity": 0
    },
    "ListItemSecondaryAction": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 5,
      "styleComplexity": 0
    },
    "ListItemText": {
      "module": "./List",
      "fullPath": "src/components/ui-kit/./List.tsx",
      "exports": [
        "List",
        "ListItem",
        "ListItemAvatar",
        "ListItemButton",
        "ListItemIcon",
        "ListItemSecondaryAction",
        "ListItemText"
      ],
      "usageCount": 20,
      "styleComplexity": 0
    },
    "Menu": {
      "module": "./Menu",
      "fullPath": "src/components/ui-kit/./Menu.tsx",
      "exports": [
        "Menu",
        "MenuItem"
      ],
      "usageCount": 2,
      "styleComplexity": 50,
      "file": "src/components/ui-kit/Menu.tsx",
      "classNames": [
        "cn('relative",
        "inline-block",
        "text-left',",
        "className)",
        "absolute",
        "right-0",
        "mt-2",
        "w-56",
        "origin-top-right",
        "divide-y",
        "divide-gray-100",
        "rounded-md",
        "bg-white",
        "shadow-lg",
        "ring-1",
        "ring-black",
        "ring-opacity-5",
        "focus:outline-none",
        "z-50",
        "px-1",
        "py-1",
        "cn(",
        "'group",
        "flex",
        "w-full",
        "items-center",
        "px-2",
        "py-2",
        "text-sm",
        "transition-colors',",
        "active",
        "&&",
        "!disabled",
        "?",
        "'bg-blue-50",
        "text-blue-900'",
        ":",
        "'text-gray-700',",
        "disabled",
        "'opacity-50",
        "cursor-not-allowed'",
        "'cursor-pointer',",
        "className",
        ")"
      ],
      "styleProps": [
        "button",
        "children",
        "className?",
        "onClick?",
        "disabled?",
        "component?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mt-2",
          "px-1",
          "py-1",
          "px-2",
          "py-2"
        ],
        "sizing": [
          "w-56",
          "w-full"
        ],
        "colors": [
          "text-blue-900'"
        ],
        "layout": [
          "inline-block",
          "absolute",
          "flex"
        ],
        "responsive": [],
        "interactive": [
          "focus:outline-none"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "MenuItem": {
      "module": "./Menu",
      "fullPath": "src/components/ui-kit/./Menu.tsx",
      "exports": [
        "Menu",
        "MenuItem"
      ],
      "usageCount": 6,
      "styleComplexity": 0
    },
    "Modal": {
      "module": "./Modal",
      "fullPath": "src/components/ui-kit/./Modal.tsx",
      "exports": [
        "Modal"
      ],
      "usageCount": 1,
      "styleComplexity": 28,
      "file": "src/components/ui-kit/Modal.tsx",
      "classNames": [
        "relative",
        "z-10",
        "fixed",
        "inset-0",
        "bg-black",
        "bg-opacity-25",
        "overflow-y-auto",
        "flex",
        "min-h-full",
        "items-center",
        "justify-center",
        "p-4",
        "text-center",
        "w-full",
        "max-w-md",
        "transform",
        "overflow-hidden",
        "rounded-2xl",
        "bg-white",
        "p-6",
        "text-left",
        "align-middle",
        "shadow-xl",
        "transition-all",
        "text-lg",
        "font-medium",
        "leading-6",
        "text-gray-900"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "p-4",
          "p-6"
        ],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "bg-opacity-25",
          "text-gray-900"
        ],
        "layout": [
          "relative",
          "fixed",
          "flex"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Paper": {
      "module": "./Paper",
      "fullPath": "src/components/ui-kit/./Paper.tsx",
      "exports": [
        "Paper"
      ],
      "usageCount": 23,
      "styleComplexity": 20,
      "file": "src/components/ui-kit/Paper.tsx",
      "classNames": [
        "cn(",
        "'bg-white",
        "rounded-lg',",
        "elevationClass,",
        "borderClass,",
        "onClick",
        "&&",
        "'cursor-pointer',",
        "className",
        ")"
      ],
      "styleProps": [
        "variant?: 'elevation' | 'outlined'",
        "elevation?",
        "variant?",
        "component?",
        "className?",
        "children",
        "style?",
        "onClick?",
        "onMouseEnter?",
        "onMouseLeave?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Slider": {
      "module": "./Slider",
      "fullPath": "src/components/ui-kit/./Slider.tsx",
      "exports": [
        "Slider"
      ],
      "usageCount": 2,
      "styleComplexity": 28,
      "file": "src/components/ui-kit/Slider.tsx",
      "classNames": [
        "relative",
        "w-full",
        "baseClasses",
        "absolute",
        "top-full",
        "mt-1",
        "text-xs",
        "text-gray-500",
        "transform",
        "-translate-x-1/2",
        "-top-8",
        "bg-gray-800",
        "text-white",
        "px-2",
        "py-1",
        "rounded",
        "h-full"
      ],
      "styleProps": [
        "color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning'",
        "size?: 'small' | 'medium'",
        "className?",
        "color?",
        "defaultValue?",
        "disabled?",
        "getAriaLabel?",
        "getAriaValueText?",
        "index",
        "marks?",
        "label?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mt-1",
          "px-2",
          "py-1"
        ],
        "sizing": [
          "w-full",
          "h-full"
        ],
        "colors": [
          "text-gray-500",
          "bg-gray-800"
        ],
        "layout": [
          "relative",
          "absolute"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Snackbar": {
      "module": "./Snackbar",
      "fullPath": "src/components/ui-kit/./Snackbar.tsx",
      "exports": [
        "Snackbar"
      ],
      "usageCount": 1,
      "styleComplexity": 17,
      "file": "src/components/ui-kit/Snackbar.tsx",
      "classNames": [
        "bg-gray-800",
        "text-white",
        "px-4",
        "py-2",
        "rounded-md",
        "shadow-lg",
        "flex",
        "items-center",
        "justify-between",
        "min-w-0",
        "flex-1",
        "text-sm",
        "ml-4",
        "flex-shrink-0"
      ],
      "styleProps": [
        "action?",
        "anchorOrigin?",
        "horizontal"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-4",
          "py-2",
          "ml-4"
        ],
        "sizing": [],
        "colors": [
          "bg-gray-800"
        ],
        "layout": [
          "flex",
          "flex-1",
          "flex-shrink-0"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Stack": {
      "module": "./Stack",
      "fullPath": "src/components/ui-kit/./Stack.tsx",
      "exports": [
        "Stack"
      ],
      "usageCount": 58,
      "styleComplexity": 6,
      "file": "src/components/ui-kit/Stack.tsx",
      "classNames": [
        "classes"
      ],
      "styleProps": [
        "direction?",
        "gap?",
        "align?",
        "justify?",
        "as?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./Box"
      ]
    },
    "Table": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 10,
      "styleComplexity": 28,
      "file": "src/components/ui-kit/Table.tsx",
      "classNames": [
        "w-full",
        "overflow-auto",
        "cn('w-full",
        "caption-bottom",
        "text-sm',",
        "className)",
        "cn('[&_tr]:border-b',",
        "cn('[&_tr:last-child]:border-0',",
        "cn('bg-gray-900",
        "font-medium",
        "text-gray-50',",
        "cn(",
        "'border-b",
        "transition-colors",
        "hover:bg-gray-100/50",
        "data-[state=selected]:bg-gray-100',",
        "className",
        ")",
        "'h-12",
        "px-4",
        "text-left",
        "align-middle",
        "text-gray-500",
        "[&:has([role=checkbox])]:pr-0',",
        "'p-4",
        "cn('mt-4",
        "text-sm",
        "text-gray-500',"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "px-4"
        ],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "text-gray-50',",
          "text-gray-500",
          "text-gray-500',"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "hover:bg-gray-100/50"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "TableBody": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 9,
      "styleComplexity": 0
    },
    "TableCell": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 10,
      "styleComplexity": 0
    },
    "TableHead": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 10,
      "styleComplexity": 0
    },
    "TableHeader": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "TableRow": {
      "module": "./Table",
      "fullPath": "src/components/ui-kit/./Table.tsx",
      "exports": [
        "Table",
        "TableBody",
        "TableCell",
        "TableHead",
        "TableHeader",
        "TableRow"
      ],
      "usageCount": 10,
      "styleComplexity": 0
    },
    "TableContainer": {
      "module": "./TableContainer",
      "fullPath": "src/components/ui-kit/./TableContainer.tsx",
      "exports": [
        "TableContainer"
      ],
      "usageCount": 6,
      "styleComplexity": 4,
      "file": "src/components/ui-kit/TableContainer.tsx",
      "classNames": [
        "baseClasses.trim()"
      ],
      "styleProps": [
        "children?",
        "className?",
        "component?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "TableSortLabel": {
      "module": "./TableSortLabel",
      "fullPath": "src/components/ui-kit/./TableSortLabel.tsx",
      "exports": [
        "TableSortLabel"
      ],
      "usageCount": 2,
      "styleComplexity": 9,
      "file": "src/components/ui-kit/TableSortLabel.tsx",
      "classNames": [
        "baseClasses.trim()"
      ],
      "styleProps": [
        "active?",
        "children?",
        "className?",
        "direction?",
        "disabled?",
        "hideSortIcon?",
        "IconComponent?",
        "onClick?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "TextField": {
      "module": "./TextField",
      "fullPath": "src/components/ui-kit/./TextField.tsx",
      "exports": [
        "TextField"
      ],
      "usageCount": 9,
      "styleComplexity": 33,
      "file": "src/components/ui-kit/TextField.tsx",
      "classNames": [
        "fullWidth",
        "?",
        "'w-full'",
        ":",
        "''",
        "block",
        "text-sm",
        "font-medium",
        "text-gray-700",
        "mb-1",
        "text-red-500",
        "ml-1",
        "baseClasses"
      ],
      "styleProps": [
        "variant?: 'standard' | 'outlined' | 'filled'",
        "size?: 'small' | 'medium'",
        "fullWidth?: boolean",
        "id?",
        "label?",
        "placeholder?",
        "value?",
        "defaultValue?",
        "onChange?",
        "onBlur?",
        "error?",
        "helperText?",
        "required?",
        "disabled?",
        "multiline?",
        "rows?",
        "variant?",
        "size?",
        "fullWidth?",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mb-1",
          "ml-1"
        ],
        "sizing": [],
        "colors": [
          "text-gray-700",
          "text-red-500"
        ],
        "layout": [
          "block"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Tooltip": {
      "module": "./Tooltip",
      "fullPath": "src/components/ui-kit/./Tooltip.tsx",
      "exports": [
        "Tooltip"
      ],
      "usageCount": 19,
      "styleComplexity": 17,
      "file": "src/components/ui-kit/Tooltip.tsx",
      "classNames": [
        "cn('inline-block',",
        "className)",
        "fixed",
        "inset-0",
        "pointer-events-none",
        "z-50",
        "cn(",
        "getTooltipClasses(),",
        "contentClassName",
        ")",
        "getArrowClasses()"
      ],
      "styleProps": [
        "content",
        "children",
        "placement?",
        "className?",
        "contentClassName?",
        "delay?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [
          "fixed"
        ],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Typography": {
      "module": "./Typography",
      "fullPath": "src/components/ui-kit/./Typography.tsx",
      "exports": [
        "Typography"
      ],
      "usageCount": 103,
      "styleComplexity": 12,
      "file": "src/components/ui-kit/Typography.tsx",
      "classNames": [
        "classes"
      ],
      "styleProps": [
        "variant?: keyof typeof variantMapping",
        "color?:\n        | keyof typeof colorClasses\n        | 'text.primary'\n        | 'text.secondary'\n        | 'text.disabled'",
        "variant?",
        "color?",
        "align?",
        "component?",
        "as?",
        "gutterBottom?",
        "noWrap?",
        "paragraph?",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "ImageList": {
      "module": "./ImageList",
      "fullPath": "src/components/ui-kit/./ImageList.tsx",
      "exports": [
        "ImageList",
        "ImageListItem"
      ],
      "usageCount": 1,
      "styleComplexity": 30,
      "file": "src/components/ui-kit/ImageList.tsx",
      "classNames": [
        "twMerge(",
        "'grid",
        "w-full',",
        "getGridCols(cols),",
        "getGapClass(gap),",
        "className",
        ")",
        "'relative",
        "overflow-hidden",
        "rounded-lg',",
        "'aspect-square',",
        "//",
        "Default",
        "square",
        "aspect",
        "ratio",
        "'bg-gray-100',",
        "'hover:scale-105",
        "transition-transform",
        "duration-200',",
        "'cursor-pointer',",
        "'min-h-[44px]",
        "min-w-[44px]',",
        "Touch-friendly",
        "minimum",
        "size"
      ],
      "styleProps": [
        "cols?",
        "gap?",
        "children",
        "className?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "w-full',"
        ],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "ImageListItem": {
      "module": "./ImageList",
      "fullPath": "src/components/ui-kit/./ImageList.tsx",
      "exports": [
        "ImageList",
        "ImageListItem"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "Select": {
      "module": "./Select",
      "fullPath": "src/components/ui-kit/./Select.tsx",
      "exports": [
        "Select",
        "SelectItem"
      ],
      "usageCount": 5,
      "styleComplexity": 48,
      "file": "src/components/ui-kit/Select.tsx",
      "classNames": [
        "twMerge('relative',",
        "fullWidth",
        "&&",
        "'w-full')",
        "block",
        "text-sm",
        "font-medium",
        "text-gray-700",
        "mb-2",
        "relative",
        "baseClasses",
        "absolute",
        "inset-y-0",
        "right-0",
        "flex",
        "items-center",
        "px-2",
        "pointer-events-none",
        "w-5",
        "h-5",
        "text-gray-400",
        "twMerge(",
        "'py-2",
        "px-4",
        "text-gray-900",
        "bg-white",
        "hover:bg-gray-50',",
        "disabled",
        "'text-gray-400",
        "cursor-not-allowed',",
        "className",
        ")"
      ],
      "styleProps": [
        "size?: 'small' | 'medium' | 'large'",
        "variant?: 'outlined' | 'filled' | 'standard'",
        "fullWidth?: boolean",
        "value?",
        "onChange?",
        "children",
        "className?",
        "label?",
        "placeholder?",
        "disabled?",
        "error?",
        "size?",
        "variant?",
        "fullWidth?",
        "select?",
        "value"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mb-2",
          "px-2",
          "px-4"
        ],
        "sizing": [
          "w-5",
          "h-5"
        ],
        "colors": [
          "text-gray-700",
          "text-gray-400",
          "text-gray-900"
        ],
        "layout": [
          "block",
          "relative",
          "absolute",
          "flex"
        ],
        "responsive": [],
        "interactive": [
          "hover:bg-gray-50',"
        ],
        "custom": []
      },
      "dependencies": []
    },
    "SelectItem": {
      "module": "./Select",
      "fullPath": "src/components/ui-kit/./Select.tsx",
      "exports": [
        "Select",
        "SelectItem"
      ],
      "usageCount": 1,
      "styleComplexity": 0
    },
    "Step": {
      "module": "./Stepper",
      "fullPath": "src/components/ui-kit/./Stepper.tsx",
      "exports": [
        "Step",
        "StepContent",
        "StepLabel",
        "Stepper"
      ],
      "usageCount": 2,
      "styleComplexity": 0
    },
    "StepContent": {
      "module": "./Stepper",
      "fullPath": "src/components/ui-kit/./Stepper.tsx",
      "exports": [
        "Step",
        "StepContent",
        "StepLabel",
        "Stepper"
      ],
      "usageCount": 2,
      "styleComplexity": 0
    },
    "StepLabel": {
      "module": "./Stepper",
      "fullPath": "src/components/ui-kit/./Stepper.tsx",
      "exports": [
        "Step",
        "StepContent",
        "StepLabel",
        "Stepper"
      ],
      "usageCount": 2,
      "styleComplexity": 0
    },
    "Stepper": {
      "module": "./Stepper",
      "fullPath": "src/components/ui-kit/./Stepper.tsx",
      "exports": [
        "Step",
        "StepContent",
        "StepLabel",
        "Stepper"
      ],
      "usageCount": 2,
      "styleComplexity": 96,
      "file": "src/components/ui-kit/Stepper.tsx",
      "classNames": [
        "twMerge(",
        "'flex',",
        "orientation",
        "===",
        "'horizontal'",
        "?",
        "'flex-row'",
        ":",
        "'flex-col',",
        "className",
        ")",
        "'flex-col",
        "items-center'",
        "'flex-row',",
        "'relative',",
        "onClick",
        "&&",
        "!isDisabled",
        "'cursor-pointer',",
        "'absolute",
        "top-6",
        "left-0",
        "w-full",
        "h-0.5",
        "-translate-x-1/2',",
        "isCompleted",
        "'bg-green-500'",
        "'bg-gray-300'",
        "left-6",
        "top-0",
        "w-0.5",
        "h-full",
        "-translate-y-full',",
        "'flex",
        "items-center",
        "gap-3',",
        "text-center'",
        "justify-center',",
        "'w-12",
        "h-12",
        "rounded-full",
        "border-2",
        "transition-all',",
        "'min-w-[44px]",
        "min-h-[44px]',",
        "//",
        "Touch-friendly",
        "isActive",
        "'border-blue-500",
        "bg-blue-50',",
        "'border-green-500",
        "bg-green-50',",
        "error",
        "'border-red-500",
        "bg-red-50',",
        "!isActive",
        "!isCompleted",
        "!error",
        "'border-gray-300",
        "bg-gray-50'",
        "'text-sm',",
        "'text-blue-600',",
        "'text-green-600',",
        "'text-red-600',",
        "'text-gray-600'",
        "'text-sm",
        "font-medium',",
        "'flex-1',",
        "'text-center'",
        "'text-left'",
        "'text-blue-900',",
        "'text-green-900',",
        "'text-red-900',",
        "'text-gray-900'",
        "mt-1",
        "text-xs",
        "text-gray-500",
        "'mt-4",
        "ml-16',",
        "Offset",
        "for",
        "vertical",
        "stepper",
        "'transition-all",
        "duration-200',"
      ],
      "styleProps": [
        "activeStep",
        "orientation?",
        "children",
        "className?",
        "completed?",
        "disabled?",
        "onClick?",
        "stepIndex?",
        "icon?",
        "error?",
        "optional?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "mt-1",
          "ml-16',"
        ],
        "sizing": [
          "w-full",
          "h-0.5",
          "w-0.5",
          "h-full",
          "h-12"
        ],
        "colors": [
          "bg-blue-50',",
          "bg-green-50',",
          "bg-red-50',",
          "bg-gray-50'",
          "text-gray-500"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Accordion": {
      "module": "./Accordion",
      "fullPath": "src/components/ui-kit/./Accordion.tsx",
      "exports": [
        "Accordion",
        "AccordionDetails",
        "AccordionSummary"
      ],
      "usageCount": 5,
      "styleComplexity": 31,
      "file": "src/components/ui-kit/Accordion.tsx",
      "classNames": [
        "cn('w-full',",
        "className)",
        "cn(",
        "'flex",
        "w-full",
        "items-center",
        "justify-between",
        "px-4",
        "py-2",
        "text-left",
        "text-sm",
        "font-medium",
        "text-gray-900",
        "rounded-md",
        "hover:bg-gray-50",
        "focus:outline-none",
        "focus-visible:ring",
        "focus-visible:ring-blue-500",
        "focus-visible:ring-opacity-75',",
        "className",
        ")",
        "h-5",
        "w-5",
        "cn('px-4",
        "pt-2",
        "pb-4",
        "text-gray-700',"
      ],
      "styleProps": [
        "children",
        "className?",
        "defaultOpen?",
        "expandIcon?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-4",
          "py-2",
          "pt-2",
          "pb-4"
        ],
        "sizing": [
          "w-full",
          "h-5",
          "w-5"
        ],
        "colors": [
          "text-gray-900",
          "text-gray-700',"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "hover:bg-gray-50",
          "focus:outline-none"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "AccordionDetails": {
      "module": "./Accordion",
      "fullPath": "src/components/ui-kit/./Accordion.tsx",
      "exports": [
        "Accordion",
        "AccordionDetails",
        "AccordionSummary"
      ],
      "usageCount": 5,
      "styleComplexity": 0
    },
    "AccordionSummary": {
      "module": "./Accordion",
      "fullPath": "src/components/ui-kit/./Accordion.tsx",
      "exports": [
        "Accordion",
        "AccordionDetails",
        "AccordionSummary"
      ],
      "usageCount": 5,
      "styleComplexity": 0
    },
    "AlertTitle": {
      "module": "./AlertTitle",
      "fullPath": "src/components/ui-kit/./AlertTitle.tsx",
      "exports": [
        "AlertTitle"
      ],
      "usageCount": 1,
      "styleComplexity": 2,
      "file": "src/components/ui-kit/AlertTitle.tsx",
      "classNames": [
        "classes"
      ],
      "styleProps": [
        "component?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": []
    },
    "Fade": {
      "module": "./Fade",
      "fullPath": "src/components/ui-kit/./Fade.tsx",
      "exports": [
        "Fade"
      ],
      "usageCount": 2,
      "styleComplexity": 14,
      "file": "src/components/ui-kit/Fade.tsx",
      "classNames": [
        "cn(",
        "'transition-opacity',",
        "open",
        "?",
        "'opacity-100'",
        ":",
        "'opacity-0",
        "pointer-events-none',",
        "className",
        ")"
      ],
      "styleProps": [
        "in",
        "children",
        "className?",
        "duration?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "FormControlLabel": {
      "module": "./FormControlLabel",
      "fullPath": "src/components/ui-kit/./FormControlLabel.tsx",
      "exports": [
        "FormControlLabel"
      ],
      "usageCount": 2,
      "styleComplexity": 17,
      "file": "src/components/ui-kit/FormControlLabel.tsx",
      "classNames": [
        "cn(",
        "'inline-flex",
        "items-center",
        "space-x-2",
        "text-sm',",
        "labelPlacement",
        "===",
        "'start'",
        "&&",
        "'flex-row-reverse",
        "space-x-reverse',",
        "className",
        ")"
      ],
      "styleProps": [
        "label",
        "control",
        "className?",
        "labelPlacement?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "FormHelperText": {
      "module": "./FormHelperText",
      "fullPath": "src/components/ui-kit/./FormHelperText.tsx",
      "exports": [
        "FormHelperText"
      ],
      "usageCount": 1,
      "styleComplexity": 4,
      "file": "src/components/ui-kit/FormHelperText.tsx",
      "classNames": [
        "classes"
      ],
      "styleProps": [
        "component?",
        "error?",
        "disabled?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./FormControl"
      ]
    },
    "Switch": {
      "module": "./Switch",
      "fullPath": "src/components/ui-kit/./Switch.tsx",
      "exports": [
        "Switch"
      ],
      "usageCount": 2,
      "styleComplexity": 37,
      "file": "src/components/ui-kit/Switch.tsx",
      "classNames": [
        "cn(",
        "'relative",
        "inline-flex",
        "h-6",
        "w-11",
        "items-center",
        "rounded-full",
        "transition-colors",
        "focus:outline-none",
        "focus:ring-2",
        "focus:ring-blue-500",
        "focus:ring-offset-2',",
        "checked",
        "?",
        "'bg-blue-600'",
        ":",
        "'bg-gray-200',",
        "disabled",
        "&&",
        "'opacity-50",
        "cursor-not-allowed',",
        "className",
        ")",
        "'inline-block",
        "h-4",
        "w-4",
        "transform",
        "bg-white",
        "transition-transform',",
        "'translate-x-5'",
        "'translate-x-1'"
      ],
      "styleProps": [
        "checked",
        "onChange",
        "disabled?",
        "className?",
        "id?",
        "name?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [
          "h-6",
          "w-11",
          "h-4",
          "w-4"
        ],
        "colors": [],
        "layout": [
          "inline-flex"
        ],
        "responsive": [],
        "interactive": [
          "focus:outline-none",
          "focus:ring-2",
          "focus:ring-blue-500",
          "focus:ring-offset-2',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../utils/cn"
      ]
    },
    "Typography.stories": {
      "file": "src/components/ui-kit/Typography.stories.tsx",
      "classNames": [
        "space-y-4"
      ],
      "styleProps": [
        "variant: {\n            control: { type: 'select' ",
        "variant: 'h1'"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./Typography"
      ],
      "styleComplexity": 3
    },
    "Stack.stories": {
      "file": "src/components/ui-kit/Stack.stories.tsx",
      "classNames": [
        "p-4",
        "bg-blue-200",
        "rounded",
        "bg-green-200",
        "bg-yellow-200"
      ],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [
          "p-4"
        ],
        "sizing": [],
        "colors": [
          "bg-blue-200",
          "bg-green-200",
          "bg-yellow-200"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./Stack",
        "./Box"
      ],
      "styleComplexity": 5
    },
    "HomepageSelect": {
      "file": "src/components/ui-kit/HomepageSelect.tsx",
      "classNames": [
        "cn(",
        "'flex",
        "w-full",
        "rounded-md",
        "border",
        "border-gray-300",
        "bg-white",
        "px-3",
        "py-2",
        "text-sm',",
        "'focus-visible:outline-none",
        "focus-visible:ring-2",
        "focus-visible:ring-blue-500",
        "focus-visible:ring-offset-2',",
        "'disabled:cursor-not-allowed",
        "disabled:opacity-50',",
        "//",
        "Touch",
        "optimization",
        "touchOptimized",
        "&&",
        "'min-h-[48px]",
        "text-base',",
        "className",
        ")"
      ],
      "styleProps": [
        "touchOptimized?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-3",
          "py-2"
        ],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "border-gray-300"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "disabled:opacity-50',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../lib/utils"
      ],
      "styleComplexity": 26,
      "usageCount": null
    },
    "HomepageInput": {
      "file": "src/components/ui-kit/HomepageInput.tsx",
      "classNames": [
        "cn(",
        "'flex",
        "w-full",
        "rounded-md",
        "border",
        "border-gray-300",
        "bg-white",
        "px-3",
        "py-2",
        "text-sm',",
        "'placeholder:text-gray-500',",
        "'focus-visible:outline-none",
        "focus-visible:ring-2",
        "focus-visible:ring-blue-500",
        "focus-visible:ring-offset-2',",
        "'disabled:cursor-not-allowed",
        "disabled:opacity-50',",
        "//",
        "Touch",
        "optimization",
        "-",
        "minimum",
        "48px",
        "height",
        "touchOptimized",
        "&&",
        "'min-h-[48px]",
        "text-base',",
        "className",
        ")"
      ],
      "styleProps": [
        "touchOptimized?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-3",
          "py-2"
        ],
        "sizing": [
          "w-full"
        ],
        "colors": [
          "border-gray-300"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "disabled:opacity-50',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../lib/utils"
      ],
      "styleComplexity": 31,
      "usageCount": null
    },
    "HomepageCard": {
      "file": "src/components/ui-kit/HomepageCard.tsx",
      "classNames": [
        "cn(",
        "'rounded-lg",
        "border",
        "bg-white",
        "shadow-sm',",
        "padding",
        "===",
        "'sm'",
        "&&",
        "'p-4',",
        "'md'",
        "'p-6',",
        "'lg'",
        "'p-8',",
        "className",
        ")"
      ],
      "styleProps": [
        "padding?"
      ],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "../../lib/utils"
      ],
      "styleComplexity": 17,
      "usageCount": null
    },
    "HomepageButton": {
      "file": "src/components/ui-kit/HomepageButton.tsx",
      "classNames": [
        "cn(",
        "//",
        "Base",
        "styles",
        "'inline-flex",
        "items-center",
        "justify-center",
        "rounded-md",
        "font-medium",
        "transition-colors',",
        "'focus-visible:outline-none",
        "focus-visible:ring-2",
        "focus-visible:ring-blue-500",
        "focus-visible:ring-offset-2',",
        "'disabled:pointer-events-none",
        "disabled:opacity-50',",
        "Touch",
        "optimization",
        "-",
        "minimum",
        "48px",
        "height",
        "per",
        "WCAG",
        "guidelines",
        "touchOptimized",
        "&&",
        "'min-h-[48px]",
        "min-w-[48px]',",
        "Variants",
        "variant",
        "===",
        "'default'",
        "'bg-gray-100",
        "text-gray-900",
        "hover:bg-gray-200',",
        "'primary'",
        "'bg-blue-600",
        "text-white",
        "hover:bg-blue-700',",
        "'secondary'",
        "'bg-gray-200",
        "hover:bg-gray-300',",
        "'ghost'",
        "'hover:bg-gray-100',",
        "Sizes",
        "size",
        "'sm'",
        "'h-8",
        "px-3",
        "text-sm',",
        "'md'",
        "'h-10",
        "px-4",
        "py-2',",
        "'lg'",
        "'h-12",
        "px-6",
        "text-lg',",
        "Override",
        "if",
        "touch",
        "optimized",
        "'h-14",
        "className",
        ")"
      ],
      "styleProps": [
        "variant?: 'default' | 'primary' | 'secondary' | 'ghost'\n  size?: 'sm' | 'md' | 'lg'\n  touchOptimized?: boolean\n",
        "variant?"
      ],
      "tailwindPatterns": {
        "spacing": [
          "px-3",
          "px-4",
          "py-2',",
          "px-6"
        ],
        "sizing": [],
        "colors": [
          "text-gray-900"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [
          "disabled:opacity-50',",
          "hover:bg-gray-200',",
          "hover:bg-blue-700',",
          "hover:bg-gray-300',"
        ],
        "custom": []
      },
      "dependencies": [
        "../../lib/utils"
      ],
      "styleComplexity": 68,
      "usageCount": null
    },
    "Chart": {
      "file": "src/components/ui-kit/Chart.tsx",
      "classNames": [
        "twMerge(",
        "'w-full",
        "bg-white",
        "border",
        "border-gray-200",
        "rounded-lg",
        "p-4',",
        "className",
        ")"
      ],
      "styleProps": [
        "color: '#1F2937'",
        "height?",
        "className?",
        "children",
        "data",
        "keys",
        "indexBy",
        "colors?",
        "margin?",
        "right",
        "bottom",
        "left"
      ],
      "tailwindPatterns": {
        "spacing": [
          "p-4',"
        ],
        "sizing": [],
        "colors": [
          "border-gray-200"
        ],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [],
      "styleComplexity": 21
    },
    "Box.stories": {
      "file": "src/components/ui-kit/Box.stories.tsx",
      "classNames": [],
      "styleProps": [],
      "tailwindPatterns": {
        "spacing": [],
        "sizing": [],
        "colors": [],
        "layout": [],
        "responsive": [],
        "interactive": [],
        "custom": []
      },
      "dependencies": [
        "./Box"
      ],
      "styleComplexity": 0
    }
  },
  "usagePatterns": {
    "Card": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<Card className=\"mb-2\">",
          "<CardContent>",
          "<Card className=\"mb-2\">"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<Card className=\"mb-1 cursor-pointer\">",
          "<CardContent className=\"p-2 [&:last-child]:pb-2\">"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Card\n                        className={`mb-2 ${currentLocation\n                                ? 'bg-green-50'\n                                : 'bg-gray-100'\n                            }`}\n                    >",
          "<CardContent>"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Card className=\"mb-6 w-full\">",
          "<CardContent>",
          "<Card className=\"mb-6 w-full\">"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsPage.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Card\n            className=\"h-full cursor-pointer transition-all duration-200 ease-in-out hover:-translate-y-0.5 hover:shadow-lg\"\n            style={{ borderLeft: `4px solid ${category.color}` }}\n            onClick={() =>",
          "<CardContent className=\"p-2\">",
          "<Card>"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Card\n            className=\"mb-1 hover:shadow-lg transition-shadow\"\n            style={{ border: `2px solid ${record.color}` }}\n        >",
          "<CardContent className=\"p-2\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Card>",
          "<CardContent className=\"text-center\">",
          "<Card>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Card className=\"mb-3\">",
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Card>",
          "<CardContent className=\"text-center\">",
          "<Card>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Card className=\"mb-8\">",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Card className=\"mb-3\">",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Card>",
          "<CardContent className=\"text-center\">",
          "<Card>"
        ]
      },
      {
        "file": "src/sales/SalesEdit.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/sales/SalesCreate.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Card className=\"mb-4\">",
          "<CardContent>",
          "<Card className=\"mb-4\">"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<Card\n            className={`mb-1 cursor-pointer ${record.is_completed\n                    ? 'bg-gray-100 opacity-70'\n                    : isOverdue\n                        ? 'bg-red-50'\n                        : isDueToday\n                            ? 'bg-yellow-50'\n                            : 'bg-white'\n                }`}\n        >",
          "<CardContent className=\"p-4\">"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Card key={stat.label} className={\n                    stat.color === 'error' ? 'bg-red-50' :\n                    stat.color === 'warning' ? 'bg-yellow-50' :\n                    stat.color === 'info' ? 'bg-blue-50' :\n                    stat.color === 'success' ? 'bg-green-50' : 'bg-gray-50'\n                }>",
          "<CardContent className=\"flex items-center p-4\">",
          "<Card>"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<Card className=\"mb-4 bg-blue-50 text-blue-900\">",
          "<CardContent>"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Card\n            component=\"article\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label={`Product: ${record.name}, SKU: ${record.sku}, Price: ${record.pricePerUnit ? `$${record.pricePerUnit}` : 'Not set'\n                }`}\n            onKeyDown={e =>",
          "<CardContent className=\"pb-1\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityList.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEdit.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCreate.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Card\n                className=\"transition-all duration-200 ease-in-out hover:shadow-lg hover:-translate-y-1 min-h-40\"\n            >",
          "<CardContent className=\"p-4\">"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Card\n                            variant=\"outlined\"\n                            className=\"flex-1 cursor-pointer hover:shadow-md transition-shadow\"\n                        >",
          "<CardContent\n                                className={compact ? 'p-1.5 [&:last-child]:pb-1.5' : 'p-2 [&:last-child]:pb-2'}\n                            >"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Card className=\"mb-3\">",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": []
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Card\n            component=\"article\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label={`Interaction: ${interaction.subject || 'Untitled Interaction'} with ${interaction.organization?.name || 'Unknown Organization'}`}\n            onKeyDown={e =>",
          "<CardContent className=\"p-2 [&:last-child]:pb-2\">"
        ]
      },
      {
        "file": "src/dashboard/Welcome.tsx",
        "context": [
          "<Card\n        style={{\n            background: 'linear-gradient(135deg, #c5dedd 0%, #a8d5d3 100%)',\n            color: 'rgba(0, 0, 0, 0.87)',\n            border: 'none',\n        }}\n    >",
          "<CardContent className=\"p-6\">"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/TasksList.tsx",
        "context": [
          "<Card className=\"shadow-sm\">",
          "<CardHeader className=\"pb-3\">",
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Card\n            className={`h-full transition-all duration-200 ease-in-out ${onClick\n                ? 'cursor-pointer hover:shadow-lg hover:-translate-y-0.5'\n                : 'cursor-default'\n                }`}\n            onClick={onClick}\n        >",
          "<CardContent className={isMobile ? 'p-4' : 'p-6'}>",
          "<Card className=\"mt-4\">"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/LatestNotes.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/HotContacts.tsx",
        "context": [
          "<Card className=\"shadow-sm\">",
          "<CardHeader className=\"pb-3\">",
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/DealsPipeline.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/DashboardActivityLog.tsx",
        "context": [
          "<Card className=\"shadow-sm\">",
          "<CardHeader className=\"pb-3\">",
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      },
      {
        "file": "src/customers/CustomerListFilter.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/customers/CustomerList.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/contacts/ContactList.tsx",
        "context": [
          "<Card>"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Card\n            className=\"h-full flex flex-col cursor-pointer hover:shadow-lg relative transition-shadow\"\n            style={{\n                minHeight: isMobile ? '220px' : '260px',\n            }}\n        >",
          "<CardContent className=\"flex-grow pb-2\">",
          "<CardActions className=\"pt-0 justify-between\">"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<Card className=\"p-6\">"
        ]
      },
      {
        "file": "src/companies/CompanyEdit.tsx",
        "context": [
          "<Card className=\"p-6\">"
        ]
      },
      {
        "file": "src/companies/CompanyCreate.tsx",
        "context": [
          "<Card className=\"p-6\">"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationListFilter.tsx",
        "context": [
          "<Card\n            className={`order-first mr-4 mt-20 w-62 min-w-62 ${displayedFilters.priority || displayedFilters.segment || displayedFilters.distributor ? 'block' : 'hidden'} sm:block`}\n        >",
          "<CardContent>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Card\n            ref={setNodeRef}\n            style={style}\n            sx={{\n                cursor: isDragging || isSortableDragging ? 'grabbing' : 'grab',\n                transition: 'all 0.2s ease-in-out',\n                '&:hover': {\n                    transform:\n                        isDragging || isSortableDragging\n                            ? 'none'\n                            : 'translateY(-1px)',\n                    boxShadow: isDragging || isSortableDragging ? 'none' : 4,\n                },\n                minHeight: { xs: 140, sm: 160 }, // Mobile-optimized heights\n                touchAction: 'none', // Prevent scrolling while dragging on mobile\n            }}\n            {...attributes}\n            {...listeners}\n            onClick={() =>",
          "<CardContent\n                sx={{\n                    p: { xs: 1.5, sm: 2 },\n                    '&:last-child': { pb: { xs: 1.5, sm: 2 } },\n                }}\n            >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Card\n                        className={`h-full flex flex-col transition-all duration-200 ease-in-out hover:-translate-y-1 hover:shadow-lg cursor-pointer min-h-70 ${\n                            isMobile ? 'organization-card-mobile' : 'organization-card-desktop'\n                        }`}\n                    >",
          "<CardContent className=\"flex-grow pb-2\">",
          "<CardActions className=\"px-4 pb-4 pt-0 justify-between\">"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Card className=\"filter-container\" sx={{ mb: 2 }}>",
          "<CardContent sx={{ pb: 2 }}>"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Card\n                ref={cardRef}\n                className=\"h-50 sm:h-55 md:h-60 flex flex-col\"\n            >",
          "<CardContent className=\"flex-1 p-4 sm:p-6\">",
          "<CardActions className=\"p-2 sm:p-4 pt-0\">"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Card variant=\"outlined\">",
          "<CardContent>",
          "<Card variant=\"outlined\">"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Card>",
          "<CardContent>",
          "<Card>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Card sx={{ mb: 3 }}>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Card>",
          "<CardContent sx={{ textAlign: 'center' }}>",
          "<Card>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Card>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/components/dashboard/UpcomingMeetings.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentProducts.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentInteractions.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentContacts.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/HighPriorityTasks.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/APriorityOrganizations.tsx",
        "context": [
          "<Card className=\"h-full\">"
        ]
      }
    ],
    "CardContent": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<CardContent className=\"p-2 [&:last-child]:pb-2\">"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsPage.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsEdit.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsCreate.tsx",
        "context": [
          "<CardContent className=\"p-2 md:p-3\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<CardContent className=\"p-2\">",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<CardContent className=\"p-2\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">",
          "<CardContent className=\"text-center\">"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<CardContent className=\"p-4\">"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<CardContent className=\"flex items-center p-4\">",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<CardContent className=\"pb-1\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEdit.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCreate.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<CardContent className=\"p-4\">"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<CardContent\n                                className={compact ? 'p-1.5 [&:last-child]:pb-1.5' : 'p-2 [&:last-child]:pb-2'}\n                            >"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": []
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<CardContent className=\"p-2 [&:last-child]:pb-2\">"
        ]
      },
      {
        "file": "src/dashboard/Welcome.tsx",
        "context": [
          "<CardContent className=\"p-6\">"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/TasksList.tsx",
        "context": [
          "<CardContent className=\"pt-0\">"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<CardContent className={isMobile ? 'p-4' : 'p-6'}>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/LatestNotes.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/HotContacts.tsx",
        "context": [
          "<CardContent className=\"pt-0\">"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/dashboard/DashboardActivityLog.tsx",
        "context": [
          "<CardContent className=\"pt-0\">"
        ]
      },
      {
        "file": "src/customers/CustomerListFilter.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/contacts/ContactEdit.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/contacts/ContactCreate.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<CardContent className=\"flex-grow pb-2\">"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationListFilter.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<CardContent\n                sx={{\n                    p: { xs: 1.5, sm: 2 },\n                    '&:last-child': { pb: { xs: 1.5, sm: 2 } },\n                }}\n            >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<CardContent className=\"flex-grow pb-2\">"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<CardContent sx={{ pb: 2 }}>"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationCreate.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<CardContent className=\"flex-1 p-4 sm:p-6\">",
          "<CardContent className=\"flex-1 p-4 sm:p-6\">"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<CardContent>",
          "<CardContent>",
          "<CardContent>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<CardContent>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<CardContent sx={{ textAlign: 'center' }}>",
          "<CardContent sx={{ textAlign: 'center' }}>",
          "<CardContent sx={{ textAlign: 'center' }}>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<CardContent>"
        ]
      }
    ],
    "Typography": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography className=\"text-gray-500\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<Typography\n                        variant=\"h6\"\n                        className=\"font-semibold text-base\"\n                    >",
          "<Typography variant=\"body2\">",
          "<Typography\n                            variant=\"body2\"\n                            className=\"text-gray-500 flex-1\"\n                        >"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"subtitle1\">",
          "<Typography\n                                        variant=\"body2\"\n                                        className=\"text-gray-500\"\n                                    >"
        ]
      },
      {
        "file": "src/users/UserEmpty.tsx",
        "context": [
          "<Typography variant=\"h5\" component=\"h2\" className=\"mb-2\">",
          "<Typography variant=\"body1\" className=\"text-gray-500 mb-4\">",
          "<Typography variant=\"body2\" className=\"text-gray-500 mb-4\">"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography\n                                    variant=\"body2\"\n                                    color=\"text.secondary\"\n                                    gutterBottom\n                                >",
          "<Typography variant=\"h6\" gutterBottom>"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Typography\n                            variant=\"h6\"\n                            className=\"mb-0 flex items-center\"\n                        >",
          "<Typography\n                        variant=\"body2\"\n                        color=\"text.secondary\"\n                        paragraph\n                    >",
          "<Typography variant=\"body1\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/settings/SettingsShow.tsx",
        "context": [
          "<Typography variant=\"body2\" className=\"font-mono\">",
          "<Typography variant=\"h6\" className=\"mb-4\">",
          "<Typography\n                                variant=\"subtitle2\"\n                                className=\"text-gray-500\"\n                            >"
        ]
      },
      {
        "file": "src/settings/SettingsPage.tsx",
        "context": [
          "<Typography variant=\"h5\" component=\"h2\" className=\"mb-4\">",
          "<Typography>"
        ]
      },
      {
        "file": "src/settings/SettingsCreate.tsx",
        "context": [
          "<Typography variant=\"h5\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\" className=\"mb-3\">",
          "<Typography variant=\"h6\" gutterBottom>"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Typography\n                            variant={isMobile ? 'subtitle1' : 'h6'}\n                            className=\"font-bold\"\n                        >",
          "<Typography\n                    variant=\"body2\"\n                    color=\"text.secondary\"\n                    className=\"mb-2 min-h-8\"\n                >",
          "<Typography variant=\"h4\" gutterBottom className=\"font-bold\">"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography variant=\"h6\" component=\"div\">",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Typography variant=\"h5\">",
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography variant=\"h4\" className=\"text-green-600\">"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography>",
          "<Typography variant=\"h4\" component=\"h1\">"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography>",
          "<Typography variant=\"h4\" component=\"h1\">"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography>",
          "<Typography variant=\"h4\" component=\"h1\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Typography variant=\"caption\" color=\"text.secondary\">",
          "<Typography variant=\"body2\" component=\"span\" sx={{ ml: 1 }}>",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Typography paragraph>",
          "<Typography paragraph>",
          "<Typography\n                                        variant=\"caption\"\n                                        className=\"block\"\n                                    >"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography>",
          "<Typography variant=\"h4\" component=\"h1\">"
        ]
      },
      {
        "file": "src/sales/SalesEdit.tsx",
        "context": [
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/sales/SalesCreate.tsx",
        "context": [
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\">",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<Typography\n                            variant=\"h6\"\n                            className={`font-semibold text-base ${record.is_completed ? 'line-through' : ''}`}\n                        >",
          "<Typography variant=\"body2\" className=\"text-gray-500\">",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Typography variant=\"h4\" className=\"font-bold\">",
          "<Typography variant=\"body2\" className=\"opacity-90\">",
          "<Typography variant=\"h6\" gutterBottom className=\"flex items-center\">"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"subtitle1\">",
          "<Typography variant=\"body2\" className=\"mb-2 opacity-90\">"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Typography\n                            variant=\"h6\"\n                            component=\"h3\"\n                            className=\"font-semibold leading-tight overflow-hidden text-ellipsis whitespace-nowrap mb-1\"\n                        >",
          "<Typography variant=\"body2\" className=\"text-gray-500\">",
          "<Typography variant=\"body2\" className=\"text-gray-500\">"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Typography>",
          "<Typography variant=\"h6\" component=\"div\">",
          "<Typography variant=\"h6\" noWrap>"
        ]
      },
      {
        "file": "src/products/PriceField.tsx",
        "context": [
          "<TypographyProps, 'children'>",
          "<Typography variant={variant} className=\"text-gray-500\" {...props}>",
          "<Typography variant={variant} className=\"text-red-500\" {...props}>"
        ]
      },
      {
        "file": "src/pages/Dashboard.tsx",
        "context": [
          "<Typography variant=\"h1\" className=\"text-2xl font-bold text-gray-900\">",
          "<Typography variant=\"body1\" className=\"text-gray-600 mt-1\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Typography variant=\"h4\" component=\"h1\">",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEmpty.tsx",
        "context": [
          "<Typography variant=\"h5\" className=\"text-gray-500 mb-4\">",
          "<Typography variant=\"body1\" className=\"text-gray-500 mb-4\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEdit.tsx",
        "context": [
          "<Typography\n                            variant=\"h5\"\n                            sx={{ fontWeight: 600, mb: 3 }}\n                        >",
          "<Typography\n                                    variant=\"h6\"\n                                    sx={{ fontWeight: 600, mb: 2 }}\n                                >",
          "<Typography\n                                    variant=\"h6\"\n                                    sx={{ fontWeight: 600, mb: 2, mt: 2 }}\n                                >"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCreate.tsx",
        "context": [
          "<Typography\n                            variant=\"h5\"\n                            sx={{ fontWeight: 600, mb: 3 }}\n                        >",
          "<Typography\n                                    variant=\"h6\"\n                                    sx={{ fontWeight: 600, mb: 2 }}\n                                >",
          "<Typography\n                                    variant=\"h6\"\n                                    sx={{ fontWeight: 600, mb: 2, mt: 2 }}\n                                >"
        ]
      },
      {
        "file": "src/opportunities/OpportunityColumn.tsx",
        "context": [
          "<Typography variant=\"h6\" sx={{ fontWeight: 600 }}>",
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Typography\n                            variant=\"subtitle1\"\n                            className=\"font-semibold leading-tight text-sm flex-grow mr-2\"\n                        >",
          "<Typography\n                                        variant=\"body2\"\n                                        className=\"text-sm\"\n                                    >",
          "<Typography\n                                    variant=\"h6\"\n                                    className=\"font-semibold text-base text-green-600\"\n                                >"
        ]
      },
      {
        "file": "src/notes/NoteInputs.tsx",
        "context": [
          "<Typography variant=\"caption\" className=\"text-gray-500\">"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<Typography className=\"text-gray-500\" variant=\"body2\">",
          "<Typography\n                    className=\"text-gray-500\"\n                    variant=\"body2\"\n                    component=\"span\"\n                >"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Typography\n                        component={Link}\n                        variant=\"caption\"\n                        onClick={() =>"
        ]
      },
      {
        "file": "src/misc/ContactOption.tsx",
        "context": [
          "<Typography variant=\"caption\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Typography>",
          "<Typography color=\"error\">",
          "<Typography\n                        variant={isMobile ? 'h5' : 'h4'}\n                        component=\"h1\"\n                        gutterBottom\n                        sx={{ fontWeight: 600 }}\n                    >"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Typography\n                        component=\"span\"\n                        variant={isMobile ? 'h6' : 'h5'}\n                    >",
          "<Typography\n                                variant={isMobile ? 'h5' : 'h4'}\n                                component=\"h1\"\n                                gutterBottom\n                                sx={{ fontWeight: 600 }}\n                            >",
          "<Typography\n                                variant=\"body1\"\n                                color=\"text.secondary\"\n                                gutterBottom\n                            >"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Typography\n                        component=\"span\"\n                        variant={isMobile ? 'h6' : 'h5'}\n                    >",
          "<Typography\n                                variant={isMobile ? 'h5' : 'h4'}\n                                component=\"h1\"\n                                gutterBottom\n                                sx={{ fontWeight: 600 }}\n                            >",
          "<Typography\n                                variant=\"body1\"\n                                color=\"text.secondary\"\n                                gutterBottom\n                            >"
        ]
      },
      {
        "file": "src/interactions/InteractionTypeSelector.tsx",
        "context": [
          "<Typography variant=\"body2\" className=\"font-medium\">",
          "<Typography variant=\"caption\" className=\"text-gray-500\">"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Typography variant=\"body2\" className=\"text-gray-500\">",
          "<Typography\n                                        variant={\n                                            compact ? 'body2' : 'subtitle1'\n                                        }\n                                        className=\"font-semibold flex-grow mr-1\"\n                                    >",
          "<Typography\n                                            variant=\"caption\"\n                                            className=\"text-gray-500 block\"\n                                        >"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Typography variant=\"h5\" gutterBottom>",
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography\n                                    variant=\"caption\"\n                                    className=\"text-gray-600\"\n                                >"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": []
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"h6\" gutterBottom>"
        ]
      },
      {
        "file": "src/interactions/InteractionFilters.tsx",
        "context": [
          "<Typography variant=\"subtitle1\" gutterBottom>",
          "<Typography variant=\"subtitle2\" className=\"text-gray-600\">",
          "<Typography variant=\"subtitle2\" className=\"text-gray-600\">"
        ]
      },
      {
        "file": "src/interactions/InteractionEmpty.tsx",
        "context": [
          "<Typography variant=\"h5\" className=\"text-gray-500\" gutterBottom>",
          "<Typography\n                variant=\"body1\"\n                className=\"text-gray-500 mb-3 max-w-96\"\n            >",
          "<Typography variant=\"subtitle2\" gutterBottom>"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Typography\n                                variant=\"subtitle1\"\n                                className=\"font-semibold leading-tight text-sm\"\n                            >",
          "<Typography\n                                variant=\"caption\"\n                                className=\"text-gray-500 text-xs\"\n                            >",
          "<Typography\n                                    variant=\"body2\"\n                                    className=\"text-sm\"\n                                >"
        ]
      },
      {
        "file": "src/deals/DealColumn.tsx",
        "context": [
          "<Typography variant=\"subtitle1\">",
          "<Typography\n                    variant=\"subtitle1\"\n                    color=\"text.secondary\"\n                    fontSize=\"small\"\n                >"
        ]
      },
      {
        "file": "src/dashboard/Welcome.tsx",
        "context": [
          "<Typography variant=\"h5\" className=\"mb-3 font-bold text-gray-800\">",
          "<Typography variant=\"body1\" className=\"mb-3 text-gray-700\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<Typography\n                variant=\"h6\"\n                gutterBottom\n                className=\"flex items-center mb-6\"\n            >",
          "<Typography\n                                variant=\"subtitle1\"\n                                gutterBottom\n                                className=\"flex items-center\"\n                            >",
          "<Typography\n                                        variant=\"h4\"\n                                        component=\"span\"\n                                        className=\"font-bold\"\n                                    >"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Typography\n                    variant={isMobile ? 'h5' : 'h4'}\n                    component=\"div\"\n                    className=\"font-bold mb-1\"\n                    style={{ color: getColorValue(color, 'main') }}\n                >",
          "<Typography variant=\"body2\" className=\"text-gray-600 mb-2\">",
          "<Typography\n                        variant=\"caption\"\n                        className=\"text-gray-600 block\"\n                    >"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography className=\"text-gray-600\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography color=\"textSecondary\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/dashboard/LatestNotes.tsx",
        "context": [
          "<Typography variant=\"h5\" className=\"text-gray-600\">",
          "<Typography\n                                variant=\"body2\"\n                                className=\"text-gray-600\"\n                                component=\"div\"\n                            >",
          "<Typography\n                                    variant=\"body2\"\n                                    className=\"line-clamp-3 overflow-hidden\"\n                                >"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography color=\"textSecondary\">",
          "<Typography variant=\"h6\" gutterBottom>"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"mb-2\">",
          "<Typography\n                            variant=\"subtitle2\"\n                            className=\"text-gray-600 mb-2\"\n                        >",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography color=\"textSecondary\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Typography\n                                        variant=\"h4\"\n                                        component=\"h1\"\n                                        className=\"font-semibold mb-2\"\n                                    >",
          "<Typography\n                                            variant=\"h6\"\n                                            className=\"text-gray-600 mb-2\"\n                                        >",
          "<Typography\n                                            variant=\"h6\"\n                                            className=\"font-semibold mb-2 flex items-center\"\n                                        >"
        ]
      },
      {
        "file": "src/contacts/ContactList.tsx",
        "context": []
      },
      {
        "file": "src/contacts/ContactInputs.tsx",
        "context": [
          "<Typography variant=\"h5\" className=\"font-semibold mb-4\">",
          "<Typography variant=\"h6\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/contacts/ContactEmpty.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"font-bold\">",
          "<Typography\n                    variant=\"body2\"\n                    align=\"center\"\n                    color=\"textSecondary\"\n                    className=\"mb-4\"\n                >"
        ]
      },
      {
        "file": "src/contacts/ContactCreate.tsx",
        "context": [
          "<Typography\n                                    variant=\"h6\"\n                                    className=\"font-semibold text-blue-600\"\n                                >",
          "<Typography variant=\"body2\" color=\"textSecondary\">"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Typography\n                            variant=\"h6\"\n                            component=\"h2\"\n                            className=\"font-semibold leading-tight overflow-hidden text-ellipsis whitespace-nowrap\"\n                        >",
          "<Typography\n                                variant=\"body2\"\n                                className=\"text-gray-600\"\n                            >",
          "<Typography\n                            variant=\"body2\"\n                            className=\"text-gray-600 flex items-center mb-2\"\n                        >"
        ]
      },
      {
        "file": "src/companies/CompanyCard.tsx",
        "context": [
          "<Typography variant=\"subtitle2\">",
          "<Typography variant=\"subtitle2\">",
          "<Typography variant=\"caption\" color=\"textSecondary\">"
        ]
      },
      {
        "file": "src/companies/CompanyAside.tsx",
        "context": [
          "<Typography variant=\"subtitle2\">",
          "<Typography variant=\"subtitle2\">",
          "<Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    gutterBottom\n                >"
        ]
      },
      {
        "file": "src/common/LoadingComponent.tsx",
        "context": [
          "<Typography\n                    variant={isMobile ? 'body2' : 'body1'}\n                    className=\"text-gray-500 text-center\"\n                >"
        ]
      },
      {
        "file": "src/common/LazyLoadingUtils.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<Typography\n                                        variant=\"h4\"\n                                        component=\"h1\"\n                                        className=\"font-semibold mb-1\"\n                                    >",
          "<Typography\n                                    variant=\"h6\"\n                                    className=\"font-semibold\"\n                                >",
          "<Typography\n                                            variant=\"body2\"\n                                            className=\"text-gray-500\"\n                                        >"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography\n                                    variant=\"subtitle2\"\n                                    fontWeight=\"medium\"\n                                    sx={{\n                                        overflow: 'hidden',\n                                        textOverflow: 'ellipsis',\n                                        whiteSpace: 'nowrap',\n                                    }}\n                                >",
          "<Typography\n                                    variant=\"caption\"\n                                    color=\"text.secondary\"\n                                >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<Typography>",
          "<Typography variant=\"h6\" color=\"text.secondary\">",
          "<Typography\n                                            variant=\"subtitle2\"\n                                            fontWeight=\"medium\"\n                                        >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Typography\n                            variant={isMobile ? 'body2' : 'subtitle2'}\n                            sx={{\n                                fontWeight: 600,\n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                whiteSpace: 'nowrap',\n                                lineHeight: 1.2,\n                                mb: 0.25,\n                            }}\n                        >",
          "<Typography\n                                variant=\"caption\"\n                                color=\"text.secondary\"\n                            >",
          "<Typography\n                            variant=\"caption\"\n                            color=\"text.secondary\"\n                            sx={{ display: 'block', mb: 0.25 }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Typography>",
          "<Typography variant=\"h6\" className=\"text-gray-600\">",
          "<Typography\n                                        variant=\"h6\"\n                                        component=\"h3\"\n                                        className=\"font-semibold text-lg leading-tight mb-1 overflow-hidden text-ellipsis line-clamp-2\"\n                                    >"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Typography\n                                    variant=\"body2\"\n                                    color=\"text.secondary\"\n                                    gutterBottom\n                                >"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationInputs.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography variant=\"h6\">",
          "<Typography variant=\"h6\">"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Typography>",
          "<Typography variant=\"h5\" component=\"h1\">",
          "<Typography\n                                variant=\"body2\"\n                                className=\"text-gray-600\"\n                            >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Typography variant=\"h5\" component=\"h1\">",
          "<Typography\n                                variant=\"body2\"\n                                className=\"text-gray-600\"\n                            >",
          "<Typography\n                                variant=\"body2\"\n                                className=\"text-gray-600\"\n                            >"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\">",
          "<Typography variant=\"subtitle2\" gutterBottom>"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" className=\"text-gray-600\">",
          "<Typography variant=\"body1\">"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<Typography\n                    variant=\"caption\"\n                    sx={{\n                        position: 'absolute',\n                        right: 8,\n                        bottom: -20,\n                        color:\n                            inputValue.length >",
          "<Typography\n                    variant=\"caption\"\n                    color=\"error\"\n                    sx={{\n                        position: 'absolute',\n                        left: 0,\n                        bottom: -20,\n                        fontSize: '0.75rem',\n                    }}\n                >"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Typography\n                            variant={isMobile ? 'subtitle1' : 'h6'}\n                            component=\"h2\"\n                            fontWeight=\"medium\"\n                            sx={{\n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                whiteSpace: 'nowrap',\n                                mb: 0.5,\n                                lineHeight: 1.2,\n                            }}\n                        >",
          "<Typography\n                                    variant=\"caption\"\n                                    className=\"text-gray-600 overflow-hidden text-ellipsis whitespace-nowrap\"\n                                >",
          "<Typography\n                            variant=\"body2\"\n                            className=\"mb-1 font-medium\"\n                        >"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"h6\">",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\">",
          "<Typography variant=\"body2\" color=\"text.secondary\">"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Typography variant=\"body2\">",
          "<Typography variant=\"h5\">",
          "<Typography variant=\"subtitle2\" gutterBottom>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Typography variant=\"h4\">",
          "<Typography variant=\"h6\" gutterBottom>",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<Typography variant=\"h6\">",
          "<Typography variant=\"body1\" gutterBottom>",
          "<Typography variant=\"body2\">"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Typography variant=\"h5\" gutterBottom>",
          "<Typography variant=\"h4\" component=\"h1\">",
          "<Typography\n                                variant=\"h3\"\n                                color={\n                                    securityScore >"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Typography\n                        variant=\"h6\"\n                        className=\"font-semibold flex items-center gap-2\"\n                    >",
          "<Typography className=\"text-red-600 py-4\" variant=\"body2\">",
          "<Typography\n                            variant=\"body2\"\n                            className=\"text-gray-600 mt-2 mb-4\"\n                        >"
        ]
      },
      {
        "file": "src/components/dashboard/UpcomingMeetings.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"font-medium text-gray-900 mb-1\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentProducts.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"font-medium text-gray-900\">",
          "<Typography variant=\"body2\" className=\"text-xs text-gray-500\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentInteractions.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"font-medium text-gray-900 mb-1\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentContacts.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"font-medium text-gray-900\">",
          "<Typography variant=\"body2\" className=\"text-xs text-gray-500\">"
        ]
      },
      {
        "file": "src/components/dashboard/HighPriorityTasks.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"font-medium text-gray-900 mb-1\">"
        ]
      },
      {
        "file": "src/components/dashboard/APriorityOrganizations.tsx",
        "context": [
          "<Typography variant=\"h3\" className=\"text-lg font-semibold text-gray-900\">",
          "<Typography variant=\"body1\" className=\"font-semibold text-gray-900\">",
          "<Typography variant=\"body2\" className=\"text-gray-500\">"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"ml-2\">",
          "<Typography variant=\"body2\">",
          "<Typography variant=\"subtitle2\" gutterBottom>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"mb-2\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">",
          "<Typography\n                        variant=\"subtitle1\"\n                        className=\"mb-2 flex items-center gap-2\"\n                    >"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"mb-2\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">",
          "<Typography\n                        variant=\"subtitle1\"\n                        className=\"mb-2 flex items-center gap-2\"\n                    >"
        ]
      },
      {
        "file": "src/organizations/form/steps/BasicInfoStep.tsx",
        "context": [
          "<Typography variant=\"h6\" className=\"mb-2\">",
          "<Typography variant=\"body2\" className=\"text-gray-600\">",
          "<Typography className=\"text-red-600 text-sm mt-1\">"
        ]
      }
    ],
    "Box": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<Box className=\"flex items-center justify-between mb-2\">",
          "<Box className=\"mb-2\">",
          "<Box className=\"flex items-center mb-2\">"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<Box className=\"flex justify-between items-start mb-1\">",
          "<Box className=\"flex items-center mb-1 text-gray-500\">",
          "<Box className=\"flex items-center mb-1\">"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Box className=\"w-full mb-2\">",
          "<Box className=\"flex items-center mb-1\">",
          "<Box>"
        ]
      },
      {
        "file": "src/users/UserEmpty.tsx",
        "context": [
          "<Box className=\"text-center mx-auto p-4 max-w-md\">",
          "<Box className=\"mb-6\">"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Box className=\"flex items-center gap-4 mb-6\">",
          "<Box className=\"mb-6\">",
          "<Box className=\"flex gap-4 items-center mb-4\">"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Box>",
          "<Box className=\"flex justify-between items-center mb-4\">",
          "<Box className=\"text-center py-8\">"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<Box className=\"mt-2 mb-2\">"
        ]
      },
      {
        "file": "src/settings/SettingsShow.tsx",
        "context": [
          "<Box className=\"flex items-center gap-1\">",
          "<Box\n                className=\"w-6 h-6 rounded-full border-2 border-gray-300\"\n                style={{ backgroundColor: record.color }}\n            />"
        ]
      },
      {
        "file": "src/settings/SettingsList.tsx",
        "context": [
          "<Box className=\"flex items-center gap-1\">",
          "<Box\n                className=\"w-4 h-4 rounded-full border border-gray-300\"\n                style={{ backgroundColor: record.color }}\n            />"
        ]
      },
      {
        "file": "src/settings/SettingsCreate.tsx",
        "context": [
          "<Box className=\"mb-3\">",
          "<Box className=\"pt-1\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Box>",
          "<Box\n                                className=\"flex\"\n                                className=\"flex gap-1\"\n                                className={`flex gap-1 ${isMobile ? 'flex-col' : 'flex-row'}`}\n                            >",
          "<Box className=\"mt-2\">"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Box className=\"flex items-center justify-between mb-1\">",
          "<Box className=\"flex items-center gap-1\">",
          "<Box\n                            className=\"flex items-center\"\n                            style={{ color: category.color }}\n                        >"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Box className=\"flex items-center gap-1\">",
          "<Box\n                className=\"w-6 h-6 rounded-full border-2 border-gray-300 shadow-sm\"\n                style={{ backgroundColor: record.color }}\n            />",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Box>",
          "<Box className=\"flex justify-between items-center mb-3\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Box className={compactView ? \"p-1\" : \"p-3\"}>",
          "<Box className=\"flex justify-between items-center mb-3\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Box className=\"p-3\">",
          "<Box className=\"flex justify-between items-center mb-3\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Box className={`${compactView ? 'p-1' : 'p-8'}`}>",
          "<Box className=\"flex justify-between items-center mb-8\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Box key={key} sx={{ mb: 0.5 }}>",
          "<Box>",
          "<Box>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Box>",
          "<Box>",
          "<Box className=\"flex justify-center mb-2\">"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Box className={`${compactView ? 'p-1' : 'p-3'}`}>",
          "<Box className=\"flex justify-between items-center mb-3\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Box className=\"flex gap-2 mb-2 flex-wrap\">",
          "<Box>",
          "<Box className=\"flex gap-2 flex-wrap\">"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<Box className=\"flex justify-between items-start mb-1\">",
          "<Box className=\"flex-1\">",
          "<Box className=\"flex gap-1 items-center\">"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Box className=\"grid gap-4 mb-6\" style={{ gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>",
          "<Box className=\"mr-4\">",
          "<Box>"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<Box className=\"w-full mb-4\">",
          "<Box className=\"flex items-center mb-2\">",
          "<Box className=\"flex flex-wrap gap-2\">"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Box className=\"flex justify-between mb-2\">",
          "<Box className=\"flex-grow min-w-0\">",
          "<Box className=\"ml-2\">"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Box className=\"flex justify-end gap-2 p-4 border-t\">",
          "<Box className=\"flex justify-between items-center\">",
          "<Box className=\"flex justify-between items-center p-4 border-t\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Box maxWidth=\"lg\" sx={{ mx: 'auto', p: 2 }}>",
          "<Box>",
          "<Box mt={3}>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityListFilter.tsx",
        "context": [
          "<Box className=\"w-64 min-w-64 order-last mr-2 mt-5\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityListContent.tsx",
        "context": [
          "<Box\n                display=\"flex\"\n                sx={{\n                    overflowX: 'auto',\n                    overflowY: 'hidden',\n                    minHeight: '70vh',\n                    gap: 2,\n                    p: 2,\n                }}\n            >"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEmpty.tsx",
        "context": [
          "<Box className=\"text-center m-1\">",
          "<Box className=\"mb-2\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEdit.tsx",
        "context": [
          "<Box maxWidth=\"lg\" sx={{ mx: 'auto', p: 2 }}>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCreate.tsx",
        "context": [
          "<Box maxWidth=\"lg\" sx={{ mx: 'auto', p: 2 }}>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityColumn.tsx",
        "context": [
          "<Box\n                sx={{\n                    p: 2,\n                    borderBottom: '1px solid',\n                    borderColor: 'divider',\n                    backgroundColor: 'background.paper',\n                }}\n            >",
          "<Box\n                    sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                        mb: 1,\n                    }}\n                >",
          "<Box\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        sx={{\n                            minHeight: 400,\n                            maxHeight: 600,\n                            overflowY: 'auto',\n                            p: 1,\n                            backgroundColor: snapshot.isDraggingOver\n                                ? 'action.hover'\n                                : 'transparent',\n                            transition: 'background-color 0.2s ease',\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Box\n            className={`mb-2 cursor-pointer transition-all ${\n                snapshot?.isDragging ? 'rotate-1 opacity-90' : 'rotate-0 opacity-100'\n            }`}\n            {...provided?.draggableProps}\n            {...provided?.dragHandleProps}\n            ref={provided?.innerRef}\n        >",
          "<Box className=\"flex justify-between items-start mb-4\">",
          "<Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/notes/NotesIterator.tsx",
        "context": [
          "<Box className=\"mt-2\">"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<Box\n            onMouseEnter={() =>",
          "<Box\n                        component=\"span\"\n                        className={`ml-2 ${isHover ? 'visible' : 'invisible'}`}\n                    >",
          "<Box className=\"flex-1\">"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Box component={'img'} {...commonProps} />"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Box sx={{ p: 3 }}>",
          "<Box>",
          "<Box sx={{ borderBottom: 1, borderColor: 'divider' }}>"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Box sx={{ textAlign: 'center', mb: 2 }}>",
          "<Box sx={{ textAlign: 'center', mb: 2 }}>",
          "<Box\n                        component=\"form\"\n                        onSubmit={handleSubmit(onSubmit)}\n                        sx={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            gap: 2,\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Box sx={{ textAlign: 'center', mb: 2 }}>",
          "<Box sx={{ textAlign: 'center', mb: 2 }}>",
          "<Box\n                        component=\"form\"\n                        onSubmit={handleSubmit(onSubmit)}\n                        sx={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            gap: 2,\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/interactions/InteractionTypeSelector.tsx",
        "context": [
          "<Box>"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Box className=\"p-3 text-center\">",
          "<Box key={interaction.id} className=\"flex gap-2\">",
          "<Box className=\"flex flex-col items-center\">"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Box className=\"flex-grow\">",
          "<Box className=\"flex items-center gap-1\">",
          "<Box>"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": [
          "<Box className=\"px-2 py-1\">",
          "<Box className=\"w-64 p-2\">"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Box className=\"flex justify-between items-center\">",
          "<Box className=\"flex gap-1\">",
          "<Box>"
        ]
      },
      {
        "file": "src/interactions/InteractionEmpty.tsx",
        "context": [
          "<Box className=\"flex flex-col items-center justify-center min-h-96 p-4 text-center\">",
          "<Box className=\"mt-4 p-2 bg-gray-50 rounded-lg\">"
        ]
      },
      {
        "file": "src/interactions/InteractionEdit.tsx",
        "context": [
          "<Box className=\"w-full max-w-xl\">"
        ]
      },
      {
        "file": "src/interactions/InteractionCreate.tsx",
        "context": [
          "<Box className=\"w-full max-w-xl\">"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Box className=\"flex justify-between items-start mb-2\">",
          "<Box className=\"flex items-center flex-grow\">",
          "<Box className=\"flex-grow\">"
        ]
      },
      {
        "file": "src/deals/DealListContent.tsx",
        "context": [
          "<Box display=\"flex\">"
        ]
      },
      {
        "file": "src/deals/DealColumn.tsx",
        "context": [
          "<Box\n            sx={{\n                flex: 1,\n                paddingTop: '8px',\n                paddingBottom: '16px',\n                bgcolor: '#eaeaee',\n                '&:first-of-type': {\n                    paddingLeft: '5px',\n                    borderTopLeftRadius: 5,\n                },\n                '&:last-of-type': {\n                    paddingRight: '5px',\n                    borderTopRightRadius: 5,\n                },\n            }}\n        >",
          "<Box\n                        ref={droppableProvided.innerRef}\n                        {...droppableProvided.droppableProps}\n                        className={\n                            snapshot.isDraggingOver ? ' isDraggingOver' : ''\n                        }\n                        sx={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            borderRadius: 1,\n                            padding: '5px',\n                            '&.isDraggingOver': {\n                                bgcolor: '#dadadf',\n                            },\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<Box>",
          "<Box className=\"mb-4\">",
          "<Box className=\"flex justify-between items-center mb-2\">"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Box className=\"flex justify-between items-start mb-2\">",
          "<Box\n                        className=\"rounded-lg p-3 flex items-center justify-center\"\n                        style={{\n                            backgroundColor: getColorValue(color, 'light'),\n                            color: getColorValue(color, 'contrastText'),\n                        }}\n                    >",
          "<Box className=\"mt-3\">"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Box className=\"flex justify-between items-center mb-2\">",
          "<Box className=\"text-center py-3\">",
          "<Box className=\"flex justify-between items-center mb-2\">"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    mb={2}\n                >",
          "<Box textAlign=\"center\" py={3}>",
          "<Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/dashboard/LatestNotes.tsx",
        "context": [
          "<Box className=\"flex items-center mb-4\">",
          "<Box className=\"ml-4 mr-4 flex\">",
          "<Box\n                            id={`${note.type}_${note.id}`}\n                            key={`${note.type}_${note.id}`}\n                            className=\"mb-4\"\n                        >"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<Box className=\"text-center\">",
          "<Box className=\"text-center\">",
          "<Box className=\"text-center\">"
        ]
      },
      {
        "file": "src/dashboard/FoodServiceDashboard.tsx",
        "context": [
          "<Box>",
          "<Box>",
          "<Box className=\"pb-20\">"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Box className=\"mb-4\">",
          "<Box\n                                key={visit.id}\n                                className=\"mb-2 pl-4 border-l-4 border-blue-600\"\n                            >",
          "<Box>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    mb={2}\n                >",
          "<Box textAlign=\"center\" py={3}>",
          "<Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/dashboard/DealsPipeline.tsx",
        "context": [
          "<Box className=\"flex items-center mb-4\">",
          "<Box className=\"mx-4 flex\">"
        ]
      },
      {
        "file": "src/contacts/TagsListEdit.tsx",
        "context": [
          "<Box mt={1} mb={1} key={tag.id}>",
          "<Box mt={1}>"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Box className=\"p-4\">",
          "<Box className=\"flex items-center mb-6\">",
          "<Box className=\"flex-grow\">"
        ]
      },
      {
        "file": "src/contacts/ContactListFilter.tsx",
        "context": [
          "<Box\n            style={{\n                width: '14rem',\n                minWidth: '14rem',\n                order: -1,\n                marginRight: '0.5rem',\n                marginTop: '1.25rem',\n            }}\n        >"
        ]
      },
      {
        "file": "src/contacts/ContactList.tsx",
        "context": [
          "<Box display=\"flex\" alignItems=\"center\" gap={2} mb={1}>"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<Box className=\"flex h-full items-center p-0\">"
        ]
      },
      {
        "file": "src/contacts/ContactCreate.tsx",
        "context": [
          "<Box className=\"mb-6 p-4 bg-blue-50 rounded-lg\">",
          "<Box\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                className=\"mb-2\"\n                            >"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Box className=\"absolute top-2 right-2 z-10\">",
          "<Box className=\"flex items-center mb-4\">",
          "<Box className=\"flex-grow min-w-0\">"
        ]
      },
      {
        "file": "src/companies/GridList.tsx",
        "context": [
          "<Box className=\"flex flex-wrap gap-1\" style={{ width: 1008 }}>",
          "<Box\n            className=\"w-full gap-1 grid\"\n            style={{\n                gridTemplateColumns: 'repeat(auto-fill, minmax(180px, 1fr))',\n            }}\n        >"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<Box className=\"mt-2 flex\">",
          "<Box className=\"flex-1\">",
          "<Box className=\"flex mb-1\">"
        ]
      },
      {
        "file": "src/companies/CompanyListFilter.tsx",
        "context": [
          "<Box className=\"w-52 min-w-52 -order-1 mr-2 mt-5\">"
        ]
      },
      {
        "file": "src/companies/CompanyList.tsx",
        "context": [
          "<Box className=\"flex flex-row\">",
          "<Box className=\"w-full\">"
        ]
      },
      {
        "file": "src/companies/CompanyInputs.tsx",
        "context": [
          "<Box className=\"flex flex-col gap-4 p-1\">",
          "<Box className={`flex gap-4 ${isMobile ? 'flex-col' : 'flex-row'}`}>",
          "<Box className=\"flex flex-col gap-4 flex-1\">"
        ]
      },
      {
        "file": "src/companies/CompanyEmpty.tsx",
        "context": [
          "<Box\n            className=\"flex flex-col justify-center items-center gap-6\"\n            style={{ height: `calc(100dvh - ${appbarHeight}px)` }}\n        >",
          "<Box className=\"flex flex-col gap-0 items-center\">",
          "<Box className=\"flex gap-2\">"
        ]
      },
      {
        "file": "src/companies/CompanyCard.tsx",
        "context": [
          "<Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">",
          "<Box textAlign=\"center\" marginTop={1}>",
          "<Box display=\"flex\" width=\"100%\">"
        ]
      },
      {
        "file": "src/common/LoadingComponent.tsx",
        "context": [
          "<Box className={containerClass} style={containerStyle}>",
          "<Box className=\"p-4 w-full\">",
          "<Box className={containerClass} style={containerStyle}>"
        ]
      },
      {
        "file": "src/common/LazyLoadingUtils.tsx",
        "context": [
          "<Box\n        sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '300px',\n            padding: 3,\n            textAlign: 'center',\n        }}\n    >"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<Box>",
          "<Box className=\"p-2\">",
          "<Box className=\"flex items-center mb-6\">"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<Box\n                            sx={{\n                                height: itemHeight,\n                                display: 'flex',\n                                alignItems: 'center',\n                                px: 2,\n                                borderBottom: '1px solid',\n                                borderColor: 'divider',\n                            }}\n                        >",
          "<Box\n                        sx={{\n                            height: itemHeight,\n                            display: 'flex',\n                            alignItems: 'center',\n                            px: 2,\n                            borderBottom: '1px solid',\n                            borderColor: 'divider',\n                            '&:hover': {\n                                backgroundColor: 'action.hover',\n                            },\n                            cursor: 'pointer',\n                        }}\n                    >",
          "<Box\n                            sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                gap: 2,\n                                minWidth: 200,\n                                flex: isMobile ? 1 : 'none',\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<Box sx={{ p: 3, textAlign: 'center' }}>",
          "<Box sx={{ p: 3, textAlign: 'center' }}>",
          "<Box\n                                    sx={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        gap: 2,\n                                    }}\n                                >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Box className=\"p-4 mb-4 bg-white rounded shadow\">",
          "<Box className=\"relative h-screen overflow-hidden\">",
          "<Box className=\"flex justify-center items-center h-screen\">"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationListFilter.tsx",
        "context": [
          "<Box className=\"mt-4\">",
          "<Box className=\"mt-4 pt-4 border-t border-gray-200\">",
          "<Box className=\"flex flex-wrap gap-2\">"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Box\n                    sx={{\n                        display: 'flex',\n                        alignItems: 'flex-start',\n                        gap: 1,\n                        mb: 1,\n                    }}\n                >",
          "<Box sx={{ flexGrow: 1, minWidth: 0 }}>",
          "<Box sx={{ mb: 1 }}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Box className=\"p-6 text-center\">",
          "<Box className=\"p-6 text-center\">",
          "<Box className=\"flex items-start gap-4 mb-4\">"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": [
          "<Box display=\"flex\" alignItems=\"center\" gap={2} mb={1}>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Box\n                    sx={{\n                        display: 'flex',\n                        gap: 2,\n                        alignItems: 'center',\n                        mb: expanded ? 2 : 0,\n                    }}\n                >",
          "<Box\n                                                sx={{\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    gap: 1,\n                                                }}\n                                            >",
          "<Box\n                                                sx={{\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    gap: 1,\n                                                }}\n                                            >"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationInputs.tsx",
        "context": [
          "<Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    mb: 1,\n                }}\n            >",
          "<Box\n                    sx={{\n                        mt: 1,\n                        p: 1,\n                        bgcolor: 'success.light',\n                        borderRadius: 1,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Box className=\"p-6 text-center\">",
          "<Box className=\"flex items-center justify-between mb-6\">",
          "<Box>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Box className=\"flex items-center justify-between mb-6\">",
          "<Box className=\"mb-6\">",
          "<Box className=\"flex justify-between mb-2\">"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Box className=\"p-6\">",
          "<Box className=\"mb-6 text-center\">",
          "<Box className=\"flex gap-4 items-start\">"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Box className=\"text-center mb-6\">",
          "<Box className=\"relative inline-block mb-4\">",
          "<Box className=\"mb-4\">"
        ]
      },
      {
        "file": "src/organizations/common/ViewModeRenderer.tsx",
        "context": [
          "<Box\n            sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                minHeight: '200px',\n                width: '100%',\n            }}\n        >",
          "<Box\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    minHeight: '200px',\n                    flexDirection: 'column',\n                    gap: 2,\n                    color: 'error.main',\n                }}\n            >",
          "<Box>"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<Box sx={{ position: 'relative', width: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Box className=\"flex items-center gap-4 mb-4\">",
          "<Box className=\"flex-1\">",
          "<Box className=\"flex gap-2 flex-wrap\">"
        ]
      },
      {
        "file": "src/organizations/common/MobileFAB.tsx",
        "context": []
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Box className=\"flex items-center gap-2 mb-2\">",
          "<Box>",
          "<Box className=\"flex gap-0.5 flex-wrap mt-0.5\">"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>",
          "<Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>",
          "<Box>"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Box className=\"p-6\">",
          "<Box className=\"flex items-center gap-4 p-4\">",
          "<Box className=\"w-full\">"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Box sx={{ width: '100%', maxWidth: 1200, mx: 'auto', p: 2 }}>",
          "<Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>",
          "<Box sx={{ textAlign: 'center' }}>"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>",
          "<Box sx={{ mt: 2 }}>",
          "<Box\n                    sx={{\n                        mt: 2,\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: 1,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Box sx={{ p: 2 }}>",
          "<Box sx={{ p: isMobile ? 1 : 2 }}>",
          "<Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>"
        ]
      },
      {
        "file": "src/components/navigation/RelationshipBreadcrumbs.tsx",
        "context": [
          "<Box className=\"mb-4 p-4 bg-gray-50 rounded border border-gray-200\">"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Box className=\"flex justify-between items-center mb-4\">",
          "<Box className=\"flex justify-center py-6\">",
          "<Box className=\"mt-4 text-center\">"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<Box>",
          "<Box className=\"flex items-center mb-4\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<Box>",
          "<Box sx={{ mt: 1 }}>",
          "<Box\n                            component=\"h4\"\n                            sx={{\n                                m: 0,\n                                mb: 1,\n                                fontSize: '0.875rem',\n                                fontWeight: 600,\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Box className=\"p-4 md:p-6\">",
          "<Box className=\"mb-6 text-center\">",
          "<Box className=\"flex items-center justify-between mb-4\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Box className=\"p-4 md:p-6\">",
          "<Box className=\"mb-6 text-center\">",
          "<Box className=\"flex items-center gap-4\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BasicInfoStep.tsx",
        "context": [
          "<Box className=\"p-4 md:p-6\">",
          "<Box className=\"mb-6 text-center\">",
          "<Box className=\"\">"
        ]
      }
    ],
    "Chip": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<Chip\n                        icon={<LocationIcon className=\"w-4 h-4\" />",
          "<Chip\n                        label={visit.visit_type.replace('_', ' ')}\n                        color={getVisitTypeColor(visit.visit_type) as any}\n                        size=\"small\"\n                    />"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<Chip label={'Visit'} color={'primary'} size=\"small\" />",
          "<Chip label={'Visit'} size=\"small\" variant=\"outlined\" />"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Chip\n                                        icon={<LocationIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Chip\n                                                key={principal}\n                                                label={principal}\n                                                onDelete={() =>"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Chip\n                                                        label={activity.type}\n                                                        size=\"small\"\n                                                        className={`border ${\n                                                            getActivityColor(\n                                                                activity.type\n                                                            ) === 'success'\n                                                                ? 'border-green-500 text-green-500'\n                                                                : getActivityColor(\n                                                                        activity.type\n                                                                    ) ===\n                                                                    'error'\n                                                                  ? 'border-red-500 text-red-500'\n                                                                  : getActivityColor(\n                                                                          activity.type\n                                                                      ) ===\n                                                                      'warning'\n                                                                    ? 'border-yellow-500 text-yellow-500'\n                                                                    : getActivityColor(\n                                                                            activity.type\n                                                                        ) ===\n                                                                        'info'\n                                                                      ? 'border-blue-500 text-blue-500'\n                                                                      : 'border-gray-500 text-gray-500'\n                                                        }`}\n                                                    />",
          "<Chip\n                                        label={selectedActivity.type.toUpperCase()}\n                                        size=\"small\"\n                                        className={`${\n                                            getActivityColor(\n                                                selectedActivity.type\n                                            ) === 'success'\n                                                ? 'bg-green-500 text-white'\n                                                : getActivityColor(\n                                                        selectedActivity.type\n                                                    ) === 'error'\n                                                  ? 'bg-red-500 text-white'\n                                                  : getActivityColor(\n                                                          selectedActivity.type\n                                                      ) === 'warning'\n                                                    ? 'bg-yellow-500 text-white'\n                                                    : getActivityColor(\n                                                            selectedActivity.type\n                                                        ) === 'info'\n                                                      ? 'bg-blue-500 text-white'\n                                                      : 'bg-gray-500 text-white'\n                                        }`}\n                                    />"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<Chip\n                        icon={<ControlPointIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/settings/SettingsShow.tsx",
        "context": [
          "<Chip\n            label={record.category}\n            style={{\n                backgroundColor: categoryColors[record.category] || '#9E9E9E',\n            }}\n            className=\"text-white capitalize font-bold\"\n        />"
        ]
      },
      {
        "file": "src/settings/SettingsList.tsx",
        "context": [
          "<Chip\n            label={record.category}\n            size=\"small\"\n            style={{\n                backgroundColor: categoryColors[record.category] || '#9E9E9E',\n            }}\n            className=\"text-white capitalize\"\n        />",
          "<Chip\n            label={record?.active ? 'Active' : 'Inactive'}\n            size=\"small\"\n            className={\n                record?.active\n                    ? 'bg-green-500 text-white'\n                    : 'bg-gray-200 text-gray-700'\n            }\n        />"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Chip\n                                        label={`${allSettings.length} settings available`}\n                                        size=\"small\"\n                                        className=\"border-blue-500 text-blue-500\"\n                                        variant=\"outlined\"\n                                    />",
          "<Chip\n                                    icon={<CheckIcon className=\"w-4 h-4\" />",
          "<Chip\n                                        icon={<WarningIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Chip\n                            label={`${stats.active} Active`}\n                            size=\"small\"\n                            className=\"border-green-500 text-green-500\"\n                            variant=\"outlined\"\n                        />",
          "<Chip\n                                label={`${stats.inactive} Inactive`}\n                                size=\"small\"\n                                className=\"border-gray-500 text-gray-500\"\n                                variant=\"outlined\"\n                            />",
          "<Chip\n                        icon={<SettingsIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Chip\n                            label={record.active ? 'Active' : 'Inactive'}\n                            className={record.active ? 'border-green-500 text-green-500' : 'border-gray-500 text-gray-500'}\n                            size=\"small\"\n                            icon={\n                                record.active ? (\n                                    <Visibility className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Chip\n                                                                label=\"Current\"\n                                                                className=\"bg-blue-500 text-white\"\n                                                                size=\"small\"\n                                                            />",
          "<Chip\n                                                                        label=\"Current Session\"\n                                                                        className=\"bg-blue-500 text-white\"\n                                                                        size=\"small\"\n                                                                    />",
          "<Chip\n                                                            icon={status.icon}\n                                                            label={status.label}\n                                                            color={status.color}\n                                                            size=\"small\"\n                                                        />"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Chip\n                                        label={`${categoryScore}%`}\n                                        className={\n                                            categoryScore >",
          "<Chip\n                                                            label={test.severity.toUpperCase()}\n                                                            color={\n                                                                getSeverityColor(\n                                                                    test.severity\n                                                                )\n                                                            }\n                                                            size=\"small\"\n                                                        />",
          "<Chip\n                                                                label={`${result.score}%`}\n                                                                className={\n                                                                    result.passed\n                                                                        ? 'border-green-500 text-green-500'\n                                                                        : 'border-red-500 text-red-500'\n                                                                }\n                                                                size=\"small\"\n                                                                variant=\"outlined\"\n                                                            />"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Chip\n                                            label={categorySettings.length}\n                                            size=\"small\"\n                                            className={\n                                                getCategoryColor(category) === 'primary' \n                                                    ? 'bg-blue-500 text-white'\n                                                    : getCategoryColor(category) === 'secondary'\n                                                    ? 'bg-gray-500 text-white' \n                                                    : getCategoryColor(category) === 'error'\n                                                    ? 'bg-red-500 text-white'\n                                                    : getCategoryColor(category) === 'warning'\n                                                    ? 'bg-yellow-500 text-white'\n                                                    : 'bg-gray-400 text-white'\n                                            }\n                                        />",
          "<Chip\n                                                                            label={\n                                                                                setting.unit\n                                                                            }\n                                                                            size=\"small\"\n                                                                            variant=\"outlined\"\n                                                                        />"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Chip\n                                                        label={alert.type.toUpperCase()}\n                                                        size=\"small\"\n                                                        className={`\n                                                            ${alert.type === 'critical' ? 'bg-red-500 text-white' : ''}\n                                                            ${alert.type === 'high' ? 'bg-red-500 text-white' : ''}\n                                                            ${alert.type === 'medium' ? 'bg-yellow-500 text-white' : ''}\n                                                            ${alert.type === 'low' ? 'bg-blue-500 text-white' : ''}\n                                                        `}\n                                                    />",
          "<Chip\n                                                            label=\"RESOLVED\"\n                                                            size=\"small\"\n                                                            className=\"border-green-500 text-green-500\"\n                                                        />"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Chip\n                                                label={event.eventCategory}\n                                                size=\"small\"\n                                                variant=\"outlined\"\n                                            />",
          "<Chip\n                                        label={event.riskScore}\n                                        color={getRiskScoreColor(\n                                            event.riskScore\n                                        )}\n                                        size=\"small\"\n                                    />",
          "<Chip\n                                                    key={field}\n                                                    label={field}\n                                                    size=\"small\"\n                                                    variant=\"outlined\"\n                                                />"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Chip\n                                                        label=\"Default\"\n                                                        className=\"bg-blue-500 text-white\"\n                                                        size=\"small\"\n                                                    />"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Chip\n                                            icon={getStatusIcon(\n                                                framework.status\n                                            )}\n                                            label={framework.status\n                                                .replace('_', ' ')\n                                                .toUpperCase()}\n                                            color={\n                                                getStatusColor(\n                                                    framework.status\n                                                ) as any\n                                            }\n                                            size=\"small\"\n                                        />",
          "<Chip\n                                                                    icon={getStatusIcon(\n                                                                        req.status\n                                                                    )}\n                                                                    label={req.status.replace(\n                                                                        '_',\n                                                                        ' '\n                                                                    )}\n                                                                    color={\n                                                                        getStatusColor(\n                                                                            req.status\n                                                                        ) as any\n                                                                    }\n                                                                    size=\"small\"\n                                                                />",
          "<Chip\n                                                                    label={\n                                                                        req.priority\n                                                                    }\n                                                                    color={\n                                                                        req.priority ===\n                                                                            'high'\n                                                                            ? 'error'\n                                                                            : req.priority ===\n                                                                                'medium'\n                                                                                ? 'warning'\n                                                                                : 'info'\n                                                                    }\n                                                                    size=\"small\"\n                                                                    variant=\"outlined\"\n                                                                />"
        ]
      },
      {
        "file": "src/sales/SalesList.tsx",
        "context": [
          "<Chip\n                    label=\"Admin\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    color=\"primary\"\n                />",
          "<Chip\n                    label=\"Disabled\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    color=\"warning\"\n                />"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Chip\n                        label={getStatusText()}\n                        className={\n                            getStatusColor() === 'success'\n                                ? 'border-green-500 text-green-500'\n                                : getStatusColor() === 'error'\n                                  ? 'border-red-500 text-red-500'\n                                  : getStatusColor() === 'warning'\n                                    ? 'border-yellow-500 text-yellow-500'\n                                    : 'border-blue-500 text-blue-500'\n                        }\n                        icon={getStatusIcon()}\n                        size=\"small\"\n                    />",
          "<Chip\n                        label={`${reminder.priority} Priority`}\n                        className={\n                            getPriorityColor(reminder.priority) === 'error'\n                                ? 'border-red-500 text-red-500'\n                                : getPriorityColor(reminder.priority) === 'warning'\n                                  ? 'border-yellow-500 text-yellow-500'\n                                  : 'border-blue-500 text-blue-500'\n                        }\n                        icon={<ExclamationTriangleIcon className=\"h-4 w-4\" />",
          "<Chip\n                            label={`Snoozed ${reminder.snooze_count} time${reminder.snooze_count >"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<Chip\n                            label={record.priority}\n                            className={\n                                getPriorityColor(record.priority) === 'error'\n                                    ? 'border-red-500 text-red-500'\n                                    : getPriorityColor(record.priority) === 'warning'\n                                      ? 'border-yellow-500 text-yellow-500'\n                                      : 'border-blue-500 text-blue-500'\n                            }\n                            size=\"small\"\n                            icon={<ExclamationTriangleIcon className=\"h-4 w-4\" />",
          "<Chip\n                    label={record.priority}\n                    className={\n                        record.priority === 'urgent' ||\n                            record.priority === 'high'\n                            ? 'border-red-500 text-red-500'\n                            : record.priority === 'medium'\n                                ? 'border-yellow-500 text-yellow-500'\n                                : 'border-blue-500 text-blue-500'\n                    }\n                    size=\"small\"\n                    icon={<ExclamationTriangleIcon className=\"h-4 w-4\" />",
          "<Chip\n                            label=\"Completed\"\n                            className=\"border-green-500 text-green-500\"\n                            size=\"small\"\n                            icon={<CheckCircleIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Chip\n                                            label={\n                                                isOverdue(\n                                                    reminder.reminder_date\n                                                )\n                                                    ? 'Overdue'\n                                                    : 'Due Today'\n                                            }\n                                            className={\n                                                isOverdue(\n                                                    reminder.reminder_date\n                                                )\n                                                    ? 'border-red-500 text-red-500'\n                                                    : 'border-yellow-500 text-yellow-500'\n                                            }\n                                            size=\"small\"\n                                            icon={\n                                                isOverdue(\n                                                    reminder.reminder_date\n                                                )\n                                                    ? <OverdueIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<Chip\n                                        key={index}\n                                        label={template}\n                                        onClick={() =>"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Chip\n            label={record.category}\n            size=\"small\"\n            style={{\n                backgroundColor: categoryColors[record.category] || '#9e9e9e',\n            }}\n            className=\"text-white font-medium\"\n        />",
          "<Chip\n                        label={record.active ? 'Active' : 'Inactive'}\n                        size=\"small\"\n                        className={\n                            record.active\n                                ? 'bg-green-500 text-white'\n                                : 'bg-gray-200 text-gray-700'\n                        }\n                    />"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Chip\n                                            label={product.category || 'N/A'}\n                                            size=\"small\"\n                                            className=\"text-white font-medium\"\n                                            style={{\n                                                backgroundColor:\n                                                    getCategoryColor(\n                                                        product.category || ''\n                                                    ),\n                                            }}\n                                        />",
          "<Chip\n                                            label={\n                                                product.active\n                                                    ? 'Active'\n                                                    : 'Inactive'\n                                            }\n                                            size=\"small\"\n                                            className={\n                                                product.active\n                                                    ? 'bg-green-500 text-white'\n                                                    : 'border border-gray-400 text-gray-600'\n                                            }\n                                        />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Chip\n                                    label={record.stage}\n                                    color=\"primary\"\n                                    variant=\"outlined\"\n                                />",
          "<Chip\n                                    icon={\n                                        <CurrencyDollarIcon className=\"h-4 w-4\" />",
          "<Chip\n                                    icon={<CalendarIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityListFilter.tsx",
        "context": [
          "<Chip\n                                label={stage.name}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor: stage.color,\n                                }}\n                                className=\"text-white border-0 cursor-pointer font-medium\"\n                            />",
          "<Chip\n                                label={status.name}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor: status.color,\n                                }}\n                                className=\"text-white border-0 cursor-pointer font-medium\"\n                            />",
          "<Chip\n                                label={range.name}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor: range.color,\n                                }}\n                                className=\"text-white border-0 cursor-pointer font-medium\"\n                            />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityColumn.tsx",
        "context": [
          "<Chip\n                        label={opportunityCount}\n                        size=\"small\"\n                        color=\"primary\"\n                        sx={{ minWidth: 24 }}\n                    />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Chip\n                                label={`${probability}%`}\n                                size=\"small\"\n                                className={`min-w-12 text-xs ${\n                                    probability >"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Chip\n                                        label={\n                                            interaction.isCompleted\n                                                ? 'Completed'\n                                                : 'Pending'\n                                        }\n                                        size=\"small\"\n                                        color={\n                                            interaction.isCompleted\n                                                ? 'success'\n                                                : 'warning'\n                                        }\n                                        variant=\"outlined\"\n                                    />",
          "<Chip\n                                        label={\n                                            interaction.type?.label || 'Unknown'\n                                        }\n                                        size=\"small\"\n                                        className=\"text-xs\"\n                                        style={{\n                                            backgroundColor: typeColor,\n                                            color: 'white',\n                                        }}\n                                    />",
          "<Chip\n                                            label=\"Follow-up Required\"\n                                            size=\"small\"\n                                            color=\"info\"\n                                            variant=\"outlined\"\n                                        />"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Chip\n                                label={record.type?.label || 'Unknown Type'}\n                                style={{ backgroundColor: typeColor, color: 'white' }}\n                            />",
          "<Chip\n                                icon={\n                                    record.isCompleted ? (\n                                        <CompletedIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": [
          "<Chip\n                        label={record?.label || 'Unknown'}\n                        size=\"small\"\n                        className=\"min-w-20 border border-gray-300 bg-transparent\"\n                    />"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Chip\n                        icon={\n                            offlineStatus.isOnline ? (\n                                <OnlineIcon className=\"h-4 w-4\" />",
          "<Chip\n                            label={`${offlineStatus.pendingActions} pending`}\n                            className=\"bg-blue-100 text-blue-800\"\n                            size=\"small\"\n                        />"
        ]
      },
      {
        "file": "src/interactions/InteractionCreate.tsx",
        "context": [
          "<Chip\n                    icon={<OfflineIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Chip\n                            label={\n                                interaction.isCompleted\n                                    ? 'Completed'\n                                    : 'Pending'\n                            }\n                            size=\"small\"\n                            color={\n                                interaction.isCompleted ? 'success' : 'warning'\n                            }\n                            variant=\"outlined\"\n                            className=\"text-xs min-w-20\"\n                        />"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<Chip\n                                        label={`${weekOverWeekChange >",
          "<Chip\n                                                        label={count}\n                                                        className={`${getVisitTypeColor(type) === 'primary' ? 'bg-blue-100 text-blue-800' :\n                                                                getVisitTypeColor(type) === 'secondary' ? 'bg-gray-100 text-gray-800' :\n                                                                    getVisitTypeColor(type) === 'success' ? 'bg-green-100 text-green-800' :\n                                                                        getVisitTypeColor(type) === 'warning' ? 'bg-yellow-100 text-yellow-800' :\n                                                                            'bg-gray-100 text-gray-800'\n                                                            }`}\n                                                        size=\"small\"\n                                                    />"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Chip\n                            size=\"small\"\n                            label={`${trend.isPositive ? '+' : ''}${trend.value.toFixed(1)}%`}\n                            color={trend.isPositive ? 'success' : 'error'}\n                            className=\"h-5 text-xs\"\n                        />",
          "<Chip\n                                        key={type}\n                                        size=\"small\"\n                                        icon={getIcon(type)}\n                                        label={`${type}: ${count}`}\n                                        className=\"border border-gray-300 bg-transparent mb-2\"\n                                    />"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Chip\n                        size=\"small\"\n                        icon={<RevenueIcon className=\"h-4 w-4\" />",
          "<Chip\n                        size=\"small\"\n                        icon={<MetricsIcon className=\"h-4 w-4\" />",
          "<Chip\n                            size=\"small\"\n                            icon={<ArrowTrendingUpIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Chip\n                        size=\"small\"\n                        icon={<ExclamationTriangleIcon className=\"w-4 h-4\" />",
          "<Chip\n                        size=\"small\"\n                        icon={<TrendingDownIcon className=\"w-4 h-4\" />",
          "<Chip\n                        size=\"small\"\n                        icon={<BuildingOfficeIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<Chip\n                                size=\"small\"\n                                icon={\n                                    metrics.weeklyTrend >",
          "<Chip\n                                size=\"small\"\n                                icon={\n                                    metrics.monthlyTrend >",
          "<Chip\n                                key={type}\n                                size=\"small\"\n                                icon={\n                                    interactionTypeIcons[type] || (\n                                        <InteractionIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Chip\n                        size=\"small\"\n                        icon={<ExclamationTriangleIcon className=\"w-4 h-4\" />",
          "<Chip\n                        size=\"small\"\n                        icon={<ClockIcon className=\"w-4 h-4\" />",
          "<Chip\n                        size=\"small\"\n                        icon={<DocumentTextIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/contacts/TagsListEdit.tsx",
        "context": [
          "<Chip\n                    icon={<PlusIcon className=\"h-4 w-4\" />",
          "<Chip\n                            size=\"small\"\n                            variant=\"outlined\"\n                            label={tag.name}\n                            style={{\n                                backgroundColor: tag.color,\n                                border: 0,\n                            }}\n                            onClick={() =>",
          "<Chip\n                        icon={<PencilIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Chip\n                                                icon={\n                                                    <StarIcon className=\"h-4 w-4 text-white\" />",
          "<Chip\n                                                label={`${influenceLevel.label} Influence`}\n                                                className=\"font-semibold\"\n                                                style={{\n                                                    backgroundColor:\n                                                        influenceLevel.color ||\n                                                        '#d1d5db', // gray-300\n                                                    color: getContrastText(\n                                                        influenceLevel.color ||\n                                                            '#d1d5db'\n                                                    ),\n                                                }}\n                                            />",
          "<Chip\n                                                label={decisionRole.label}\n                                                variant=\"outlined\"\n                                                style={{\n                                                    borderColor:\n                                                        decisionRole.color ||\n                                                        '#9ca3af', // gray-400\n                                                }}\n                                            />"
        ]
      },
      {
        "file": "src/contacts/ContactListFilter.tsx",
        "context": [
          "<Chip\n                                label={role.label}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor: role.color || '#e0e0e0',\n                                    color: 'white',\n                                    border: 0,\n                                    cursor: 'pointer',\n                                    fontWeight: 500,\n                                }}\n                            />",
          "<Chip\n                                label={influence.label}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor:\n                                        influence.color || '#e0e0e0',\n                                    color: 'white',\n                                    border: 0,\n                                    cursor: 'pointer',\n                                    fontWeight: 500,\n                                }}\n                            />",
          "<Chip\n                                label={decision.label}\n                                size=\"small\"\n                                style={{\n                                    backgroundColor:\n                                        decision.color || '#e0e0e0',\n                                    color: 'white',\n                                    border: 0,\n                                    cursor: 'pointer',\n                                    fontWeight: 500,\n                                }}\n                            />"
        ]
      },
      {
        "file": "src/contacts/ContactList.tsx",
        "context": []
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Chip\n                        icon={<StarIcon className=\"h-4 w-4 text-white\" />",
          "<Chip\n                            label={influenceLevel.label}\n                            size=\"small\"\n                            className=\"text-xs h-6\"\n                            style={{\n                                backgroundColor:\n                                    influenceLevel.color || '#d1d5db', // gray-300\n                                color: getContrastText(\n                                    influenceLevel.color || '#d1d5db'\n                                ),\n                            }}\n                        />",
          "<Chip\n                            label={decisionRole.label}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            className=\"text-xs h-6\"\n                            style={{\n                                borderColor: decisionRole.color || '#9ca3af', // gray-400\n                                color: decisionRole.color || '#6b7280', // gray-500\n                            }}\n                        />"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<Chip\n                                                label={`Priority ${priority.label}`}\n                                                style={{\n                                                    backgroundColor:\n                                                        priority.color ||\n                                                        '#e0e0e0',\n                                                }}\n                                                className=\"text-black font-semibold\"\n                                            />",
          "<Chip\n                                                label={segment.label}\n                                                className=\"border\"\n                                                style={{\n                                                    borderColor: segment.color,\n                                                }}\n                                            />",
          "<Chip\n                                            label={segment.label}\n                                            size=\"small\"\n                                            style={{\n                                                backgroundColor:\n                                                    segment.color || '#e0e0e0',\n                                            }}\n                                            className=\"text-black mt-1\"\n                                        />"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<Chip\n                                        label={org.business_type || 'Other'}\n                                        size=\"small\"\n                                        color={\n                                            getBusinessTypeColor(\n                                                org.business_type\n                                            ) as any\n                                        }\n                                        variant=\"outlined\"\n                                    />",
          "<Chip\n                                            label={org.priority}\n                                            size=\"small\"\n                                            color={\n                                                getPriorityColor(\n                                                    org.priority\n                                                ) as any\n                                            }\n                                            variant=\"filled\"\n                                        />",
          "<Chip\n                                            label={org.status}\n                                            size=\"small\"\n                                            className={`status-${org.status}`}\n                                            variant=\"outlined\"\n                                        />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<Chip\n                                    label={org.business_type || 'Other'}\n                                    size=\"small\"\n                                    color={\n                                        getBusinessTypeColor(\n                                            org.business_type\n                                        ) as any\n                                    }\n                                    variant=\"outlined\"\n                                />",
          "<Chip\n                                        label={org.priority}\n                                        size=\"small\"\n                                        color={\n                                            getPriorityColor(\n                                                org.priority\n                                            ) as any\n                                        }\n                                        variant=\"filled\"\n                                    />",
          "<Chip\n                                        label={org.status}\n                                        size=\"small\"\n                                        className={`status-${org.status}`}\n                                        variant=\"outlined\"\n                                    />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Chip\n                        label={priority.label}\n                        size=\"small\"\n                        className=\"text-white\"\n                        style={{ backgroundColor: priority.color || '#d1d5db' }}\n                    />",
          "<Chip\n                        label={segment.label}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        className=\"border\"\n                        style={{ borderColor: segment.color }}\n                    />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationListFilter.tsx",
        "context": [
          "<Chip\n                                    size=\"small\"\n                                    label={\n                                        prioritySettings?.find(\n                                            s =>",
          "<Chip\n                                    size=\"small\"\n                                    label={\n                                        segmentSettings?.find(\n                                            s =>",
          "<Chip\n                                    size=\"small\"\n                                    label={\n                                        distributorSettings?.find(\n                                            s =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Chip\n                                label={organization.priority}\n                                size=\"small\"\n                                color={\n                                    organization.priority === 'high'\n                                        ? 'error'\n                                        : organization.priority === 'medium'\n                                            ? 'warning'\n                                            : 'success'\n                                }\n                                variant=\"filled\"\n                                sx={{\n                                    fontSize: '0.65rem',\n                                    height: { xs: 18, sm: 20 },\n                                    minWidth: { xs: 50, sm: 60 },\n                                }}\n                            />",
          "<Chip\n                            label={new Intl.NumberFormat('en-US', {\n                                style: 'currency',\n                                currency: 'USD',\n                                notation: 'compact',\n                            }).format(organization.revenue)}\n                            size=\"small\"\n                            color=\"primary\"\n                            variant=\"outlined\"\n                            sx={{\n                                fontSize: '0.65rem',\n                                height: { xs: 18, sm: 20 },\n                                fontWeight: 600,\n                            }}\n                        />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Chip\n                                        label={org.business_type}\n                                        size=\"small\"\n                                        className={`text-xs ${getBusinessTypeColor(org.business_type)}`}\n                                    />",
          "<Chip\n                                    label={`${org.nb_contacts} contacts`}\n                                    size=\"small\"\n                                    className=\"text-xs border border-gray-300 bg-transparent\"\n                                />",
          "<Chip\n                                    label={`${org.priority} priority`}\n                                    size=\"small\"\n                                    className={`text-xs ${getPriorityColor(org.priority)}`}\n                                />"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": []
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Chip\n                                label={activeFiltersCount}\n                                size=\"small\"\n                                color=\"primary\"\n                                sx={{\n                                    position: 'absolute',\n                                    top: -4,\n                                    right: -4,\n                                    height: 18,\n                                    minWidth: 18,\n                                    '& .MuiChip-label': {\n                                        fontSize: '0.7rem',\n                                        px: 0.5,\n                                    },\n                                }}\n                            />",
          "<Chip\n                                    label={`Search: \"${searchQuery}\"`}\n                                    onDelete={() =>",
          "<Chip\n                                            key={key}\n                                            label={label}\n                                            onDelete={() =>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Chip\n                                                                label=\"Modified\"\n                                                                size=\"small\"\n                                                                className=\"bg-blue-100 text-blue-800 border border-blue-200\"\n                                                            />",
          "<Chip\n                                                                label={`${state.errorCount} error${state.errorCount >",
          "<Chip\n                                                                label={`${state.warningCount} warning${state.warningCount >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Chip\n                                                            label={`${state.errorCount} error${state.errorCount >",
          "<Chip\n                                                            label={`${state.warningCount} warning${state.warningCount >"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Chip\n                                    label={`${currentStep + 1} / ${steps.length}`}\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                />"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Chip\n                        icon={icon}\n                        label={isListening ? 'Stop' : 'Voice'}\n                        onClick={buttonProps.onClick}\n                        disabled={buttonProps.disabled}\n                        className={`min-h-11 ${\n                            isListening\n                                ? 'bg-gray-600 text-white'\n                                : 'bg-blue-600 text-white border border-blue-600'\n                        }`}\n                    />"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Chip\n                            label={priority.label}\n                            size=\"small\"\n                            className=\"font-semibold text-xs\"\n                            style={{\n                                backgroundColor: priority.color || '#d1d5db',\n                                color: priority.color ? '#fff' : '#374151',\n                            }}\n                        />",
          "<Chip\n                            label={record.business_type}\n                            size=\"small\"\n                            color={getBusinessTypeColor(record.business_type) as any}\n                            variant=\"outlined\"\n                            sx={{ fontSize: '0.7rem' }}\n                        />",
          "<Chip\n                            label={record.status}\n                            size=\"small\"\n                            color={getStatusColor(record.status) as any}\n                            variant=\"outlined\"\n                            sx={{ fontSize: '0.7rem' }}\n                        />"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Chip\n                                    label={level}\n                                    color={color}\n                                    size=\"small\"\n                                />",
          "<Chip\n                                        label={\n                                            user.isActive\n                                                ? 'Active'\n                                                : 'Inactive'\n                                        }\n                                        color={\n                                            user.isActive ? 'success' : 'error'\n                                        }\n                                        size=\"small\"\n                                    />",
          "<Chip\n                                                    key={principal}\n                                                    label={principal}\n                                                    size=\"small\"\n                                                    color=\"secondary\"\n                                                    variant=\"outlined\"\n                                                />"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Chip\n                                key={principal}\n                                label={principal}\n                                onDelete={() =>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Chip label={summary.timeRange} color=\"info\" size=\"small\" />",
          "<Chip\n                                label={`${summary.warnings.slowApiCalls} slow API calls`}\n                                size=\"small\"\n                                color=\"warning\"\n                            />",
          "<Chip\n                                label={`${summary.warnings.slowGpsAcquisitions} slow GPS`}\n                                size=\"small\"\n                                color=\"warning\"\n                            />"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Chip\n                                        label={`${offlineStatus.pendingActions} pending`}\n                                        size=\"small\"\n                                        color=\"info\"\n                                    />"
        ]
      },
      {
        "file": "src/components/security/SecurityStatusBar.tsx",
        "context": [
          "<Chip\n                        icon={getStatusIcon()}\n                        label={securityStatus.score}\n                        color={getStatusColor()}\n                        size=\"small\"\n                        variant=\"outlined\"\n                    />",
          "<Chip\n                        icon={getStatusIcon()}\n                        label={`${getStatusText()} (${securityStatus.score})`}\n                        color={getStatusColor()}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        className=\"cursor-help hover:scale-105 transition-transform\"\n                    />"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Chip\n                                        label={`${category}: ${count}`}\n                                        size=\"small\"\n                                    />",
          "<Chip\n                                        label={`${severity}: ${count}`}\n                                        size=\"small\"\n                                        sx={{\n                                            backgroundColor:\n                                                getSeverityColor(severity) +\n                                                '20',\n                                            color: getSeverityColor(severity),\n                                        }}\n                                    />",
          "<Chip\n                                                label={event.severity}\n                                                size=\"small\"\n                                                sx={{\n                                                    backgroundColor:\n                                                        getSeverityColor(\n                                                            event.severity\n                                                        ) + '20',\n                                                    color: getSeverityColor(\n                                                        event.severity\n                                                    ),\n                                                }}\n                                            />"
        ]
      },
      {
        "file": "src/components/navigation/RelationshipBreadcrumbs.tsx",
        "context": [
          "<Chip\n                                    label={crumb.label}\n                                    size=\"small\"\n                                    className={`max-w-50 truncate ${isLast\n                                        ? `${bgClass} text-white`\n                                        : `bg-transparent ${colorClass}`\n                                        }`}\n                                />",
          "<Chip\n                                        label={crumb.label}\n                                        size=\"small\"\n                                        className={`max-w-50 cursor-pointer ${colorClass} bg-transparent hover:bg-gray-100 truncate`}\n                                    />"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Chip\n                                        label=\"Primary\"\n                                        size=\"small\"\n                                        className=\"bg-blue-100 text-blue-800 h-5 text-xs\"\n                                    />",
          "<Chip\n                                        icon={<PhoneIcon className=\"h-3 w-3\" />",
          "<Chip\n                                        icon={<EmailIcon className=\"h-3 w-3\" />"
        ]
      },
      {
        "file": "src/components/dashboard/UpcomingMeetings.tsx",
        "context": [
          "<Chip className=\"bg-blue-100 text-blue-800 text-xs\">",
          "<Chip className={getMeetingTypeColor(meeting.type)}>",
          "<Chip className={getStatusColor(meeting.status)}>"
        ]
      },
      {
        "file": "src/components/dashboard/RecentProducts.tsx",
        "context": [
          "<Chip className=\"bg-indigo-100 text-indigo-800 text-xs\">",
          "<Chip className={getCategoryColor(product.category)}>",
          "<Chip className={getStatusColor(product.status)}>"
        ]
      },
      {
        "file": "src/components/dashboard/RecentInteractions.tsx",
        "context": [
          "<Chip className=\"bg-orange-100 text-orange-800 text-xs\">",
          "<Chip className={getPriorityColor(interaction.priority)}>",
          "<Chip className=\"bg-orange-100 text-orange-800\">"
        ]
      },
      {
        "file": "src/components/dashboard/RecentContacts.tsx",
        "context": [
          "<Chip className=\"bg-green-100 text-green-800 text-xs\">",
          "<Chip className={getTypeColor(contact.type)}>",
          "<Chip className={getStatusColor(contact.status)}>"
        ]
      },
      {
        "file": "src/components/dashboard/HighPriorityTasks.tsx",
        "context": [
          "<Chip className=\"bg-red-100 text-red-800 text-xs\">",
          "<Chip className={getStatusColor(task.status)}>",
          "<Chip className={getPriorityColor(task.priority)}>"
        ]
      },
      {
        "file": "src/components/dashboard/APriorityOrganizations.tsx",
        "context": [
          "<Chip className=\"bg-yellow-100 text-yellow-800 text-xs\">",
          "<Chip className={getTypeColor(org.type)}>",
          "<Chip className={getStatusColor(org.status)}>"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": []
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Chip\n                                    icon={<PhoneIcon className=\"h-4 w-4\" />",
          "<Chip\n                                    icon={<EnvelopeIcon className=\"h-4 w-4\" />",
          "<Chip\n                                    icon={<UserIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Chip\n                                    key={index}\n                                    label={range.label}\n                                    onClick={() =>"
        ]
      }
    ],
    "Button": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<Button\n                    variant=\"outlined\"\n                    startIcon={<DirectionsIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={openMaps}\n                            className=\"p-0.5 min-w-8 min-h-8\"\n                        >"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Button\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        startIcon={\n                                            gpsLoading ? (\n                                                <CircularProgress size=\"xs\" />"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Button\n                            variant=\"outlined\"\n                            onClick={handleGeneratePassword}\n                            className=\"min-h-11\"\n                        >"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Button\n                                variant=\"secondary\"\n                                size=\"small\"\n                                onClick={onExportActivity}\n                            >",
          "<Button onClick={handleCloseDetails} variant=\"secondary\">"
        ]
      },
      {
        "file": "src/tasks/TaskEdit.tsx",
        "context": []
      },
      {
        "file": "src/tags/TagDialog.tsx",
        "context": [
          "<Button\n                        type=\"submit\"\n                        color=\"primary\"\n                        disabled={disabled}\n                        variant=\"contained\"\n                        startIcon={<ContentSave className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Button\n                                    variant=\"outlined\"\n                                    startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button\n                                    variant=\"outlined\"\n                                    startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button\n                                variant=\"contained\"\n                                startIcon={<UploadIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Button\n                        variant=\"outlined\"\n                        startIcon={<RefreshIcon className=\"w-4 h-4\" />",
          "<Button\n                            variant=\"contained\"\n                            color=\"error\"\n                            startIcon={<BlockIcon className=\"w-4 h-4\" />",
          "<Button onClick={() =>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Button\n                        variant=\"contained\"\n                        startIcon={<RunIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Button\n                        variant=\"outlined\"\n                        startIcon={<RefreshIcon className=\"w-4 h-4\" />",
          "<Button\n                        variant=\"contained\"\n                        startIcon={<SaveIcon className=\"w-4 h-4\" />",
          "<Button\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onClick={handleReset}\n                        className=\"mt-1\"\n                    >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Button\n                            variant=\"secondary\"\n                            onClick={loadSecurityData}\n                            disabled={loading}\n                            className=\"min-h-[44px]\"\n                        >",
          "<Button\n                            variant={autoRefresh ? 'primary' : 'secondary'}\n                            onClick={() =>",
          "<Button size=\"small\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Button\n                        variant=\"outlined\"\n                        startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button onClick={() =>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Button\n                                variant=\"outlined\"\n                                startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button\n                                variant=\"outlined\"\n                                startIcon={\n                                    showBackupCodes ? (\n                                        <HideIcon className=\"w-4 h-4\" />",
          "<Button\n                                                size=\"small\"\n                                                variant=\"outlined\"\n                                                onClick={() =>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Button\n                        variant=\"contained\"\n                        startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            startIcon={<DownloadIcon className=\"w-4 h-4\" />",
          "<Button onClick={() =>"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Button\n                                variant=\"contained\"\n                                className=\"bg-green-500 text-white\"\n                                startIcon={<CheckCircleIcon className=\"h-4 w-4\" />",
          "<Button\n                                variant=\"outlined\"\n                                className=\"border-yellow-500 text-yellow-500\"\n                                startIcon={<ArrowPathIcon className=\"h-4 w-4\" />",
          "<Button\n                                variant=\"outlined\"\n                                className=\"border-yellow-500 text-yellow-500\"\n                                startIcon={<ArrowPathIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderList.tsx",
        "context": [
          "<Button\n                            size=\"small\"\n                            startIcon={<CheckCircleIcon className=\"h-4 w-4\" />",
          "<Button\n                            size=\"small\"\n                            startIcon={<ArrowPathIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Button\n                                component={Link}\n                                to=\"/reminders\"\n                                size=\"small\"\n                                className=\"mt-2\"\n                            >",
          "<Button\n                                component={Link}\n                                to=\"/reminders/create\"\n                                variant=\"outlined\"\n                                startIcon={<AddIcon className=\"h-4 w-4\" />",
          "<Button\n                                component={Link}\n                                to=\"/reminders/create\"\n                                size=\"small\"\n                                startIcon={<AddIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Button\n                        variant=\"secondary\"\n                        size=\"small\"\n                        onClick={() =>",
          "<Button\n                        variant=\"secondary\"\n                        size=\"small\"\n                        onClick={() =>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Button onClick={onClose}>",
          "<Button onClick={onClose} variant=\"primary\">"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            disabled={isPending}\n                            startIcon={<ContentSave className=\"h-4 w-4\" />",
          "<Button\n                            className=\"ml-1\"\n                            onClick={handleCancelEdit}\n                            color=\"primary\"\n                        >"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Button variant=\"contained\" onClick={updateImage}>",
          "<Button variant=\"text\" color=\"error\" onClick={deleteImage}>"
        ]
      },
      {
        "file": "src/login/UniversalLoginPage.tsx",
        "context": [
          "<Button\n                            type=\"submit\"\n                            variant=\"primary\"\n                            disabled={loading}\n                            className=\"w-full !h-12 text-lg\"\n                        >"
        ]
      },
      {
        "file": "src/login/SignupPage.tsx",
        "context": [
          "<Button\n                            type=\"submit\"\n                            variant=\"primary\"\n                            disabled={!isValid || isSignUpPending}\n                            className=\"w-full !h-12 text-lg\"\n                        >"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Button\n                            component={Link}\n                            to=\"/login\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            fullWidth\n                            sx={{\n                                minHeight: 48,\n                                fontSize: '1.1rem',\n                                fontWeight: 600,\n                            }}\n                        >",
          "<Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            disabled={!isValid || isPending}\n                            fullWidth\n                            sx={{\n                                mt: 2,\n                                minHeight: 48,\n                                fontSize: '1.1rem',\n                                fontWeight: 600,\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Button\n                                component={Link}\n                                to=\"/login\"\n                                variant=\"contained\"\n                                size=\"large\"\n                                fullWidth\n                                sx={{\n                                    minHeight: 48,\n                                    fontSize: '1.1rem',\n                                    fontWeight: 600,\n                                }}\n                            >",
          "<Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            disabled={!isValid || isPending}\n                            fullWidth\n                            sx={{\n                                mt: 2,\n                                minHeight: 48,\n                                fontSize: '1.1rem',\n                                fontWeight: 600,\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/login/LoginForm.tsx",
        "context": [
          "<Button\n                    type=\"submit\"\n                    variant=\"primary\"\n                    disabled={loading}\n                    className=\"w-full\"\n                >"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Button\n                                variant=\"outlined\"\n                                startIcon={<LocationIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Button\n                                        variant=\"outlined\"\n                                        startIcon={\n                                            locationLoading ? (\n                                                <CircularProgress className=\"h-4 w-4\" />",
          "<Button\n                                            variant=\"text\"\n                                            startIcon={<LocationIcon className=\"h-4 w-4\" />",
          "<Button\n                                            size=\"small\"\n                                            onClick={refreshLocation}\n                                            className=\"ml-1\"\n                                        >"
        ]
      },
      {
        "file": "src/interactions/InteractionEmpty.tsx",
        "context": [
          "<Button\n                    variant=\"contained\"\n                    startIcon={<AddIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionCreate.tsx",
        "context": [
          "<Button\n                onClick={handleGetLocation}\n                disabled={isGettingLocation}\n                startIcon={<GpsIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={handleView}\n                            aria-label={`View interaction: ${interaction.subject || 'Untitled Interaction'}`}\n                            className=\"min-w-11 min-h-11 p-1\"\n                        >",
          "<Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={handleEdit}\n                            aria-label={`Edit interaction: ${interaction.subject || 'Untitled Interaction'}`}\n                            className=\"min-w-11 min-h-11 p-1\"\n                        >"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Button variant=\"ghost\" size=\"sm\" className=\"p-2\">",
          "<Button variant=\"ghost\" size=\"sm\" className=\"p-2\">"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Button size=\"small\" color=\"primary\">",
          "<Button\n                            variant=\"outlined\"\n                            fullWidth={isMobile}\n                            size=\"small\"\n                            startIcon={<AddIcon />"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Button size=\"small\" color=\"primary\">",
          "<Button\n                            variant=\"outlined\"\n                            fullWidth={isMobile}\n                            size=\"small\"\n                            startIcon={<DocumentTextIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/customers/CustomerImportButton.tsx",
        "context": [
          "<Button\n            variant=\"outlined\"\n            startIcon={<ArrowUpTrayIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<Button\n            component={RouterLink}\n            to=\"/contacts/create\"\n            state={\n                company ? { record: { organizationId: company.id } } : undefined\n            }\n            color=\"primary\"\n            size=\"small\"\n            startIcon={<UserPlusIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/common/LazyLoadingUtils.tsx",
        "context": [
          "<Button\n                    variant=\"contained\"\n                    startIcon={<ArrowPathIcon className=\"w-4 h-4\" />",
          "<Button\n                    variant=\"outlined\"\n                    onClick={() =>"
        ]
      },
      {
        "file": "src/activity/ActivityLogIterator.tsx",
        "context": [
          "<Button\n                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    startIcon={<MapPinIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Button\n                            size=\"small\"\n                            startIcon={<ViewIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": [
          "<Button\n                        variant=\"outlined\"\n                        startIcon={<MapIcon />"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationInputs.tsx",
        "context": [
          "<Button\n                    size=\"small\"\n                    startIcon={<MapPinIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Button\n                            onClick={handleBack}\n                            disabled={activeStep === 0}\n                            startIcon={<ArrowBackIcon className=\"h-4 w-4\" />",
          "<Button\n                                    onClick={handleNext}\n                                    variant=\"contained\"\n                                    endIcon={<ArrowForwardIcon className=\"h-4 w-4\" />",
          "<Button onClick={handleUnsavedChangesCancel}>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Button\n                            onClick={handleBack}\n                            disabled={activeStep === 0}\n                            startIcon={<ArrowLeftIcon className=\"w-4 h-4\" />",
          "<Button\n                                    onClick={handleNext}\n                                    variant=\"contained\"\n                                    endIcon={<ArrowRightIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Button\n                                    onClick={handleBack}\n                                    disabled={currentStep === 0 || isSubmitting}\n                                    startIcon={<ArrowLeftIcon className=\"w-4 h-4\" />",
          "<Button\n                                        onClick={handleSubmit}\n                                        disabled={!canProceed || isSubmitting}\n                                        variant=\"contained\"\n                                        startIcon={<DocumentArrowDownIcon className=\"w-4 h-4\" />",
          "<Button\n                                        onClick={handleNext}\n                                        disabled={!canProceed}\n                                        variant=\"contained\"\n                                        className=\"min-h-12\"\n                                    >"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Button\n                        startIcon={icon}\n                        variant={isListening ? 'contained' : 'outlined'}\n                        className={`min-w-11 min-h-11 ${\n                            isListening\n                                ? 'bg-gray-600 text-white'\n                                : 'border border-blue-600 text-blue-600'\n                        }`}\n                        {...buttonProps}\n                    >",
          "<Button\n                            startIcon={<CloseIcon className=\"h-4 w-4\" />",
          "<Button\n                                startIcon={<ReplayIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    size=\"large\"\n                    disabled={!isValid || isPending}\n                    sx={{\n                        mt: 3,\n                        minHeight: 48,\n                        fontSize: '1.1rem',\n                        fontWeight: 600,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    size=\"large\"\n                    disabled={!isValid || isPending}\n                    sx={{\n                        mt: 3,\n                        minHeight: 48,\n                        fontSize: '1.1rem',\n                        fontWeight: 600,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Button\n                        variant=\"outlined\"\n                        startIcon={\n                            refreshing ? <LinearProgress />",
          "<Button\n                        variant=\"outlined\"\n                        startIcon={<DownloadIcon />",
          "<Button\n                        variant=\"outlined\"\n                        color=\"warning\"\n                        onClick={clearMetrics}\n                        size=\"small\"\n                    >"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Button\n                                        variant=\"outlined\"\n                                        onClick={testGPS}\n                                        disabled={!settings.gpsEnabled}\n                                        startIcon={<MapPinIcon className=\"w-4 h-4\" />",
          "<Button\n                                        variant=\"outlined\"\n                                        color=\"warning\"\n                                        onClick={clearOfflineData}\n                                        disabled={!settings.offlineEnabled}\n                                        startIcon={<ServerIcon className=\"w-4 h-4\" />",
          "<Button\n                    variant=\"contained\"\n                    size=\"large\"\n                    startIcon={<ShieldCheckIcon className=\"w-4 h-4\" />"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<Button\n                    onClick={() =>",
          "<Button\n                    onClick={handleExtendSession}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    autoFocus\n                >"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Button\n                            component={Link}\n                            to={createLink}\n                            variant=\"outlined\"\n                            size=\"small\"\n                            startIcon={<AddIcon className=\"h-4 w-4\" />",
          "<Button\n                                    component={Link}\n                                    to={viewAllLink}\n                                    variant=\"text\"\n                                    endIcon={<ArrowForwardIcon className=\"h-4 w-4\" />",
          "<Button\n                                component={Link}\n                                to={createLink}\n                                variant=\"contained\"\n                                startIcon={<AddIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Button\n                                size=\"small\"\n                                variant=\"outlined\"\n                                startIcon={gpsLoading ? null : <PhoneIcon className=\"h-4 w-4\" />"
        ]
      }
    ],
    "Divider": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": []
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Divider className=\"my-1\" />"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Divider className=\"my-2\" />"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Divider />"
        ]
      },
      {
        "file": "src/products/ProductShow.tsx",
        "context": [
          "<Divider className=\"mb-2\" />",
          "<Divider className=\"mb-2\" />",
          "<Divider className=\"mb-2\" />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Divider sx={{ mb: 3 }} />"
        ]
      },
      {
        "file": "src/notes/NotesIterator.tsx",
        "context": [
          "<Divider className=\"my-2\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionFilters.tsx",
        "context": [
          "<Divider />",
          "<Divider />",
          "<Divider />"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Divider />"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Divider />"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Divider className=\"my-6\" />",
          "<Divider className=\"my-6\" />",
          "<Divider className=\"my-6\" />"
        ]
      },
      {
        "file": "src/contacts/ContactInputs.tsx",
        "context": [
          "<Divider\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    className=\"flex-auto\"\n                />"
        ]
      },
      {
        "file": "src/companies/CompanyAside.tsx",
        "context": [
          "<Divider className=\"mb-1\" />",
          "<Divider className=\"mb-1\" />",
          "<Divider sx={{ mb: 1 }} />"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationInputs.tsx",
        "context": [
          "<Divider\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    flexItem\n                />"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Divider sx={{ my: 3 }} />"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Divider className=\"ml-14\" />",
          "<Divider className=\"ml-14\" />",
          "<Divider className=\"ml-14\" />"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<Divider className=\"my-4\" />",
          "<Divider className=\"my-4\" />",
          "<Divider className=\"my-4\" />"
        ]
      }
    ],
    "": [
      {
        "file": "src/visits/VisitShow.tsx",
        "context": [
          "<TopToolbar>",
          "<EditButton />",
          "<DeleteButton />"
        ]
      },
      {
        "file": "src/visits/VisitList.tsx",
        "context": [
          "<TopToolbar>",
          "<FilterButton />",
          "<CreateButton label=\"Log Visit\" />"
        ]
      },
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<{\n        latitude?: number;\n        longitude?: number;\n        visit_date: string;\n        duration_minutes?: number;\n    }>",
          "<Create transform={transform} redirect=\"list\">",
          "<SimpleForm>"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "< length; i++) {\n        password += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return password;\n};\n\nexport const UserCreate = () =>",
          "<Create\n            title=\"Create New User\"\n            redirect=\"list\"\n            className={`${isMobile ? 'w-full' : 'max-w-4xl mx-auto'}`}\n        >",
          "<UserCreateForm />"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<string, any>",
          "<UserActivityTrackerProps>",
          "<UserActivity | null>"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<string, any>",
          "<UserActivityTrackerProps>",
          "<UserActivity | null>"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<>",
          "<Tooltip title=\"Create task\">",
          "<IconButton\n                        size=\"small\"\n                        className=\"text-gray-500 ml-auto\"\n                        component={Link}\n                        to={'#'}\n                        onClick={handleOpen}\n                    >"
        ]
      },
      {
        "file": "src/tags/TagDialog.tsx",
        "context": [
          "<Tag, 'name' | 'color'>",
          "<Tag, 'name' | 'color'>",
          "<void>"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<{\n        row: number;\n        type: 'success' | 'error' | 'warning';\n        message: string;\n        data?: any;\n    }>",
          "<HTMLInputElement>",
          "<BulkOperationResult | null>"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<string, CategoryInfo>",
          "<ArrowTrendingUpIcon className=\"w-5 h-5\" />",
          "<CategoryIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<TopToolbar>",
          "<FilterButton />",
          "<CreateButton variant=\"contained\" label=\"Add Principal\" />"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<SessionManagerProps>",
          "<UserSession[]>",
          "<UserSession | null>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<SecurityTestResult>",
          "<SecurityTestSuiteProps>",
          "<SecurityTest[]>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<SecurityPolicyManagerProps>",
          "<SecuritySetting[]>",
          "<{\n        [key: string]: any;\n    }>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<SecurityDashboardProps>",
          "<SecurityMetrics | null>",
          "<SecurityAlert[]>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<SecurityAuditLogProps>",
          "<SecurityEvent[]>",
          "<AuditLog[]>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<\n    ComplianceDocumentationProps\n>",
          "<ComplianceFramework[]>",
          "<SecurityControl[]>"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<TopToolbar>",
          "<EditButton />",
          "<DeleteButton />"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "< now\n    ).length;\n\n    const dueToday = reminders.filter(\n        r =>",
          "<OverdueIcon className=\"h-6 w-6 text-red-500\" />",
          "<ScheduleIcon className=\"h-6 w-6 text-yellow-500\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<string, any>",
          "<string>",
          "<Create transform={transform} redirect=\"list\">"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<TopToolbar>",
          "<FilterButton />",
          "<ExportButton />"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<ProductComparisonProps>",
          "<Product>",
          "<Setting>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<TopToolbar>",
          "<EditButton />",
          "<DeleteButton />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityEdit.tsx",
        "context": [
          "<Toolbar>",
          "<SaveButton />",
          "<DeleteButton />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCreate.tsx",
        "context": [
          "<Create\n            resource=\"deals\" // Backend uses deals table\n            redirect=\"list\"\n            transform={(data: any) =>",
          "<OpportunityForm />",
          "</Create>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Draggable draggableId={String(opportunity.id)} index={index}>",
          "<OpportunityCardContent\n                    provided={provided}\n                    snapshot={snapshot}\n                    opportunity={opportunity}\n                />",
          "</Draggable>"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<FieldValues>",
          "<Box\n            onMouseEnter={() =>",
          "<Stack className=\"flex-row space-x-1 items-center w-full\">"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<>",
          "<Stack\n                direction={linkPosition === 'right' ? 'row' : 'column'}\n                alignItems={'center'}\n                gap={linkPosition === 'right' ? 2 : 0.5}\n                borderRadius={1}\n                p={props.backgroundImageColor ? 1 : 0}\n                sx={{\n                    backgroundColor:\n                        props.backgroundImageColor || 'transparent',\n                }}\n            >",
          "<Avatar {...commonProps}>"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Box className=\"p-3 text-center\">",
          "<Typography variant=\"body2\" className=\"text-gray-500\">",
          "</Typography>"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": [
          "<TopToolbar>",
          "<CreateButton />",
          "</TopToolbar>"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<{\n        latitude: number;\n        longitude: number;\n        accuracy?: number;\n    } | null>",
          "<string>",
          "<Stack className=\"gap-6\">"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "< 60) return `${minutes}m`;\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        return mins >",
          "<Card\n            component=\"article\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label={`Interaction: ${interaction.subject || 'Untitled Interaction'} with ${interaction.organization?.name || 'Unknown Organization'}`}\n            onKeyDown={e =>",
          "<CardContent className=\"p-2 [&:last-child]:pb-2\">"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "< weekStart\n    );\n    const thisMonthVisits = visits.filter(\n        v =>",
          "<string, number>",
          "< nextDay;\n            }).length,\n        };\n    });\n\n    const maxDailyVisits = Math.max(...dailyVisitCounts.map(d =>"
        ]
      },
      {
        "file": "src/dashboard/TasksList.tsx",
        "context": [
          "< 5; // Friday is represented by 5\nconst startOfTodayDateISO = startOfToday().toISOString();\nconst endOfTodayDateISO = endOfToday().toISOString();\nconst endOfTomorrowDateISO = endOfTomorrow().toISOString();\nconst endOfWeekDateISO = endOfWeek(today, { weekStartsOn: 0 }).toISOString();\n\nconst taskFilters = {\n    overdue: { 'done_date@is': null, 'due_date@lt': startOfTodayDateISO },\n    today: {\n        'done_date@is': null,\n        'due_date@gte': startOfTodayDateISO,\n        'due_date@lte': endOfTodayDateISO,\n    },\n    tomorrow: {\n        'done_date@is': null,\n        'due_date@gt': endOfTodayDateISO,\n        'due_date@lt': endOfTomorrowDateISO,\n    },\n    thisWeek: {\n        'done_date@is': null,\n        'due_date@gte': endOfTomorrowDateISO,\n        'due_date@lte': endOfWeekDateISO,\n    },\n    later: { 'done_date@is': null, 'due_date@gt': endOfWeekDateISO },\n};\n\nexport const TasksList = () =>",
          "<Card className=\"shadow-sm\">",
          "<CardHeader className=\"pb-3\">"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<string, Record<string, string>",
          "<StatCardProps>",
          "< 640; // Tailwind 'sm' breakpoint\n\n    return (\n        <Card\n            className={`h-full transition-all duration-200 ease-in-out ${onClick\n                ? 'cursor-pointer hover:shadow-lg hover:-translate-y-0.5'\n                : 'cursor-default'\n                }`}\n            onClick={onClick}\n        >"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Product>",
          "<Deal>",
          "<Interaction>"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<string, React.ReactElement>",
          "<PhoneIcon className=\"h-4 w-4\" />",
          "<EmailIcon className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/dashboard/HotContacts.tsx",
        "context": [
          "<Contact>",
          "<Card className=\"shadow-sm\">",
          "<CardHeader className=\"pb-3\">"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Visit>",
          "<Customer>",
          "<Card>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Reminder>",
          "<Organization>",
          "<Contact>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<Customer>",
          "< 768;\n\n    if (isPending) {\n        return (\n            <div className=\"flex justify-center my-8\">",
          "<Spinner />"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<TopToolbar>",
          "<EditButton />",
          "<DeleteButton />"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<ContactImportSchema>",
          "<File | null>",
          "<HTMLAnchorElement>"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Contact>",
          "< 640; // Tailwind 'sm' breakpoint\n\n    // Fetch Settings for display\n    const { data: role } = useGetOne<Setting>",
          "<Setting>"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ShowBase>",
          "<CompanyShowContent />",
          "</ShowBase>"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<\n    VirtualizedOrganizationTableProps\n>",
          "<TableHead>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<OrganizationTableProps>",
          "<Box sx={{ p: 3, textAlign: 'center' }}>",
          "<Typography>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<void>",
          "<DraggableCardProps>",
          "<Card\n            ref={setNodeRef}\n            style={style}\n            sx={{\n                cursor: isDragging || isSortableDragging ? 'grabbing' : 'grab',\n                transition: 'all 0.2s ease-in-out',\n                '&:hover': {\n                    transform:\n                        isDragging || isSortableDragging\n                            ? 'none'\n                            : 'translateY(-1px)',\n                    boxShadow: isDragging || isSortableDragging ? 'none' : 4,\n                },\n                minHeight: { xs: 140, sm: 160 }, // Mobile-optimized heights\n                touchAction: 'none', // Prevent scrolling while dragging on mobile\n            }}\n            {...attributes}\n            {...listeners}\n            onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<OrganizationCardsProps>",
          "<Box className=\"p-6 text-center\">",
          "<Typography>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<[number, number]>",
          "<Card className=\"filter-container\" sx={{ mb: 2 }}>",
          "<CardContent sx={{ pb: 2 }}>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<\n    MultiStepOrganizationEditProps\n>",
          "<Organization>",
          "<Partial<Organization>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Organization>",
          "<\n    MultiStepOrganizationCreateProps\n>",
          "<Partial<Organization>"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<VoiceInputProps>",
          "<string | null>",
          "<any>"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<TextInputProps, 'type'>",
          "<SmartKeyboardProps>",
          "<string[]>"
        ]
      },
      {
        "file": "src/organizations/common/MobileFAB.tsx",
        "context": [
          "<MobileFABProps>",
          "<NodeJS.Timeout | null>",
          "<BusinessIcon className=\"h-5 w-5\" />"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<SecuritySettingsProps>",
          "< 1) return 'Less than a day';\n        if (diffInDays === 1) return '1 day';\n        if (diffInDays < 30) return `${diffInDays} days`;\n        if (diffInDays < 365) return `${Math.floor(diffInDays / 30)} months`;\n        return `${Math.floor(diffInDays / 365)} years`;\n    };\n\n    const getSecurityScore = () =>",
          "< 30) score += 1;\n        }\n\n        return { score, maxScore };\n    };\n\n    const { score, maxScore } = getSecurityScore();\n    const securityPercentage = Math.round((score / maxScore) * 100);\n\n    const getSecurityLevel = () =>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`performance-tabpanel-${index}`}\n            aria-labelledby={`performance-tab-${index}`}\n            {...other}\n        >",
          "<Box className=\"p-6\">",
          "</Box>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<HTMLInputElement>",
          "<Box sx={{ width: '100%', maxWidth: 1200, mx: 'auto', p: 2 }}>",
          "<Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<SessionTimeoutProps>",
          "<= warningMs && remaining >",
          "<= 0) {\n                handleAutoLogout();\n            }\n        }, 1000);\n\n        return () =>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<typeof getAuditStatistics>",
          "<typeof getSecurityStatistics>",
          "<typeof getSecurityStatus>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<string, any>",
          "<RelatedEntitiesSectionProps>",
          "<ContactIcon className=\"h-5 w-5\" />"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<CloudSlashIcon className=\"w-5 h-5\" />",
          "<SignalSlashIcon className=\"w-5 h-5\" />",
          "<CloudIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<StepComponentProps>",
          "<number>",
          "<Setting>"
        ]
      }
    ],
    "Alert": [
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<Alert severity=\"info\" className=\"mt-2\">"
        ]
      },
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Alert variant=\"info\" className=\"mb-6\">"
        ]
      },
      {
        "file": "src/settings/SettingsCreate.tsx",
        "context": [
          "<Alert variant=\"warning\" className=\"mt-2\">",
          "<Alert variant=\"error\" className=\"mt-2\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": []
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Alert severity=\"info\">",
          "<Alert severity=\"warning\" sx={{ mt: 2 }}>",
          "<Alert severity=\"error\">"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"m-3\">"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"m-3\">",
          "<Alert variant=\"warning\" className=\"mb-3\">",
          "<Alert severity=\"info\">"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<AlertIcon className=\"w-5 h-5 text-blue-600\" />",
          "<AlertIcon className=\"w-5 h-5 text-gray-500\" />",
          "<Alert variant=\"error\" className=\"m-8\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Alert severity=\"error\" className=\"m-8\">"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Alert severity=\"info\">",
          "<Alert variant=\"error\" className=\"mb-3\">"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"m-3\">",
          "<Alert variant=\"info\" className=\"mb-3\">"
        ]
      },
      {
        "file": "src/reminders/ReminderShow.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"mb-2\">",
          "<Alert variant=\"warning\" className=\"mb-2\">",
          "<Alert variant=\"success\">"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"m-4\">"
        ]
      },
      {
        "file": "src/reminders/ReminderCreate.tsx",
        "context": [
          "<Alert variant=\"info\" className=\"mt-4\">"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Alert severity=\"success\" sx={{ mb: 2 }}>",
          "<Alert severity=\"error\" sx={{ mb: 2 }}>"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Alert severity=\"success\" sx={{ mb: 2 }}>",
          "<Alert severity=\"error\" sx={{ mb: 2 }}>"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Alert variant=\"info\">"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Alert variant=\"success\" className=\"mb-2\">",
          "<Alert variant=\"error\" className=\"mb-2\">",
          "<Alert variant=\"info\" className=\"mt-1\">"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<Alert\n                                    severity=\"info\"\n                                    action={\n                                        <Box className=\"flex h-full items-center p-0\">",
          "<Alert severity=\"error\">",
          "<Alert severity=\"success\">"
        ]
      },
      {
        "file": "src/common/LazyLoadingUtils.tsx",
        "context": [
          "<Alert\n            severity=\"error\"\n            icon={<ExclamationTriangleIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Alert\n                    onClose={handleSnackbarClose}\n                    severity={snackbar.severity}\n                    variant=\"filled\"\n                    sx={{ width: '100%' }}\n                >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Alert variant=\"warning\" className=\"mb-4\">",
          "<Alert\n                            variant=\"error\"\n                            className=\"mt-4\"\n                            action={\n                                <IconButton\n                                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Alert\n                            severity=\"error\"\n                            className=\"mt-4\"\n                            action={\n                                <IconButton\n                                    color=\"inherit\"\n                                    size=\"small\"\n                                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Alert severity=\"success\">"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Alert variant=\"error\" className=\"mb-4\">"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Alert severity=\"info\" className=\"mt-2\">",
          "<Alert severity=\"info\">"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Alert severity=\"error\">"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<Alert severity=\"info\">",
          "<Alert severity=\"error\">"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<Alert variant=\"warning\" className=\"mb-6\">"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Alert severity=\"info\" sx={{ mt: 2 }}>",
          "<Alert severity=\"info\">"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<Alert severity=\"warning\" sx={{ mb: 2 }}>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Alert severity=\"error\" sx={{ mb: 2 }}>",
          "<Alert severity=\"warning\" sx={{ mb: 2 }}>"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<Alert\n                        variant={getStatusColor()}\n                        className=\"mb-4 flex items-center gap-2\"\n                    >",
          "<Alert severity=\"error\">",
          "<Alert variant=\"info\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<Alert\n            severity={severity}\n            sx={{ mb: 2 }}\n            action={\n                collapsible ? (\n                    <button\n                        onClick={() =>",
          "<AlertTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Alert variant=\"success\" className=\"mt-4\">",
          "<Alert variant=\"error\" className=\"mt-4\">",
          "<Alert variant=\"info\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Alert severity=\"info\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BasicInfoStep.tsx",
        "context": [
          "<Alert severity=\"info\" className=\"mt-4\">"
        ]
      }
    ],
    "CircularProgress": [
      {
        "file": "src/visits/VisitCreate.tsx",
        "context": [
          "<CircularProgress\n                                        size=\"sm\"\n                                        className=\"ml-1\"\n                                    />",
          "<CircularProgress size=\"xs\" />"
        ]
      },
      {
        "file": "src/reminders/ReminderDashboard.tsx",
        "context": [
          "<CircularProgress />"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<CircularProgress size={24} color=\"inherit\" />"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<CircularProgress size={24} color=\"inherit\" />"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<CircularProgress className=\"h-4 w-4\" />"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<CircularProgress size={20} />"
        ]
      },
      {
        "file": "src/common/LoadingComponent.tsx",
        "context": [
          "<CircularProgress className=\"w-6 h-6\" />",
          "<CircularProgress\n                    className={`text-blue-600 ${\n                        isMobile ? 'w-8 h-8' : 'w-12 h-12'\n                    }`}\n                />"
        ]
      },
      {
        "file": "src/organizations/common/ViewModeRenderer.tsx",
        "context": [
          "<CircularProgress size={40} />"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<CircularProgress className=\"h-6 w-6\" />"
        ]
      },
      {
        "file": "src/organizations/form/steps/BasicInfoStep.tsx",
        "context": [
          "<CircularProgress size={12} />"
        ]
      }
    ],
    "Avatar": [
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Avatar\n                            src={avatarPreview || undefined}\n                            className={`${isMobile\n                                ? 'w-20 h-20 text-2xl'\n                                : 'w-25 h-25 text-3xl'\n                                }`}\n                        >"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Avatar {...commonProps}>"
        ]
      },
      {
        "file": "src/interactions/InteractionTypeSelector.tsx",
        "context": [
          "<Avatar\n                    className=\"w-8 h-8\"\n                    style={{\n                        backgroundColor: color,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Avatar\n                                className={compact ? 'w-8 h-8' : 'w-10 h-10'}\n                                style={{\n                                    backgroundColor: typeColor,\n                                }}\n                            >"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Avatar\n                        className=\"w-12 h-12\"\n                        style={{\n                            backgroundColor: typeColor,\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": []
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Avatar\n                            aria-label={`${interaction.type?.label || 'Unknown Type'} interaction`}\n                            className=\"w-8 h-8 mr-1.5\"\n                            style={{\n                                backgroundColor: typeColor,\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": []
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Avatar\n                                    size=\"2xl\"\n                                    className=\"mr-6 font-semibold text-3xl\"\n                                    style={{\n                                        backgroundColor: getInfluenceColor(),\n                                        color: getContrastText(\n                                            getInfluenceColor()\n                                        ),\n                                    }}\n                                >"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<Avatar\n                        size=\"lg\"\n                        className=\"mr-4 font-semibold\"\n                        style={{\n                            backgroundColor: getInfluenceColor(),\n                            color: getContrastText(getInfluenceColor()),\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/companies/CompanyAvatar.tsx",
        "context": [
          "<Avatar\n            src={record.logo}\n            alt={record.name}\n            width={width}\n            height={height}\n        >"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<Avatar\n                                src={org.logo}\n                                sx={{ width: 40, height: 40 }}\n                            >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<Avatar\n                                        src={org.logo}\n                                        sx={{ width: 40, height: 40 }}\n                                    >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Avatar\n                        src={organization.logo}\n                        sx={{\n                            width: { xs: 28, sm: 32 },\n                            height: { xs: 28, sm: 32 },\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Avatar\n                                    src={org.logo}\n                                    className=\"w-12 h-12\"\n                                >"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Avatar\n                        src={isVisible && record.logo ? record.logo : undefined}\n                        className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-600\"\n                        onLoad={() =>"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Avatar\n                        src={avatarPreview || undefined}\n                        sx={{\n                            width: isMobile ? 80 : 100,\n                            height: isMobile ? 80 : 100,\n                            fontSize: isMobile ? '2rem' : '2.5rem',\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Avatar className=\"w-10 h-10 bg-gray-600\">"
        ]
      },
      {
        "file": "src/components/dashboard/UpcomingMeetings.tsx",
        "context": [
          "<Avatar\n                                        name={meeting.contact}\n                                        size=\"sm\"\n                                        className=\"w-6 h-6\"\n                                    />"
        ]
      },
      {
        "file": "src/components/dashboard/RecentProducts.tsx",
        "context": [
          "<Avatar\n                                        name={product.addedBy}\n                                        size=\"sm\"\n                                        className=\"w-5 h-5\"\n                                    />"
        ]
      },
      {
        "file": "src/components/dashboard/RecentInteractions.tsx",
        "context": [
          "<Avatar\n                                        name={interaction.contact}\n                                        size=\"sm\"\n                                        className=\"w-6 h-6\"\n                                    />"
        ]
      },
      {
        "file": "src/components/dashboard/RecentContacts.tsx",
        "context": [
          "<Avatar\n                                name={contact.name}\n                                size=\"md\"\n                                className=\"w-10 h-10 flex-shrink-0\"\n                            />"
        ]
      },
      {
        "file": "src/components/dashboard/KanbanBoard.tsx",
        "context": [
          "<Avatar\n                name={opportunity.assignedTo}\n                size=\"sm\"\n                className=\"w-5 h-5\"\n            />"
        ]
      },
      {
        "file": "src/components/dashboard/APriorityOrganizations.tsx",
        "context": [
          "<Avatar\n                                        name={org.name}\n                                        size=\"md\"\n                                        className=\"w-10 h-10\"\n                                    />"
        ]
      }
    ],
    "IconButton": [
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<IconButton\n                                    className=\"text-blue-600 min-h-11 min-w-11\"\n                                    aria-label=\"upload picture\"\n                                >",
          "<IconButton\n                                    className=\"text-red-600 min-h-11 min-w-11\"\n                                    onClick={handleRemoveAvatar}\n                                >",
          "<IconButton\n                                            onClick={handleAddPrincipal}\n                                            className=\"text-blue-600 min-h-11 min-w-11\"\n                                            disabled={!newPrincipal.trim()}\n                                        >"
        ]
      },
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<IconButton\n                                            size=\"small\"\n                                            className=\"text-blue-600\"\n                                        >",
          "<IconButton\n                            onClick={handleCloseDetails}\n                            size=\"small\"\n                            className=\"text-gray-600\"\n                        >"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<IconButton\n                        size=\"small\"\n                        className=\"text-gray-500 ml-auto\"\n                        component={Link}\n                        to={'#'}\n                        onClick={handleOpen}\n                    >"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<IconButton\n                            size=\"small\"\n                            onClick={e =>",
          "<IconButton\n                                                        onClick={() =>",
          "<IconButton\n                                                        onClick={() =>"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<IconButton onClick={handleToggle} size=\"small\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<IconButton\n                                                        edge=\"end\"\n                                                        color=\"error\"\n                                                        onClick={() =>",
          "<IconButton\n                                                                    color=\"error\"\n                                                                    onClick={() =>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<IconButton\n                                                        size=\"small\"\n                                                        onClick={() =>",
          "<IconButton size=\"small\">"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<IconButton size=\"small\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<IconButton\n                                            size=\"small\"\n                                            onClick={() =>",
          "<IconButton\n                                            size=\"small\"\n                                            onClick={() =>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<IconButton\n                                                                        size=\"small\"\n                                                                        onClick={() =>",
          "<IconButton size=\"small\">",
          "<IconButton size=\"small\">"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<IconButton onClick={onClose} size=\"small\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<IconButton\n                                size=\"small\"\n                                onClick={handleView}\n                                className=\"min-w-11 min-h-11 p-2\"\n                            >",
          "<IconButton\n                                size=\"small\"\n                                onClick={handleEdit}\n                                className=\"min-w-11 min-h-11 p-2\"\n                            >"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<IconButton\n                                size=\"small\"\n                                onClick={handleEnterEditMode}\n                            >",
          "<IconButton size=\"small\" onClick={handleDelete}>"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<IconButton size=\"small\">"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<IconButton\n                                                    size=\"small\"\n                                                    href={`tel:${org.phone}`}\n                                                    onClick={e =>",
          "<IconButton\n                                                size=\"small\"\n                                                onClick={e =>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<IconButton\n                                                    size=\"small\"\n                                                    href={`tel:${reminder.organization.phone}`}\n                                                    onClick={e =>",
          "<IconButton\n                                                    size=\"small\"\n                                                    href={`mailto:${reminder.contact.email}`}\n                                                    onClick={e =>",
          "<IconButton size=\"small\">"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<IconButton\n                                        onClick={handlePhoneClick}\n                                        className=\"min-w-[44px] min-h-[44px] bg-blue-600 text-white hover:bg-blue-700\"\n                                        aria-label=\"Call contact\"\n                                    >",
          "<IconButton\n                                        onClick={handleEmailClick}\n                                        className=\"min-w-[44px] min-h-[44px] bg-blue-600 text-white hover:bg-blue-700\"\n                                        aria-label=\"Email contact\"\n                                    >",
          "<IconButton\n                                        onClick={handleLinkedInClick}\n                                        className=\"min-w-[44px] min-h-[44px] bg-blue-600 text-white hover:bg-blue-700\"\n                                        aria-label=\"LinkedIn profile\"\n                                    >"
        ]
      },
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<IconButton\n                            size=\"small\"\n                            onClick={handlePhoneClick}\n                            className=\"min-w-[44px] min-h-[44px] text-blue-600 hover:text-blue-800\"\n                            aria-label=\"Call contact\"\n                        >",
          "<IconButton\n                            size=\"small\"\n                            onClick={handleEmailClick}\n                            className=\"min-w-[44px] min-h-[44px] text-blue-600 hover:text-blue-800\"\n                            aria-label=\"Email contact\"\n                        >",
          "<IconButton\n                            size=\"small\"\n                            onClick={handleLinkedInClick}\n                            className=\"min-w-[44px] min-h-[44px] text-blue-600 hover:text-blue-800\"\n                            aria-label=\"LinkedIn profile\"\n                        >"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<IconButton\n                                size=\"small\"\n                                aria-label={`View ${org.name}`}\n                                sx={{ minHeight: '32px', minWidth: '32px' }}\n                            >",
          "<IconButton\n                                size=\"small\"\n                                aria-label={`Edit ${org.name}`}\n                                sx={{ minHeight: '32px', minWidth: '32px' }}\n                            >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<IconButton\n                                        size=\"small\"\n                                        aria-label={`View ${org.name}`}\n                                        sx={{\n                                            minHeight: '32px',\n                                            minWidth: '32px',\n                                        }}\n                                    >",
          "<IconButton\n                                        size=\"small\"\n                                        aria-label={`Edit ${org.name}`}\n                                        sx={{\n                                            minHeight: '32px',\n                                            minWidth: '32px',\n                                        }}\n                                    >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<IconButton\n                    onClick={onClose}\n                    className=\"absolute top-4 left-4 bg-white min-w-[44px] min-h-[44px] hover:bg-gray-50 shadow-md rounded-full\"\n                >",
          "<IconButton \n                            onClick={() =>",
          "<IconButton\n                        onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<IconButton\n                                    size=\"small\"\n                                    onClick={e =>",
          "<IconButton\n                                    size=\"small\"\n                                    onClick={e =>",
          "<IconButton\n                                size=\"small\"\n                                onClick={e =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<IconButton\n                            size=\"small\"\n                            aria-label={`Edit ${org.name}`}\n                            className=\"min-h-9 min-w-9\"\n                        >"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<IconButton\n                                        size=\"small\"\n                                        onClick={() =>",
          "<IconButton\n                        onClick={() =>",
          "<IconButton\n                            onClick={clearAllFilters}\n                            aria-label=\"clear all filters\"\n                            size=\"small\"\n                            sx={{ minHeight: '40px', minWidth: '40px' }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<IconButton\n                                        onClick={handleResetForm}\n                                        className=\"min-w-11 min-h-11\"\n                                    >",
          "<IconButton\n                                        onClick={onClose}\n                                        className=\"min-w-11 min-h-11\"\n                                    >",
          "<IconButton\n                                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<IconButton\n                                    onClick={onClose}\n                                    className=\"min-w-[44px] min-h-[44px]\"\n                                >",
          "<IconButton\n                                    color=\"inherit\"\n                                    size=\"small\"\n                                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<IconButton\n                                                onClick={handleGPSCapture}\n                                                disabled={gpsCapturing}\n                                                color=\"primary\"\n                                                className=\"mt-2 min-w-12 min-h-12\"\n                                                aria-label=\"Capture GPS location\"\n                                            >"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<IconButton\n                        {...buttonProps}\n                        className={`min-w-11 min-h-11 relative ${\n                            isListening ? 'text-gray-600' : 'text-blue-600'\n                        }`}\n                        aria-label={\n                            isListening\n                                ? 'Stop voice input'\n                                : 'Start voice input'\n                        }\n                    >",
          "<IconButton\n                disabled\n                size={buttonSize}\n                className=\"min-w-11 min-h-11\"\n            >",
          "<IconButton\n                                size=\"large\"\n                                onClick={\n                                    isListening ? stopListening : startListening\n                                }\n                                className={`w-20 h-20 ${\n                                    isListening\n                                        ? 'bg-gray-200 hover:bg-gray-400'\n                                        : 'bg-blue-100 hover:bg-blue-600'\n                                }`}\n                            >"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<IconButton\n                                    size=\"small\"\n                                    onClick={onScanQR}\n                                    edge=\"end\"\n                                    sx={{ mr: 0.5 }}\n                                    aria-label=\"Scan QR code\"\n                                >",
          "<IconButton\n                                        size=\"small\"\n                                        onClick={handleCopy}\n                                        edge=\"end\"\n                                        sx={{ mr: 0.5 }}\n                                        aria-label=\"Copy to clipboard\"\n                                    >",
          "<IconButton\n                                    size=\"small\"\n                                    onClick={togglePasswordVisibility}\n                                    edge=\"end\"\n                                    sx={{ mr: 0.5 }}\n                                    aria-label={\n                                        showPassword\n                                            ? 'Hide password'\n                                            : 'Show password'\n                                    }\n                                >"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<IconButton\n                                size=\"small\"\n                                onClick={handlePhoneClick}\n                                className=\"min-w-11 min-h-11 text-blue-600 hover:bg-gray-100\"\n                                aria-label=\"Call organization\"\n                            >",
          "<IconButton\n                                size=\"small\"\n                                onClick={handleEmailClick}\n                                className=\"min-w-11 min-h-11 text-blue-600 hover:bg-gray-100\"\n                                aria-label=\"Email account manager\"\n                            >",
          "<IconButton\n                                size=\"small\"\n                                onClick={handleWebsiteClick}\n                                className=\"min-w-11 min-h-11 text-blue-600 hover:bg-gray-100\"\n                                aria-label=\"Visit website\"\n                            >"
        ]
      },
      {
        "file": "src/organizations/common/MobileFAB.tsx",
        "context": [
          "<IconButton\n                    aria-label=\"Create organization\"\n                    disabled={disabled}\n                    onClick={onCreateOrganization}\n                    onMouseDown={handleMouseDown}\n                    onMouseUp={handleMouseUp}\n                    onTouchStart={handleTouchStart}\n                    onTouchEnd={handleTouchEnd}\n                    className={`w-16 h-16 bg-blue-600 hover:bg-blue-700 text-white shadow-lg transition-all duration-100 ${\n                        isPressed ? 'scale-95' : 'scale-100'\n                    } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n                >",
          "<IconButton\n                    aria-label=\"Create options\"\n                    disabled={disabled}\n                    onClick={open ? handleClose : handleOpen}\n                    onMouseDown={handleMouseDown}\n                    onMouseUp={handleMouseUp}\n                    onTouchStart={handleTouchStart}\n                    onTouchEnd={handleTouchEnd}\n                    className={`w-16 h-16 bg-blue-600 hover:bg-blue-700 text-white shadow-lg transition-all duration-100 ${\n                        isPressed ? 'scale-95' : 'scale-100'\n                    } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n                >",
          "<IconButton\n                                    onClick={action.onClick}\n                                    className={`w-12 h-12 ${action.color} shadow-lg transition-all duration-100 hover:scale-105 active:scale-95`}\n                                    aria-label={action.name}\n                                >"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<IconButton\n                                color=\"primary\"\n                                aria-label=\"upload picture\"\n                                component=\"span\"\n                                sx={{ minHeight: 44, minWidth: 44 }}\n                            >",
          "<IconButton\n                                color=\"error\"\n                                onClick={handleRemoveAvatar}\n                                sx={{ minHeight: 44, minWidth: 44 }}\n                            >",
          "<IconButton\n                            onClick={handleAddPrincipal}\n                            color=\"primary\"\n                            disabled={!newPrincipal.trim()}\n                            sx={{ minHeight: 44, minWidth: 44 }}\n                        >"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={toggleShowCurrentPassword}\n                                    edge=\"end\"\n                                    sx={{ minHeight: 44, minWidth: 44 }}\n                                >",
          "<IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={toggleShowNewPassword}\n                                    edge=\"end\"\n                                    sx={{ minHeight: 44, minWidth: 44 }}\n                                >",
          "<IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={toggleShowConfirmPassword}\n                                    edge=\"end\"\n                                    sx={{ minHeight: 44, minWidth: 44 }}\n                                >"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<IconButton onClick={loadSecurityMetrics}>",
          "<IconButton size=\"small\" onClick={exportAuditLog}>"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": []
      }
    ],
    "Stack": [
      {
        "file": "src/users/UserCreate.tsx",
        "context": [
          "<Stack>",
          "<Stack\n                        direction={isMobile ? 'column' : 'row'}\n                        spacing={2}\n                        className=\"mb-6\"\n                    >"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<Stack gap={2}>",
          "<Stack direction=\"row\" spacing={1}>"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Stack\n                    direction=\"row\"\n                    className=\"justify-between items-center\"\n                >",
          "<Stack direction=\"row\" className=\"space-x-1 items-center\">"
        ]
      },
      {
        "file": "src/sales/SalesList.tsx",
        "context": [
          "<Stack className=\"flex-row gap-1\">",
          "<Stack className=\"gap-4\">"
        ]
      },
      {
        "file": "src/sales/SalesInputs.tsx",
        "context": [
          "<Stack className=\"gap-1 w-full\">"
        ]
      },
      {
        "file": "src/products/ProductList.tsx",
        "context": [
          "<Stack\n                    direction=\"row\"\n                    spacing={1}\n                    className=\"mb-2 flex-wrap gap-1\"\n                >"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Stack spacing={1} alignItems=\"center\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityShow.tsx",
        "context": [
          "<Stack\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        spacing={2}\n                        mb={3}\n                    >",
          "<Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityList.tsx",
        "context": [
          "<Stack direction=\"row\" component=\"div\">",
          "<Stack sx={{ width: '100%' }}>"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<Stack direction=\"row\" spacing={0.5}>",
          "<Stack spacing={1} className=\"mb-4\">"
        ]
      },
      {
        "file": "src/notes/NotesIterator.tsx",
        "context": [
          "<Stack className=\"mt-2 gap-1\">"
        ]
      },
      {
        "file": "src/notes/NoteInputs.tsx",
        "context": [
          "<Stack className=\"gap-1 flex-row justify-end\">",
          "<Stack className=\"gap-1 mt-1\">",
          "<Stack className=\"flex-row space-x-2\">"
        ]
      },
      {
        "file": "src/notes/NoteCreate.tsx",
        "context": [
          "<Stack className=\"flex-row\">"
        ]
      },
      {
        "file": "src/notes/NoteAttachments.tsx",
        "context": [
          "<Stack className=\"flex-col\">",
          "<Stack key={index} className=\"flex-row items-center\">"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-1 items-center w-full\">",
          "<Stack\n                    className=\"pt-2 flex [&_p:empty]:min-h-3\"\n                >"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Stack\n                direction={linkPosition === 'right' ? 'row' : 'column'}\n                alignItems={'center'}\n                gap={linkPosition === 'right' ? 2 : 0.5}\n                borderRadius={1}\n                p={props.backgroundImageColor ? 1 : 0}\n                sx={{\n                    backgroundColor:\n                        props.backgroundImageColor || 'transparent',\n                }}\n            >",
          "<Stack gap={2} justifyContent=\"center\">",
          "<Stack\n                        direction=\"row\"\n                        justifyContent=\"center\"\n                        {...getRootProps()}\n                        sx={{\n                            backgroundColor: 'rgba(0, 0, 0, 0.05)',\n                            cursor: 'pointer',\n                        }}\n                    >"
        ]
      },
      {
        "file": "src/misc/ContactOption.tsx",
        "context": [
          "<Stack direction=\"row\" gap={1} alignItems=\"center\">",
          "<Stack>"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Stack spacing={3}>"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Stack sx={{ height: '100dvh', p: 2 }}>",
          "<Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    gap={1}\n                    sx={{ mb: 2 }}\n                >",
          "<Stack sx={{ height: '100%' }}>"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Stack sx={{ height: '100dvh', p: 2 }}>",
          "<Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    gap={1}\n                    sx={{ mb: 2 }}\n                >",
          "<Stack sx={{ height: '100%' }}>"
        ]
      },
      {
        "file": "src/interactions/InteractionTypeSelector.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-1.5 items-center\">"
        ]
      },
      {
        "file": "src/interactions/InteractionTimeline.tsx",
        "context": [
          "<Stack className=\"space-y-2 p-2\">",
          "<Stack className=\"flex-row justify-between items-start mb-1\">",
          "<Stack className=\"space-y-0.5 mb-1\">"
        ]
      },
      {
        "file": "src/interactions/InteractionShow.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-2 items-start\">",
          "<Stack className=\"flex-row space-x-2 items-center\">",
          "<Stack className=\"space-y-3\">"
        ]
      },
      {
        "file": "src/interactions/InteractionList.tsx",
        "context": [
          "<Stack className=\"space-y-2\">"
        ]
      },
      {
        "file": "src/interactions/InteractionInputs.tsx",
        "context": [
          "<Stack className=\"gap-6\">",
          "<Stack className=\"space-y-2\">",
          "<Stack className=\"space-y-2\">"
        ]
      },
      {
        "file": "src/interactions/InteractionFilters.tsx",
        "context": [
          "<Stack className=\"space-y-2 p-2 min-w-60\">"
        ]
      },
      {
        "file": "src/interactions/InteractionEmpty.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-2\">"
        ]
      },
      {
        "file": "src/interactions/InteractionCard.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-1\">",
          "<Stack className=\"space-y-1 mb-2\">",
          "<Stack className=\"space-y-0.5\">"
        ]
      },
      {
        "file": "src/deals/DealColumn.tsx",
        "context": [
          "<Stack alignItems=\"center\">"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">"
        ]
      },
      {
        "file": "src/dashboard/PrincipalPerformanceChart.tsx",
        "context": [
          "<Stack className=\"flex flex-row space-x-1 flex-wrap mb-2\">",
          "<Stack className=\"space-y-1\">"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Stack\n                    direction=\"row\"\n                    spacing={1}\n                    flexWrap=\"wrap\"\n                    sx={{ mb: 2 }}\n                >",
          "<Stack spacing={0.5}>",
          "<Stack direction=\"row\" spacing={0.5}>"
        ]
      },
      {
        "file": "src/dashboard/InteractionMetricsCard.tsx",
        "context": [
          "<Stack className=\"flex flex-row items-center justify-center space-x-1\">",
          "<Stack className=\"flex flex-row items-center justify-center space-x-1\">",
          "<Stack className=\"flex flex-row space-x-1 flex-wrap mb-2\">"
        ]
      },
      {
        "file": "src/dashboard/FoodServiceDashboard.tsx",
        "context": [
          "<Stack className=\"space-y-6\">",
          "<Stack className=\"space-y-6\">",
          "<Stack className=\"space-y-6\">"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Stack spacing={3}>",
          "<Stack spacing={3}>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<Stack direction=\"row\" spacing={1} sx={{ mb: 2 }}>",
          "<Stack spacing={0.5}>",
          "<Stack direction=\"row\" spacing={0.5}>"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Stack spacing={2}>",
          "<Stack spacing={2}>",
          "<Stack spacing={3}>"
        ]
      },
      {
        "file": "src/contacts/ContactList.tsx",
        "context": [
          "<Stack direction=\"row\">",
          "<Stack sx={{ width: '100%' }}>"
        ]
      },
      {
        "file": "src/contacts/ContactInputs.tsx",
        "context": [
          "<Stack spacing={4} className=\"p-2\">",
          "<Stack spacing={4} direction={isMobile ? 'column' : 'row'}>",
          "<Stack spacing={4} className=\"flex-1\">"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<Stack spacing={2}>",
          "<Stack gap={2}>"
        ]
      },
      {
        "file": "src/contacts/ContactEmpty.tsx",
        "context": [
          "<Stack\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={3}\n            style={{\n                height: `calc(100dvh - ${appbarHeight}px)`,\n            }}\n        >",
          "<Stack spacing={0} alignItems=\"center\">",
          "<Stack spacing={2} direction=\"row\">"
        ]
      },
      {
        "file": "src/companies/CompanyAside.tsx",
        "context": [
          "<Stack className=\"ml-4 w-64 min-w-64 gap-2\">",
          "<Stack className=\"flex-row gap-1\">",
          "<Stack>"
        ]
      },
      {
        "file": "src/common/LoadingComponent.tsx",
        "context": [
          "<Stack spacing={1}>",
          "<Stack direction=\"row\" spacing={1}>",
          "<Stack className=\"flex-1\">"
        ]
      },
      {
        "file": "src/common/LazyLoadingUtils.tsx",
        "context": [
          "<Stack direction=\"row\" spacing={2} justifyContent=\"center\">"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<Stack gap={4}>",
          "<Stack gap={4}>",
          "<Stack gap={4}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Stack spacing={2}>",
          "<Stack direction=\"row\" spacing={1} className=\"mb-2\">",
          "<Stack direction=\"row\" spacing={1} className=\"mt-2\">"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": [
          "<Stack direction=\"row\" component=\"div\">",
          "<Stack sx={{ width: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">"
        ]
      },
      {
        "file": "src/organizations/form/OrganizationInputs.tsx",
        "context": [
          "<Stack gap={4} p={1}>",
          "<Stack gap={4} direction={isMobile ? 'column' : 'row'}>",
          "<Stack gap={4} flex={1}>"
        ]
      },
      {
        "file": "src/organizations/form/MobileOrganizationCreate.tsx",
        "context": [
          "<Stack spacing={3}>"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<Stack className=\"gap-3\">"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<Stack spacing={3}>",
          "<Stack>",
          "<Stack direction={isMobile ? 'column' : 'row'} spacing={2}>"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<Stack spacing={3}>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Stack spacing={2}>",
          "<Stack spacing={2}>",
          "<Stack spacing={2}>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Stack className=\"flex-row space-x-1 items-center mt-1\">",
          "<Stack className=\"flex-row space-x-1 items-center mt-1\">",
          "<Stack className=\"flex-row space-x-1 items-center mt-1\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Stack gap={8}>",
          "<Stack direction=\"row\" gap={2} className=\"flex-wrap\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Stack gap={8}>",
          "<Stack direction=\"row\" gap={2} className=\"flex-wrap\">",
          "<Stack gap={4}>"
        ]
      },
      {
        "file": "src/organizations/form/steps/BasicInfoStep.tsx",
        "context": [
          "<Stack gap={6}>"
        ]
      }
    ],
    "List": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<List className=\"max-h-96 overflow-auto\">",
          "<ListItem\n                                        className=\"cursor-pointer hover:bg-gray-50 transition-colors\"\n                                        onClick={() =>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<List\n                                        dense\n                                        className=\"max-h-75 overflow-auto\"\n                                    >",
          "<ListItem key={index}>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<List>",
          "<ListItem key={session.id} divider>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<List>",
          "<ListItem key={test.id} divider>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<List dense>",
          "<ListItem\n                                                        className={`${isMobile ? 'flex-col items-start' : 'flex-row items-center'} py-2`}\n                                                    >",
          "<ListItemText\n                                                            primary={\n                                                                setting.description\n                                                            }\n                                                            secondary={\n                                                                <Box\n                                                                    display=\"flex\"\n                                                                    alignItems=\"center\"\n                                                                    gap={1}\n                                                                >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<List>",
          "<ListItem\n                                        key={alert.id}\n                                        divider\n                                        className={`${alert.resolved\n                                                ? 'opacity-60 bg-transparent'\n                                                : 'opacity-100 bg-white'\n                                            }`}\n                                    >",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<List>",
          "<ListItem>",
          "<ListItemText\n                                            primary=\"Event Type\"\n                                            secondary={selectedEvent.eventType}\n                                        />"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<List dense>",
          "<ListItem>",
          "<ListItemText primary=\"Google Authenticator (iOS/Android)\" />"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<List dense>",
          "<ListItem>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<List dense>",
          "<ListItem key={type} className=\"px-0\">",
          "<ListItemText\n                                                    primary={type\n                                                        .replace('_', ' ')\n                                                        .toUpperCase()}\n                                                    secondary={`${count} visits (${percentage}%)`}\n                                                />"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<List dense={isMobile} sx={{ p: 0 }}>",
          "<ListItem\n                                    button\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 36 }}>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<List dense={isMobile} sx={{ p: 0 }}>",
          "<ListItem\n                                    button\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 36 }}>"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<List dense className=\"pt-0\">",
          "<ListItem disablePadding>",
          "<ListItemButton\n                            component={RouterLink}\n                            to={`/contacts/${contact.id}/show`}\n                            state={{ from: location.pathname }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<List dense>",
          "<ListItem\n                                key={index}\n                                button\n                                onClick={() =>",
          "<ListItemText\n                                    primary={suggestion}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                    }}\n                                />"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<List>",
          "<ListItem>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<List dense>",
          "<ListItem>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<ListItem className=\"min-h-16 px-4 py-2 hover:bg-gray-50 cursor-pointer\">",
          "<ListItemIcon>",
          "<ListItemText\n                        primary={`${contact.firstName} ${contact.lastName}`}\n                        secondary={\n                            <Stack className=\"flex-row space-x-1 items-center mt-1\">"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<List dense>",
          "<ListItem>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<List dense sx={{ pt: 0 }}>",
          "<ListItem\n                                    key={`error-${index}`}\n                                    sx={{\n                                        pl: 0,\n                                        cursor: onFieldClick\n                                            ? 'pointer'\n                                            : 'default',\n                                        '&:hover': onFieldClick\n                                            ? {\n                                                backgroundColor:\n                                                    'rgba(0,0,0,0.04)',\n                                            }\n                                            : {},\n                                        borderRadius: 1,\n                                    }}\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 24 }}>"
        ]
      }
    ],
    "ListItem": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<ListItem\n                                        className=\"cursor-pointer hover:bg-gray-50 transition-colors\"\n                                        onClick={() =>",
          "<ListItemIcon>",
          "<ListItemText\n                                            primary={\n                                                <Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<ListItem key={index}>",
          "<ListItemIcon>",
          "<ListItemText\n                                                        primary={`Row ${detail.row}: ${detail.message}`}\n                                                        secondary={\n                                                            detail.data\n                                                                ? JSON.stringify(\n                                                                      detail.data,\n                                                                      null,\n                                                                      2\n                                                                  )\n                                                                : undefined\n                                                        }\n                                                    />"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<ListItem key={session.id} divider>",
          "<ListItemIcon>",
          "<ListItemText\n                                                primary={\n                                                    <Box\n                                                        display=\"flex\"\n                                                        alignItems=\"center\"\n                                                        gap={1}\n                                                    >"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<ListItem key={test.id} divider>",
          "<ListItemIcon>",
          "<ListItemText\n                                                primary={\n                                                    <Box className=\"flex items-center gap-1\">"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<ListItem\n                                                        className={`${isMobile ? 'flex-col items-start' : 'flex-row items-center'} py-2`}\n                                                    >",
          "<ListItemText\n                                                            primary={\n                                                                setting.description\n                                                            }\n                                                            secondary={\n                                                                <Box\n                                                                    display=\"flex\"\n                                                                    alignItems=\"center\"\n                                                                    gap={1}\n                                                                >",
          "<ListItemSecondaryAction\n                                                            className={`${isMobile ? 'static mt-1' : 'absolute right-4 -translate-y-1/2'}`}\n                                                        >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<ListItem\n                                        key={alert.id}\n                                        divider\n                                        className={`${alert.resolved\n                                                ? 'opacity-60 bg-transparent'\n                                                : 'opacity-100 bg-white'\n                                            }`}\n                                    >",
          "<ListItemIcon>",
          "<ListItemText\n                                            primary={\n                                                <Box className=\"flex items-center gap-1\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<ListItem>",
          "<ListItemText\n                                            primary=\"Event Type\"\n                                            secondary={selectedEvent.eventType}\n                                        />",
          "<ListItem>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<ListItem>",
          "<ListItemText primary=\"Google Authenticator (iOS/Android)\" />",
          "<ListItem>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<ListItem>",
          "<ListItemIcon>",
          "<ListItemText\n                                                primary=\"Critical Risk\"\n                                                secondary=\"0 identified risks\"\n                                            />"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<ListItem key={type} className=\"px-0\">",
          "<ListItemText\n                                                    primary={type\n                                                        .replace('_', ' ')\n                                                        .toUpperCase()}\n                                                    secondary={`${count} visits (${percentage}%)`}\n                                                />"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<ListItem\n                                    button\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 36 }}>",
          "<ListItemText\n                                        primary={\n                                            <Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<ListItem\n                                    button\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 36 }}>",
          "<ListItemText\n                                        primary={\n                                            <Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ListItem disablePadding>",
          "<ListItemButton\n                            component={RouterLink}\n                            to={`/contacts/${contact.id}/show`}\n                            state={{ from: location.pathname }}\n                        >",
          "<ListItemAvatar>"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<ListItem\n                                key={index}\n                                button\n                                onClick={() =>",
          "<ListItemText\n                                    primary={suggestion}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                    }}\n                                />"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<ListItem>",
          "<ListItemIcon>",
          "<ListItemText\n                                primary=\"Account Status\"\n                                secondary={\n                                    <Chip\n                                        label={\n                                            user.isActive\n                                                ? 'Active'\n                                                : 'Inactive'\n                                        }\n                                        color={\n                                            user.isActive ? 'success' : 'error'\n                                        }\n                                        size=\"small\"\n                                    />"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<ListItem>",
          "<ListItemIcon>",
          "<ListItemText\n                                        primary=\"Secure Connection\"\n                                        secondary={\n                                            metrics.httpsStatus.isSecure\n                                                ? 'HTTPS Enabled'\n                                                : 'HTTP Only'\n                                        }\n                                    />"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<ListItem className=\"min-h-16 px-4 py-2 hover:bg-gray-50 cursor-pointer\">",
          "<ListItemIcon>",
          "<ListItemText\n                        primary={`${contact.firstName} ${contact.lastName}`}\n                        secondary={\n                            <Stack className=\"flex-row space-x-1 items-center mt-1\">"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<ListItem>",
          "<ListItemIcon>",
          "<ListItemText\n                                    primary=\"Current User\"\n                                    secondary={sessionSummary.user}\n                                />"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<ListItem\n                                    key={`error-${index}`}\n                                    sx={{\n                                        pl: 0,\n                                        cursor: onFieldClick\n                                            ? 'pointer'\n                                            : 'default',\n                                        '&:hover': onFieldClick\n                                            ? {\n                                                backgroundColor:\n                                                    'rgba(0,0,0,0.04)',\n                                            }\n                                            : {},\n                                        borderRadius: 1,\n                                    }}\n                                    onClick={() =>",
          "<ListItemIcon sx={{ minWidth: 24 }}>",
          "<ListItemText\n                                        primary={error.message}\n                                        secondary={`Field: ${error.field}`}\n                                        primaryTypographyProps={{\n                                            fontSize: '0.875rem',\n                                        }}\n                                        secondaryTypographyProps={{\n                                            fontSize: '0.75rem',\n                                        }}\n                                    />"
        ]
      }
    ],
    "ListItemIcon": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": []
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<ListItemIcon sx={{ minWidth: 36 }}>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<ListItemIcon sx={{ minWidth: 36 }}>"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<ListItemIcon>",
          "<ListItemIcon>",
          "<ListItemIcon>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<ListItemIcon sx={{ minWidth: 24 }}>",
          "<ListItemIcon sx={{ minWidth: 24 }}>"
        ]
      }
    ],
    "ListItemText": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<ListItemText\n                                            primary={\n                                                <Box className=\"flex items-center gap-2\">"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<ListItemText\n                                                        primary={`Row ${detail.row}: ${detail.message}`}\n                                                        secondary={\n                                                            detail.data\n                                                                ? JSON.stringify(\n                                                                      detail.data,\n                                                                      null,\n                                                                      2\n                                                                  )\n                                                                : undefined\n                                                        }\n                                                    />"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<ListItemText\n                                                primary={\n                                                    <Box\n                                                        display=\"flex\"\n                                                        alignItems=\"center\"\n                                                        gap={1}\n                                                    >"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<ListItemText\n                                                primary={\n                                                    <Box className=\"flex items-center gap-1\">"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<ListItemText\n                                                            primary={\n                                                                setting.description\n                                                            }\n                                                            secondary={\n                                                                <Box\n                                                                    display=\"flex\"\n                                                                    alignItems=\"center\"\n                                                                    gap={1}\n                                                                >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<ListItemText\n                                            primary={\n                                                <Box className=\"flex items-center gap-1\">",
          "<ListItemText\n                                        primary=\"Enable MFA for all admin users\"\n                                        secondary=\"2 admin users still need to set up multi-factor authentication\"\n                                    />",
          "<ListItemText\n                                        primary=\"Review password policies\"\n                                        secondary=\"Consider reducing password expiration to 60 days\"\n                                    />"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<ListItemText\n                                            primary=\"Event Type\"\n                                            secondary={selectedEvent.eventType}\n                                        />",
          "<ListItemText\n                                            primary=\"Category\"\n                                            secondary={\n                                                selectedEvent.eventCategory\n                                            }\n                                        />",
          "<ListItemText\n                                            primary=\"User\"\n                                            secondary={\n                                                selectedEvent.userEmail ||\n                                                'System'\n                                            }\n                                        />"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<ListItemText primary=\"Google Authenticator (iOS/Android)\" />",
          "<ListItemText primary=\"Authy (iOS/Android/Desktop)\" />",
          "<ListItemText primary=\"Microsoft Authenticator (iOS/Android)\" />"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<ListItemText\n                                                primary=\"Critical Risk\"\n                                                secondary=\"0 identified risks\"\n                                            />",
          "<ListItemText\n                                                primary=\"High Risk\"\n                                                secondary=\"2 identified risks\"\n                                            />",
          "<ListItemText\n                                                primary=\"Medium Risk\"\n                                                secondary=\"5 identified risks\"\n                                            />"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<ListItemText\n                                                    primary={type\n                                                        .replace('_', ' ')\n                                                        .toUpperCase()}\n                                                    secondary={`${count} visits (${percentage}%)`}\n                                                />"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<ListItemText\n                                        primary={\n                                            <Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<ListItemText\n                                        primary={\n                                            <Box\n                                                display=\"flex\"\n                                                alignItems=\"center\"\n                                                gap={1}\n                                            >"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ListItemText\n                                primary={`${contact.first_name} ${contact.last_name}`}\n                                secondary={\n                                    <>",
          "<ListItemText\n                                primary={deal.name}\n                                secondary={\n                                    <>"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<ListItemText\n                                    primary={suggestion}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                    }}\n                                />"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<ListItemText primary=\"Share\" />",
          "<ListItemText primary=\"Delete\" />"
        ]
      },
      {
        "file": "src/login/components/SecuritySettings.tsx",
        "context": [
          "<ListItemText\n                                primary=\"Account Status\"\n                                secondary={\n                                    <Chip\n                                        label={\n                                            user.isActive\n                                                ? 'Active'\n                                                : 'Inactive'\n                                        }\n                                        color={\n                                            user.isActive ? 'success' : 'error'\n                                        }\n                                        size=\"small\"\n                                    />",
          "<ListItemText\n                                primary=\"Last Login\"\n                                secondary={formatLastLogin(user.lastLoginAt)}\n                            />",
          "<ListItemText\n                                primary=\"Account Created\"\n                                secondary={`${new Date(user.createdAt).toLocaleDateString()} (${getAccountAge(user.createdAt)} ago)`}\n                            />"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<ListItemText\n                                        primary=\"Secure Connection\"\n                                        secondary={\n                                            metrics.httpsStatus.isSecure\n                                                ? 'HTTPS Enabled'\n                                                : 'HTTP Only'\n                                        }\n                                    />",
          "<ListItemText\n                                        primary=\"Content Security Policy\"\n                                        secondary={\n                                            metrics.httpsStatus.hasCSP\n                                                ? 'Configured'\n                                                : 'Not Set'\n                                        }\n                                    />",
          "<ListItemText\n                                        primary=\"Strict Transport Security\"\n                                        secondary={\n                                            metrics.httpsStatus.hasHSTS\n                                                ? 'Enabled'\n                                                : 'Disabled'\n                                        }\n                                    />"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<ListItemText\n                        primary={`${contact.firstName} ${contact.lastName}`}\n                        secondary={\n                            <Stack className=\"flex-row space-x-1 items-center mt-1\">",
          "<ListItemText\n                        primary={\n                            opportunity.name || `Opportunity #${opportunity.id}`\n                        }\n                        secondary={\n                            <Stack className=\"flex-row space-x-1 items-center mt-1\">",
          "<ListItemText\n                        primary={interaction.subject}\n                        secondary={\n                            <Stack className=\"flex-row space-x-1 items-center mt-1\">"
        ]
      },
      {
        "file": "src/components/auth/AuthStatusIndicator.tsx",
        "context": [
          "<ListItemText\n                                    primary=\"Current User\"\n                                    secondary={sessionSummary.user}\n                                />",
          "<ListItemText\n                                    primary=\"Last Activity\"\n                                    secondary={sessionSummary.sessionAge}\n                                />",
          "<ListItemText\n                                        primary=\"Mobile Device\"\n                                        secondary={\n                                            sessionSummary.deviceInfo\n                                                .isStandalone\n                                                ? 'PWA Mode Active'\n                                                : 'Browser Mode'\n                                        }\n                                    />"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<ListItemText\n                                        primary={error.message}\n                                        secondary={`Field: ${error.field}`}\n                                        primaryTypographyProps={{\n                                            fontSize: '0.875rem',\n                                        }}\n                                        secondaryTypographyProps={{\n                                            fontSize: '0.75rem',\n                                        }}\n                                    />",
          "<ListItemText\n                                        primary={warning.message}\n                                        secondary={`Field: ${warning.field}`}\n                                        primaryTypographyProps={{\n                                            fontSize: '0.875rem',\n                                        }}\n                                        secondaryTypographyProps={{\n                                            fontSize: '0.75rem',\n                                        }}\n                                    />"
        ]
      }
    ],
    "Table": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Table className=\"w-full\">",
          "<TableBody>",
          "<TableRow className=\"border-b border-gray-100\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TabletIcon className=\"w-5 h-5\" />",
          "<TableContainer component={Paper}>",
          "<Table>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableContainer component={Paper}>",
          "<Table size={compactView ? 'small' : 'medium'}>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableContainer\n                                        component={Paper}\n                                        variant=\"outlined\"\n                                    >",
          "<Table size=\"small\">",
          "<TableHead>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Table stickyHeader>",
          "<TableHead>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<Table>",
          "<TableHeader>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableHead>",
          "<TableRow>",
          "<TableCell sx={{ minWidth: 200 }}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableContainer component={Paper} sx={{ mt: 2 }}>",
          "<Table stickyHeader aria-label=\"organizations table\">",
          "<TableHead>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<TableContainer component={Paper} elevation={0}>",
          "<Table size=\"small\">",
          "<TableHead>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableContainer component={Paper} sx={{ maxHeight: 400 }}>",
          "<Table stickyHeader size=\"small\">",
          "<TableHead>"
        ]
      }
    ],
    "TableBody": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<TableBody>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TableBody>",
          "<TableBody>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableBody>",
          "<TableBody>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableBody>",
          "<TableBody>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<TableBody>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<TableBody>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableBody>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<TableBody>",
          "<TableBody>",
          "<TableBody>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableBody>"
        ]
      }
    ],
    "TableCell": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<TableCell className=\"font-semibold p-3\">",
          "<TableCell className=\"p-3\">",
          "<TableCell className=\"font-semibold p-3\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<TableCell className=\"min-w-37 font-semibold\">",
          "<TableCell\n                                        key={product.id}\n                                        className=\"min-w-50 font-semibold text-center\"\n                                    >",
          "<TableCell className=\"font-semibold\">"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableCell sx={{ minWidth: 200 }}>",
          "<TableCell sx={{ minWidth: 120 }}>",
          "<TableCell sx={{ minWidth: 150 }}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableCell>",
          "<TableCell>",
          "<TableCell>"
        ]
      }
    ],
    "TableHead": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": []
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TableHead>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableHead>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableHead>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<TableHead>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<TableHeader>",
          "<TableHead>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableHead>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableHead>"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<TableHead>",
          "<TableHead>",
          "<TableHead>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableHead>"
        ]
      }
    ],
    "TableRow": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<TableRow className=\"border-b border-gray-100\">",
          "<TableRow className=\"border-b border-gray-100\">",
          "<TableRow className=\"border-b border-gray-100\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TableRow>",
          "<TableRow key={session.id}>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableRow>",
          "<TableRow key={event.id}>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableRow>",
          "<TableRow key={req.id}>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<TableRow>",
          "<TableRow>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<TableRow>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableRow>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableRow>",
          "<TableRow\n                            key={org.id}\n                            hover\n                            sx={{\n                                '&:last-child td, &:last-child th': {\n                                    border: 0,\n                                },\n                                cursor: 'pointer',\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<TableRow>",
          "<TableRow key={index}>",
          "<TableRow>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableRow>",
          "<TableRow key={event.id}>"
        ]
      }
    ],
    "Paper": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Paper className=\"border border-gray-200 p-4 rounded-lg\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": []
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": []
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Paper className=\"p-2\">",
          "<Paper className=\"p-2\">",
          "<Paper className=\"p-2\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": []
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Paper className=\"p-2 text-center\">",
          "<Paper className=\"p-2 bg-gray-50\">"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Paper className=\"p-2\">",
          "<Paper className=\"p-2\">",
          "<Paper className=\"p-2\">"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Paper className=\"overflow-auto max-h-[70vh]\">"
        ]
      },
      {
        "file": "src/opportunities/OpportunityColumn.tsx",
        "context": [
          "<Paper\n            sx={{\n                minWidth: 300,\n                maxWidth: 300,\n                backgroundColor: stage.color,\n                borderRadius: 2,\n                overflow: 'hidden',\n            }}\n        >"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Paper sx={{ p: 3 }}>",
          "<Paper sx={{ p: 3 }}>",
          "<Paper sx={{ width: '100%' }}>"
        ]
      },
      {
        "file": "src/companies/GridList.tsx",
        "context": [
          "<Paper className=\"h-50 w-48 flex flex-col bg-gray-200\" key={key} />"
        ]
      },
      {
        "file": "src/companies/CompanyCard.tsx",
        "context": [
          "<Paper\n                style={{\n                    height: 200,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'space-between',\n                    padding: '1rem',\n                }}\n                elevation={elevation}\n            >"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": []
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": []
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Paper\n                elevation={2}\n                sx={{\n                    p: { xs: 1.5, sm: 2 },\n                    mb: 2,\n                    background: `linear-gradient(135deg, ${column.color}dd, ${column.color})`,\n                    color: 'white',\n                    textAlign: 'center',\n                    borderRadius: 2,\n                }}\n            >",
          "<Paper\n                            sx={{\n                                p: { xs: 2, sm: 3 },\n                                textAlign: 'center',\n                                backgroundColor: isOver\n                                    ? `${column.color}15`\n                                    : 'grey.50',\n                                border: '2px dashed',\n                                borderColor: isOver ? column.color : 'grey.300',\n                                borderRadius: 2,\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                gap: 1,\n                                transition: 'all 0.2s ease-in-out',\n                                transform: isOver ? 'scale(1.02)' : 'scale(1)',\n                            }}\n                        >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Paper\n                    elevation={isModal ? 0 : 2}\n                    className={`p-4 sm:p-6 max-w-full md:max-w-3xl relative ${isModal ? 'mx-0' : 'mx-auto'}`}\n                >"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Paper\n                    elevation={2}\n                    className=\"p-4 sm:p-6 max-w-full md:max-w-3xl mx-auto relative\"\n                >"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Paper\n                        elevation={0}\n                        className=\"p-4 min-h-32 bg-gray-50 border border-gray-200 rounded-lg mb-6\"\n                    >"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<Paper\n                    elevation={4}\n                    sx={{\n                        position: 'absolute',\n                        top: '100%',\n                        left: 0,\n                        right: 0,\n                        zIndex: theme.zIndex.tooltip,\n                        maxHeight: 200,\n                        overflow: 'auto',\n                        mt: 0.5,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": []
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": []
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Paper elevation={1} className=\"p-6\">",
          "<Paper elevation={1} className=\"p-6\">",
          "<Paper elevation={1} className=\"p-6 bg-gray-50\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Paper elevation={1} className=\"p-6\">",
          "<Paper elevation={1} className=\"p-6\">",
          "<Paper elevation={1} className=\"p-6\">"
        ]
      }
    ],
    "Tooltip": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": []
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<Tooltip title=\"Create task\">"
        ]
      },
      {
        "file": "src/settings/PrincipalManager.tsx",
        "context": [
          "<Tooltip title={record?.active ? 'Deactivate' : 'Activate'}>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Tooltip title=\"Revoke Session\">"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Tooltip title=\"Run Test\">",
          "<Tooltip title=\"View Details\">"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Tooltip title=\"View Details\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Tooltip title=\"View Details\">",
          "<Tooltip title=\"View Details\">"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Tooltip title=\"View Details\">"
        ]
      },
      {
        "file": "src/notes/Note.tsx",
        "context": [
          "<Tooltip title=\"Edit note\">",
          "<Tooltip title=\"Delete note\">"
        ]
      },
      {
        "file": "src/misc/Status.tsx",
        "context": [
          "<Tooltip title={(statusObject as any)?.label ?? ''} placement=\"top\">"
        ]
      },
      {
        "file": "src/companies/CompanyAside.tsx",
        "context": [
          "<Tooltip title={record.linkedin_url}>",
          "<Tooltip key={index} title={urlWithProtocol}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Tooltip title=\"Call\">",
          "<Tooltip title=\"Email\">",
          "<Tooltip title=\"Edit\">"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Tooltip title=\"Reset to original values\">",
          "<Tooltip title=\"Close\">"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Tooltip title=\"Close\">"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Tooltip title=\"Call Organization\">",
          "<Tooltip title=\"Email Manager\">",
          "<Tooltip title=\"Visit Website\">"
        ]
      },
      {
        "file": "src/organizations/common/MobileFAB.tsx",
        "context": [
          "<Tooltip title={action.name} placement=\"left\">",
          "<Tooltip\n            title={title}\n            placement=\"left\"\n            arrow\n            enterTouchDelay={300}\n            leaveTouchDelay={1500}\n            className=\"tooltip-mobile\"\n        >"
        ]
      },
      {
        "file": "src/components/security/SecurityStatusBar.tsx",
        "context": [
          "<Tooltip content={getTooltipContent()}>",
          "<Tooltip content={getTooltipContent()}>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Tooltip title=\"Refresh\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Tooltip title=\"Capture current GPS location\">"
        ]
      }
    ],
    "Dialog": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<Dialog\n                open={showDetailDialog}\n                onClose={handleCloseDetails}\n                maxWidth=\"md\"\n                fullWidth\n                fullScreen={isMobile}\n            >",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<Dialog\n                    open={open}\n                    onClose={() =>",
          "<DialogCloseButton onClose={() =>",
          "<DialogTitle id=\"form-dialog-title\">"
        ]
      },
      {
        "file": "src/tags/TagDialog.tsx",
        "context": [
          "<Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >",
          "<DialogCloseButton onClose={handleClose} />",
          "<DialogTitle id=\"form-dialog-title\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Dialog\n                open={revokeDialogOpen}\n                onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Dialog\n                open={saveDialogOpen}\n                onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Dialog\n                open={detailsOpen}\n                onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Dialog\n                open={setupDialogOpen}\n                onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Dialog\n                open={dialogOpen}\n                onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>",
          "<DialogContent>",
          "<Dialog open={open} onClose={onClose} maxWidth=\"sm\">"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<Dialog\n            open={props.open}\n            onClose={props.onClose}\n            fullWidth\n            maxWidth=\"md\"\n        >",
          "<DialogCloseButton onClose={props.onClose} />",
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<Dialog open={open} maxWidth=\"md\" fullWidth>",
          "<DialogCloseButton onClose={handleClose} />",
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<Dialog\n                open={showMap}\n                onClose={() =>",
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationList.tsx",
        "context": [
          "<Dialog\n                open={showMap}\n                onClose={() =>",
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": [
          "<Dialog\n                    open={showMap}\n                    onClose={() =>",
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<Dialog\n                    open={showUnsavedChangesDialog}\n                    onClose={handleUnsavedChangesCancel}\n                    maxWidth=\"sm\"\n                    fullWidth\n                >",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<Dialog\n                open={isDialogOpen}\n                onClose={handleDialogClose}\n                maxWidth=\"sm\"\n                fullWidth\n                className=\"[&_.dialog-paper]:rounded-xl [&_.dialog-paper]:min-h-96\"\n            >",
          "<DialogContent className=\"p-6\">"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<Dialog\n            open={isWarningOpen}\n            onClose={() =>",
          "<DialogTitle>",
          "<DialogContent>"
        ]
      }
    ],
    "DialogTitle": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<DialogTitle id=\"form-dialog-title\">"
        ]
      },
      {
        "file": "src/tags/TagDialog.tsx",
        "context": [
          "<DialogTitle id=\"form-dialog-title\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<DialogTitle>",
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<DialogTitle>",
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<DialogTitle>"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<DialogTitle>"
        ]
      }
    ],
    "DialogContent": [
      {
        "file": "src/users/UserActivityTracker.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/tags/TagDialog.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<DialogContent>",
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/products/ProductComparison.tsx",
        "context": [
          "<DialogContent>",
          "<DialogContent>",
          "<DialogContent dividers>"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": [
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationList.tsx",
        "context": [
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/list/EnhancedOrganizationList.tsx",
        "context": [
          "<DialogContent sx={{ p: 0, height: '100%' }}>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<DialogContent>"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<DialogContent className=\"p-6\">"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<DialogContent>"
        ]
      }
    ],
    "Modal": [
      {
        "file": "src/tasks/TaskEdit.tsx",
        "context": [
          "<Modal isOpen={open} onClose={close} title=\"Edit task\">"
        ]
      }
    ],
    "DialogActions": [
      {
        "file": "src/tasks/AddTask.tsx",
        "context": [
          "<DialogActions className=\"p-0\">"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<DialogActions>",
          "<DialogActions>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<DialogActions>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<DialogActions>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<DialogActions>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<DialogActions>"
        ]
      },
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": [
          "<DialogActions sx={{ p: 0 }}>"
        ]
      },
      {
        "file": "src/contacts/ContactImportDialog.tsx",
        "context": [
          "<DialogActions className=\"p-0 justify-start\">"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<DialogActions>"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<DialogActions sx={{ p: 2, gap: 1 }}>"
        ]
      }
    ],
    "Grid": [
      {
        "file": "src/settings/SettingsEdit.tsx",
        "context": [
          "<Grid container spacing={2}>",
          "<Grid item xs={12} md={6}>",
          "<Grid item xs={12} md={6}>"
        ]
      },
      {
        "file": "src/settings/SettingsCreate.tsx",
        "context": [
          "<Grid container spacing={isMobile ? 2 : 3}>",
          "<Grid item xs={12} md={6}>",
          "<Grid item xs={12} md={6}>"
        ]
      },
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} md={6}>",
          "<Grid item xs={12} md={6}>"
        ]
      },
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid\n                                item\n                                xs={12}\n                                sm={6}\n                                md={4}\n                                lg={3}\n                                key={categoryKey}\n                            >",
          "<Grid container spacing={2}>"
        ]
      },
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<Grid container spacing={2} className=\"mb-3\">",
          "<Grid item xs={12} sm={4}>",
          "<Grid item xs={12} sm={4}>"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": []
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} lg={6} key={category}>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Grid container spacing={3} className=\"mb-8\">",
          "<Grid item xs={12} sm={6} md={3}>",
          "<Grid item xs={12} sm={6} md={3}>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Grid container spacing={2}>",
          "<Grid item xs={12} sm={6} md={3}>",
          "<Grid item xs={12} sm={6} md={3}>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Grid container spacing={1}>",
          "<Grid item xs={6} key={index}>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Grid container spacing={3} className=\"mb-3\">",
          "<Grid item xs={12} sm={6} md={3}>",
          "<Grid item xs={12} sm={6} md={3}>"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<Grid container spacing={2}>",
          "<Grid item xs={12} sm={6} md={4} lg={2} key={index}>"
        ]
      },
      {
        "file": "src/dashboard/FoodBrokerDashboard.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} xl={8}>",
          "<Grid item xs={12} xl={4}>"
        ]
      },
      {
        "file": "src/contacts/ContactShow.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} md={8}>",
          "<Grid item xs={12} md={4}>"
        ]
      },
      {
        "file": "src/contacts/ContactListContent.tsx",
        "context": [
          "<Grid container spacing={2} className=\"mt-2 mb-4 px-2\">",
          "<Grid\n                    item\n                    key={record.id}\n                    xs={12}\n                    sm={6}\n                    md={4}\n                    lg={4}\n                    xl={3}\n                    className=\"flex\"\n                >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<Grid\n            container\n            spacing={isMobile ? 2 : 3}\n            className=\"mt-2 mb-6\"\n        >",
          "<Grid\n                    item\n                    xs={12}\n                    sm={6}\n                    md={6}\n                    lg={4}\n                    xl={3}\n                    key={org.id}\n                >"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Grid container spacing={2}>",
          "<Grid item xs={12} sm={6} md={3}>",
          "<Grid item xs={12} sm={6} md={3}>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Grid container spacing={2}>",
          "<Grid item xs={12} sm={6} md={3}>",
          "<Grid item xs={12} sm={6} md={3}>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Grid container spacing={2} sx={{ mb: 3 }}>",
          "<Grid item xs={12} md={3}>",
          "<Grid item xs={12} md={3}>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ContactDetailsStep.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} md={6}>",
          "<Grid item xs={12} md={6}>"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Grid container spacing={3}>",
          "<Grid item xs={12} md={6}>",
          "<Grid item xs={12} md={6}>"
        ]
      }
    ],
    "LinearProgress": [
      {
        "file": "src/settings/SettingsBulkOperations.tsx",
        "context": [
          "<LinearProgress\n                                variant=\"determinate\"\n                                value={progress}\n                                className=\"mb-1\"\n                            />"
        ]
      },
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<LinearProgress\n                                variant=\"determinate\"\n                                value={overallScore}\n                                className=\"flex-grow h-2\"\n                                className={\n                                    overallScore >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<LinearProgress\n                                variant=\"determinate\"\n                                value={metrics?.securityScore || 0}\n                                className=\"mt-1\"\n                            />"
        ]
      },
      {
        "file": "src/opportunities/OpportunityCard.tsx",
        "context": [
          "<LinearProgress\n                            variant=\"determinate\"\n                            value={probability}\n                            className={`h-1 rounded bg-gray-200 ${\n                                probability >"
        ]
      },
      {
        "file": "src/dashboard/VisitTrends.tsx",
        "context": [
          "<LinearProgress\n                                                variant=\"determinate\"\n                                                value={\n                                                    (count / maxDailyVisits) *\n                                                    100\n                                                }\n                                                className=\"flex-1 mx-2 h-1.5 rounded-full\"\n                                            />",
          "<LinearProgress\n                                                        variant=\"determinate\"\n                                                        value={percentage}\n                                                        className=\"w-15 h-1 rounded-full\"\n                                                    />"
        ]
      },
      {
        "file": "src/dashboard/QuickStatsSection.tsx",
        "context": [
          "<LinearProgress\n                            variant=\"determinate\"\n                            value={progress}\n                            className=\"h-1.5 rounded\"\n                            style={{\n                                backgroundColor: getColorValue(color, 'light'),\n                            }}\n                        />"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<LinearProgress sx={{ mt: 2 }} />",
          "<LinearProgress\n                        variant=\"determinate\"\n                        value={metrics.loadingProgress}\n                        sx={{ height: 4, borderRadius: 2 }}\n                    />"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationEdit.tsx",
        "context": [
          "<LinearProgress\n                            variant=\"determinate\"\n                            value={progressPercentage}\n                            className=\"h-2 rounded-full\"\n                        />"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<LinearProgress\n                            variant=\"determinate\"\n                            value={progressPercentage}\n                            className=\"h-2 rounded-full\"\n                        />"
        ]
      },
      {
        "file": "src/organizations/common/VoiceInput.tsx",
        "context": [
          "<LinearProgress\n                            variant=\"determinate\"\n                            value={(duration / maxDuration) * 100}\n                            className=\"mb-6 rounded h-1.5\"\n                        />",
          "<LinearProgress\n                                variant=\"determinate\"\n                                value={confidence * 100}\n                                className=\"mt-1 h-1 rounded\"\n                            />"
        ]
      },
      {
        "file": "src/interactions/components/PerformanceDashboard.tsx",
        "context": [
          "<LinearProgress className=\"flex-grow\" />",
          "<LinearProgress />"
        ]
      },
      {
        "file": "src/components/security/SessionTimeout.tsx",
        "context": [
          "<LinearProgress\n                        variant=\"determinate\"\n                        value={warningProgress}\n                        color={warningProgress >"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<LinearProgress />",
          "<LinearProgress\n                                variant=\"determinate\"\n                                value={securityScore}\n                                sx={{ mt: 1 }}\n                                color={\n                                    securityScore >"
        ]
      }
    ],
    "Badge": [
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Badge badgeContent={stats.total} className=\"text-blue-600\" max={99}>"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Badge\n                                    badgeContent={metrics?.activeThreats || 0}\n                                    color=\"error\"\n                                    invisible={\n                                        (metrics?.activeThreats || 0) === 0\n                                    }\n                                >",
          "<Badge\n                                    badgeContent={unResolvedAlerts.length}\n                                    color=\"error\"\n                                >"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<Badge\n                                            badgeContent={\n                                                org.priority ? (\n                                                    <PriorityIcon\n                                                        sx={{\n                                                            fontSize: 12,\n                                                            color:\n                                                                org.priorityColor ||\n                                                                '#2563eb', // blue-600\n                                                        }}\n                                                    />"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": []
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Badge\n                    badgeContent={Object.values(filters).filter(Boolean).length}\n                    color=\"secondary\"\n                >"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Badge\n                    badgeContent={organizations.length}\n                    color=\"secondary\"\n                    sx={{\n                        '& .MuiBadge-badge': {\n                            backgroundColor: 'rgba(255,255,255,0.9)',\n                            color: column.color,\n                            fontWeight: 600,\n                        },\n                    }}\n                >"
        ]
      },
      {
        "file": "src/components/security/SecurityStatusBar.tsx",
        "context": [
          "<Badge\n                    badgeContent={securityStatus.issues.length || null}\n                    color=\"error\"\n                    variant=\"dot\"\n                    invisible={securityStatus.level === 'high'}\n                >",
          "<Badge\n                    badgeContent={securityStatus.issues.length || null}\n                    color=\"error\"\n                    variant=\"dot\"\n                    invisible={securityStatus.level === 'high'}\n                >"
        ]
      },
      {
        "file": "src/components/navigation/RelatedEntitiesSection.tsx",
        "context": [
          "<Badge\n                                content={`${opportunity.probability}%`}\n                                className={`absolute -top-1 -right-1 text-xs h-4 min-w-6 ${opportunity.probability >"
        ]
      }
    ],
    "Fab": [
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Fab\n                className=\"bg-blue-500 text-white fixed bottom-4 md:bottom-8 right-4 md:right-8 min-w-14 min-h-14\"\n                aria-label=\"add setting\"\n                onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationMapView.tsx",
        "context": [
          "<Fab\n                        color=\"secondary\"\n                        size=\"medium\"\n                        onClick={() =>"
        ]
      }
    ],
    "Tab": [
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<TabPanelProps>",
          "<Tabs\n                    value={activeTab}\n                    onChange={handleTabChange}\n                    variant={isMobile ? 'scrollable' : 'standard'}\n                    scrollButtons=\"auto\"\n                >",
          "<Tab label=\"Overview\" />"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Tabs\n                        value={currentTab}\n                        onChange={(_, newValue) =>",
          "<Tab\n                            label={\n                                <Badge\n                                    badgeContent={unResolvedAlerts.length}\n                                    color=\"error\"\n                                >",
          "<Tab label=\"Audit Log\" />"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Tabs\n                        value={currentTab}\n                        onChange={(_, newValue) =>",
          "<Tab label=\"Compliance Frameworks\" />",
          "<Tab label=\"Security Controls\" />"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Tabs\n                            value={tabValue}\n                            onChange={handleTabChange}\n                            aria-label=\"profile tabs\"\n                            variant={isMobile ? 'scrollable' : 'standard'}\n                            scrollButtons={isMobile ? 'auto' : false}\n                        >",
          "<Tab\n                                label=\"Profile\"\n                                {...a11yProps(0)}\n                                sx={{\n                                    minHeight: 48,\n                                    fontSize: isMobile ? '0.875rem' : '1rem',\n                                }}\n                            />",
          "<Tab\n                                label=\"Password\"\n                                {...a11yProps(1)}\n                                sx={{\n                                    minHeight: 48,\n                                    fontSize: isMobile ? '0.875rem' : '1rem',\n                                }}\n                            />"
        ]
      }
    ],
    "Tabs": [
      {
        "file": "src/settings/SettingsAdminDashboard.tsx",
        "context": [
          "<Tabs\n                    value={activeTab}\n                    onChange={handleTabChange}\n                    variant={isMobile ? 'scrollable' : 'standard'}\n                    scrollButtons=\"auto\"\n                >"
        ]
      },
      {
        "file": "src/security/SecurityDashboard.tsx",
        "context": [
          "<Tabs\n                        value={currentTab}\n                        onChange={(_, newValue) =>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Tabs\n                        value={currentTab}\n                        onChange={(_, newValue) =>"
        ]
      },
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Tabs\n                            value={tabValue}\n                            onChange={handleTabChange}\n                            aria-label=\"profile tabs\"\n                            variant={isMobile ? 'scrollable' : 'standard'}\n                            scrollButtons={isMobile ? 'auto' : false}\n                        >"
        ]
      }
    ],
    "TableContainer": [
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<TableContainer component={Paper}>",
          "<TableContainer component={Paper}>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TableContainer component={Paper}>",
          "<TableContainer component={Paper}>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<TableContainer\n                                        component={Paper}\n                                        variant=\"outlined\"\n                                    >",
          "<TableContainer component={Paper} variant=\"outlined\">"
        ]
      },
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableContainer component={Paper}>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableContainer component={Paper} sx={{ mt: 2 }}>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<TableContainer component={Paper} sx={{ maxHeight: 400 }}>"
        ]
      }
    ],
    "ListItemSecondaryAction": [
      {
        "file": "src/security/SessionManager.tsx",
        "context": [
          "<ListItemSecondaryAction>"
        ]
      },
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<ListItemSecondaryAction\n                                                            className={`${isMobile ? 'static mt-1' : 'absolute right-4 -translate-y-1/2'}`}\n                                                        >"
        ]
      },
      {
        "file": "src/dashboard/NeedsVisitList.tsx",
        "context": [
          "<ListItemSecondaryAction>"
        ]
      },
      {
        "file": "src/dashboard/FollowUpRemindersWidget.tsx",
        "context": [
          "<ListItemSecondaryAction>"
        ]
      },
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ListItemSecondaryAction>",
          "<ListItemSecondaryAction>"
        ]
      }
    ],
    "Accordion": [
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<Accordion key={category} defaultExpanded={!compactView}>",
          "<AccordionSummary expandIcon={<ExpandIcon className=\"w-5 h-5\" />",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Accordion defaultExpanded>",
          "<AccordionSummary expandIcon={<ExpandMoreIcon className=\"w-5 h-5\" />",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<Accordion key={framework.id}>",
          "<AccordionSummary expandIcon={<ExpandIcon />",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Accordion>",
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<Accordion\n                expanded={expandedSection === 'overview'}\n                onChange={(_, isExpanded) =>",
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionDetails>"
        ]
      }
    ],
    "AccordionSummary": [
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<AccordionSummary expandIcon={<ExpandIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<AccordionSummary expandIcon={<ExpandMoreIcon className=\"w-5 h-5\" />",
          "<AccordionSummary expandIcon={<ExpandMoreIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<AccordionSummary expandIcon={<ExpandIcon />"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionSummary expandIcon={<ChevronDownIcon className=\"w-5 h-5\" />",
          "<AccordionSummary expandIcon={<ExpandMoreIcon />"
        ]
      }
    ],
    "AccordionDetails": [
      {
        "file": "src/security/SecurityTestSuite.tsx",
        "context": [
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<AccordionDetails>",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/security/ComplianceDocumentation.tsx",
        "context": [
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<AccordionDetails>",
          "<AccordionDetails>",
          "<AccordionDetails>"
        ]
      },
      {
        "file": "src/components/security/SecurityDashboard.tsx",
        "context": [
          "<AccordionDetails>",
          "<AccordionDetails>",
          "<AccordionDetails>"
        ]
      }
    ],
    "Switch": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Switch\n                                checked={currentValue === 'true'}\n                                onChange={e =>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<Switch\n                                                checked={settings.gpsEnabled}\n                                                onChange={handleSettingChange(\n                                                    'gpsEnabled'\n                                                )}\n                                            />",
          "<Switch\n                                                checked={\n                                                    settings.gpsHighAccuracy\n                                                }\n                                                onChange={handleSettingChange(\n                                                    'gpsHighAccuracy'\n                                                )}\n                                                disabled={!settings.gpsEnabled}\n                                            />",
          "<Switch\n                                                checked={\n                                                    settings.gpsAutoCapture\n                                                }\n                                                onChange={handleSettingChange(\n                                                    'gpsAutoCapture'\n                                                )}\n                                                disabled={!settings.gpsEnabled}\n                                            />"
        ]
      }
    ],
    "TextField": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<TextField\n                        type=\"number\"\n                        value={currentValue}\n                        onChange={e =>",
          "<TextField\n                        value={currentValue}\n                        onChange={e =>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TextField\n                                label=\"Date From\"\n                                type=\"date\"\n                                value={filters.dateFrom}\n                                onChange={e =>",
          "<TextField\n                                label=\"Date To\"\n                                type=\"date\"\n                                value={filters.dateTo}\n                                onChange={e =>"
        ]
      },
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<TextField\n                            label=\"Verification Code\"\n                            value={verificationCode}\n                            onChange={e =>"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<TextField\n                            {...register('newPassword', {\n                                required: 'Password is required',\n                                minLength: {\n                                    value: 8,\n                                    message:\n                                        'Password must be at least 8 characters',\n                                },\n                                pattern: {\n                                    value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/,\n                                    message:\n                                        'Password must contain uppercase, lowercase, and number',\n                                },\n                            })}\n                            label=\"New Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            fullWidth\n                            autoComplete=\"new-password\"\n                            autoFocus={!isMobile}\n                            error={!!errors.newPassword}\n                            helperText={\n                                errors.newPassword?.message ||\n                                'Minimum 8 characters with uppercase, lowercase, and number'\n                            }\n                            inputProps={{\n                                style: { fontSize: isMobile ? '16px' : '14px' },\n                            }}\n                        />",
          "<TextField\n                            {...register('confirmPassword', {\n                                required: 'Please confirm your password',\n                                validate: value =>"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<TextField\n                            {...register('email', {\n                                required: 'Email is required',\n                                pattern: {\n                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                    message:\n                                        'Please enter a valid email address',\n                                },\n                            })}\n                            label=\"Email address\"\n                            type=\"email\"\n                            variant=\"outlined\"\n                            fullWidth\n                            autoComplete=\"email\"\n                            inputMode=\"email\"\n                            autoFocus={!isMobile}\n                            error={!!errors.email}\n                            helperText={errors.email?.message}\n                            inputProps={{\n                                style: { fontSize: isMobile ? '16px' : '14px' },\n                            }}\n                        />"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<TextField\n                        className=\"search-input\"\n                        placeholder=\"Search organizations...\"\n                        value={searchQuery}\n                        onChange={e =>",
          "<TextField {...params} label=\"Segment\" />"
        ]
      },
      {
        "file": "src/login/components/ProfileForm.tsx",
        "context": [
          "<TextField\n                        {...register('firstName', {\n                            required: 'First name is required',\n                            minLength: {\n                                value: 2,\n                                message:\n                                    'First name must be at least 2 characters',\n                            },\n                        })}\n                        label=\"First Name\"\n                        fullWidth\n                        error={!!errors.firstName}\n                        helperText={errors.firstName?.message}\n                        inputProps={{\n                            style: { fontSize: isMobile ? '16px' : '14px' },\n                        }}\n                    />",
          "<TextField\n                        {...register('lastName', {\n                            required: 'Last name is required',\n                            minLength: {\n                                value: 2,\n                                message:\n                                    'Last name must be at least 2 characters',\n                            },\n                        })}\n                        label=\"Last Name\"\n                        fullWidth\n                        error={!!errors.lastName}\n                        helperText={errors.lastName?.message}\n                        inputProps={{\n                            style: { fontSize: isMobile ? '16px' : '14px' },\n                        }}\n                    />",
          "<TextField\n                    label=\"Email\"\n                    value={user.email}\n                    fullWidth\n                    disabled\n                    helperText=\"Email cannot be changed\"\n                    inputProps={{\n                        style: { fontSize: isMobile ? '16px' : '14px' },\n                    }}\n                />"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<TextField\n                    {...register('currentPassword', {\n                        required: 'Current password is required',\n                    })}\n                    label=\"Current Password\"\n                    type={showCurrentPassword ? 'text' : 'password'}\n                    fullWidth\n                    autoComplete=\"current-password\"\n                    error={!!errors.currentPassword}\n                    helperText={errors.currentPassword?.message}\n                    inputProps={{\n                        style: { fontSize: isMobile ? '16px' : '14px' },\n                    }}\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">",
          "<TextField\n                    {...register('newPassword', {\n                        required: 'New password is required',\n                        minLength: {\n                            value: 8,\n                            message: 'Password must be at least 8 characters',\n                        },\n                        pattern: {\n                            value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/,\n                            message:\n                                'Password must contain uppercase, lowercase, and number',\n                        },\n                    })}\n                    label=\"New Password\"\n                    type={showNewPassword ? 'text' : 'password'}\n                    fullWidth\n                    autoComplete=\"new-password\"\n                    error={!!errors.newPassword}\n                    helperText={errors.newPassword?.message}\n                    inputProps={{\n                        style: { fontSize: isMobile ? '16px' : '14px' },\n                    }}\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">",
          "<TextField\n                    {...register('confirmPassword', {\n                        required: 'Please confirm your new password',\n                        validate: value =>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<TextField\n                                        label=\"GPS Timeout\"\n                                        type=\"number\"\n                                        value={settings.gpsTimeout / 1000}\n                                        onChange={e =>",
          "<TextField\n                                        label=\"Cache Duration\"\n                                        type=\"number\"\n                                        value={settings.gpsCacheTime / 60000}\n                                        onChange={e =>",
          "<TextField\n                                        label=\"Sync Interval\"\n                                        type=\"number\"\n                                        value={settings.syncInterval / 60000}\n                                        onChange={e =>"
        ]
      }
    ],
    "FormControlLabel": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<FormControlLabel\n                        control={\n                            <Switch\n                                checked={currentValue === 'true'}\n                                onChange={e =>"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={settings.gpsEnabled}\n                                                onChange={handleSettingChange(\n                                                    'gpsEnabled'\n                                                )}\n                                            />",
          "<FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={\n                                                    settings.gpsHighAccuracy\n                                                }\n                                                onChange={handleSettingChange(\n                                                    'gpsHighAccuracy'\n                                                )}\n                                                disabled={!settings.gpsEnabled}\n                                            />",
          "<FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={\n                                                    settings.gpsAutoCapture\n                                                }\n                                                onChange={handleSettingChange(\n                                                    'gpsAutoCapture'\n                                                )}\n                                                disabled={!settings.gpsEnabled}\n                                            />"
        ]
      }
    ],
    "Select": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<Select\n                            value={currentValue}\n                            onChange={e =>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<Select\n                                    value={filters.eventCategory}\n                                    onChange={e =>",
          "<Select\n                                    value={filters.success}\n                                    onChange={e =>"
        ]
      },
      {
        "file": "src/notes/StatusSelector.tsx",
        "context": [
          "<Select\n            value={status}\n            onChange={(event: React.ChangeEvent<HTMLSelectElement>",
          "<SelectItem key={status.value} value={status.value}>",
          "<SelectItem key={String(status)} value={String(status)}>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Select\n                                    value={filterValues?.priority || ''}\n                                    onChange={e =>",
          "<Select\n                                    value={filterValues?.status || ''}\n                                    onChange={e =>",
          "<Select\n                                    value={filterValues?.business_type || ''}\n                                    onChange={e =>"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Select\n                                    value={formData.priorityId || ''}\n                                    label=\"Priority Level\"\n                                    onChange={e =>",
          "<SelectInput\n                                        source=\"segmentId\"\n                                        label=\"Business Segment\"\n                                        choices={\n                                            segmentSettings?.map(setting =>",
          "<SelectInput\n                                        source=\"distributorId\"\n                                        label=\"Primary Distributor\"\n                                        choices={\n                                            distributorSettings?.map(\n                                                setting =>"
        ]
      }
    ],
    "MenuItem": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<MenuItem key={option} value={option}>"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<MenuItem value=\"\">",
          "<MenuItem value=\"authentication\">",
          "<MenuItem value=\"authorization\">"
        ]
      },
      {
        "file": "src/contacts/TagsListEdit.tsx",
        "context": [
          "<MenuItem key={tag.id} onClick={() =>",
          "<MenuItem onClick={openTagCreateDialog}>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<MenuItem value=\"\">",
          "<MenuItem\n                                            key={option.value}\n                                            value={option.value}\n                                        >",
          "<MenuItem value=\"\">"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<MenuItem onClick={() =>",
          "<MenuItem\n                            onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<MenuItem value=\"\">",
          "<MenuItem\n                                                    key={displayOption.value}\n                                                    value={displayOption.value}\n                                                >"
        ]
      }
    ],
    "FormControl": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": [
          "<FormControlLabel\n                        control={\n                            <Switch\n                                checked={currentValue === 'true'}\n                                onChange={e =>",
          "<FormControl size=\"small\" className=\"min-w-30\">"
        ]
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<FormControl fullWidth size=\"small\">",
          "<FormControl fullWidth size=\"small\">"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<FormControl fullWidth size=\"small\">",
          "<FormControl fullWidth size=\"small\">",
          "<FormControl fullWidth size=\"small\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<FormControl\n                                fullWidth\n                                error={!!validationErrors.priorityId}\n                            >"
        ]
      }
    ],
    "InputLabel": [
      {
        "file": "src/security/SecurityPolicyManager.tsx",
        "context": []
      },
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<InputLabel>",
          "<InputLabel>"
        ]
      },
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<InputLabel>",
          "<InputLabel>",
          "<InputLabel>"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<InputLabel>"
        ]
      }
    ],
    "TablePagination": [
      {
        "file": "src/security/SecurityAuditLog.tsx",
        "context": [
          "<TablePagination\n                component=\"div\"\n                count={\n                    viewType === 'audit'\n                        ? auditLogs.length\n                        : viewType === 'security'\n                          ? securityEvents.length\n                          : securityEvents.length + auditLogs.length\n                }\n                page={page}\n                onPageChange={(_, newPage) =>"
        ]
      }
    ],
    "Step": [
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Stepper activeStep={activeStep} orientation=\"vertical\">",
          "<Step key={index}>",
          "<StepLabel>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<StepValidationResult>",
          "<StepComponent\n                    formData={formData}\n                    onDataChange={handleFormDataChange}\n                    validationErrors={validationErrors}\n                    isMobile={isMobile}\n                />",
          "<Stepper\n                        activeStep={activeStep}\n                        orientation={isMobile ? 'vertical' : 'horizontal'}\n                        className=\"mb-6\"\n                    >"
        ]
      }
    ],
    "StepContent": [
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<StepContent>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<StepContent>"
        ]
      }
    ],
    "StepLabel": [
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<StepLabel>"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<StepLabel\n                                        icon={getStepIcon(index)}\n                                        error={state.hasErrors}\n                                        optional={\n                                            !isMobile && (\n                                                <Box className=\"flex gap-1 mt-1\">"
        ]
      }
    ],
    "Stepper": [
      {
        "file": "src/security/MFASetup.tsx",
        "context": [
          "<Stepper activeStep={activeStep} orientation=\"vertical\">"
        ]
      },
      {
        "file": "src/organizations/form/MultiStepOrganizationCreate.tsx",
        "context": [
          "<Stepper\n                        activeStep={activeStep}\n                        orientation={isMobile ? 'vertical' : 'horizontal'}\n                        className=\"mb-6\"\n                    >"
        ]
      }
    ],
    "TypographyProps": [
      {
        "file": "src/products/PriceField.tsx",
        "context": [
          "<TypographyProps, 'children'>"
        ]
      }
    ],
    "SelectItem": [
      {
        "file": "src/notes/StatusSelector.tsx",
        "context": [
          "<SelectItem key={status.value} value={status.value}>",
          "<SelectItem key={String(status)} value={String(status)}>"
        ]
      }
    ],
    "ImageList": [
      {
        "file": "src/notes/NoteAttachments.tsx",
        "context": [
          "<ImageList cols={4} gap={8}>",
          "<ImageListItem key={index}>"
        ]
      }
    ],
    "ImageListItem": [
      {
        "file": "src/notes/NoteAttachments.tsx",
        "context": [
          "<ImageListItem key={index}>"
        ]
      }
    ],
    "Link": [
      {
        "file": "src/misc/ImageEditorField.tsx",
        "context": []
      }
    ],
    "Container": [
      {
        "file": "src/login/UserProfilePage.tsx",
        "context": [
          "<Container maxWidth=\"md\" sx={{ py: 4 }}>",
          "<Container maxWidth=\"md\" sx={{ py: 4 }}>",
          "<Container maxWidth=\"md\" sx={{ py: 4 }}>"
        ]
      },
      {
        "file": "src/login/SetNewPasswordPage.tsx",
        "context": [
          "<Container\n                        maxWidth=\"xs\"\n                        sx={{\n                            height: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            gap: 2,\n                        }}\n                    >",
          "<Container\n                    maxWidth=\"xs\"\n                    sx={{\n                        height: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        gap: 2,\n                    }}\n                >"
        ]
      },
      {
        "file": "src/login/PasswordResetPage.tsx",
        "context": [
          "<Container\n                        maxWidth=\"xs\"\n                        sx={{\n                            height: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            gap: 2,\n                        }}\n                    >",
          "<Container\n                    maxWidth=\"xs\"\n                    sx={{\n                        height: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        gap: 2,\n                    }}\n                >"
        ]
      }
    ],
    "Input": [
      {
        "file": "src/login/UniversalLoginPage.tsx",
        "context": [
          "<Input\n                            label=\"Email\"\n                            type=\"email\"\n                            value={email}\n                            onChange={e =>",
          "<Input\n                            label=\"Password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={e =>"
        ]
      },
      {
        "file": "src/login/SignupPage.tsx",
        "context": [
          "<Input\n                            {...register('first_name', { required: true })}\n                            label=\"First name\"\n                            required\n                        />",
          "<Input\n                            {...register('last_name', { required: true })}\n                            label=\"Last name\"\n                            required\n                        />",
          "<Input\n                            {...register('email', { required: true })}\n                            label=\"Email\"\n                            type=\"email\"\n                            required\n                        />"
        ]
      },
      {
        "file": "src/login/LoginForm.tsx",
        "context": [
          "<Input\n                    {...register('email', { required: 'Email is required' })}\n                    type=\"email\"\n                    label=\"Email\"\n                    autoComplete=\"email\"\n                    error={errors.email?.message?.toString()}\n                />",
          "<Input\n                    {...register('password', {\n                        required: 'Password is required',\n                    })}\n                    type=\"password\"\n                    label=\"Password\"\n                    autoComplete=\"current-password\"\n                    error={errors.password?.message?.toString()}\n                />"
        ]
      }
    ],
    "Checkbox": [
      {
        "file": "src/login/UniversalLoginPage.tsx",
        "context": [
          "<Checkbox\n                                id=\"rememberMe\"\n                                checked={rememberMe}\n                                onCheckedChange={() =>"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<Checkbox\n                                    checked={selectedIds.includes(customer.id)}\n                                    onCheckedChange={() =>",
          "<Checkbox\n                            checked={selectedIds.includes(customer.id)}\n                            onCheckedChange={() =>"
        ]
      }
    ],
    "Spinner": [
      {
        "file": "src/login/UniversalLoginPage.tsx",
        "context": [
          "<Spinner className=\"w-6 h-6\" />"
        ]
      },
      {
        "file": "src/login/SignupPage.tsx",
        "context": [
          "<Spinner />",
          "<Spinner className=\"w-6 h-6\" />"
        ]
      },
      {
        "file": "src/login/LoginForm.tsx",
        "context": [
          "<Spinner className=\"w-5 h-5\" />"
        ]
      },
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<Spinner />"
        ]
      },
      {
        "file": "src/activity/ActivityLog.tsx",
        "context": [
          "<Spinner />"
        ]
      }
    ],
    "Dropdown": [
      {
        "file": "src/layout/Header.tsx",
        "context": [
          "<Dropdown\n                            button={\n                                <button className=\"p-1 rounded-full text-white hover:text-gray-200 hover:bg-forkflow-light-green focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-forkflow-green focus:ring-white transition-colors\">",
          "<DropdownItem onClick={() =>",
          "<DropdownItem onClick={() =>"
        ]
      }
    ],
    "DropdownItem": [
      {
        "file": "src/layout/Header.tsx",
        "context": [
          "<DropdownItem onClick={() =>",
          "<DropdownItem onClick={() =>",
          "<DropdownItem onClick={() =>"
        ]
      }
    ],
    "CardHeader": [
      {
        "file": "src/dashboard/TasksList.tsx",
        "context": [
          "<CardHeader className=\"pb-3\">"
        ]
      },
      {
        "file": "src/dashboard/HotContacts.tsx",
        "context": [
          "<CardHeader className=\"pb-3\">"
        ]
      },
      {
        "file": "src/dashboard/DashboardActivityLog.tsx",
        "context": [
          "<CardHeader className=\"pb-3\">"
        ]
      }
    ],
    "CardTitle": [
      {
        "file": "src/dashboard/TasksList.tsx",
        "context": [
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      },
      {
        "file": "src/dashboard/HotContacts.tsx",
        "context": [
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      },
      {
        "file": "src/dashboard/DashboardActivityLog.tsx",
        "context": [
          "<CardTitle className=\"text-lg font-semibold text-gray-800\">"
        ]
      }
    ],
    "Backdrop": [
      {
        "file": "src/dashboard/QuickActionsFAB.tsx",
        "context": [
          "<Backdrop open={open} onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/common/MobileFAB.tsx",
        "context": [
          "<Backdrop\n                    open={open}\n                    onClick={handleClose}\n                    className=\"bg-black bg-opacity-30 z-40\"\n                />"
        ]
      }
    ],
    "SpeedDial": [
      {
        "file": "src/dashboard/QuickActionsFAB.tsx",
        "context": [
          "<SpeedDial\n                aria-label=\"Quick Actions\"\n                icon={\n                    open ? (\n                        <CloseIcon className=\"h-6 w-6\" />",
          "<SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        onClick={() =>"
        ]
      }
    ],
    "SpeedDialAction": [
      {
        "file": "src/dashboard/QuickActionsFAB.tsx",
        "context": [
          "<SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        onClick={() =>"
        ]
      }
    ],
    "Filter": [
      {
        "file": "src/customers/CustomerListFilter.tsx",
        "context": [
          "<Filter\n                            label=\"Business Type\"\n                            icon={\n                                <BuildingStorefrontIcon className=\"h-5 w-5\" />",
          "<FilterItem\n                                label=\"Restaurants\"\n                                value={{ business_type: 'restaurant' }}\n                            />",
          "<FilterItem\n                                label=\"Grocery Stores\"\n                                value={{ business_type: 'grocery' }}\n                            />"
        ]
      }
    ],
    "FilterItem": [
      {
        "file": "src/customers/CustomerListFilter.tsx",
        "context": [
          "<FilterItem\n                                label=\"Restaurants\"\n                                value={{ business_type: 'restaurant' }}\n                            />",
          "<FilterItem\n                                label=\"Grocery Stores\"\n                                value={{ business_type: 'grocery' }}\n                            />",
          "<FilterItem\n                                label=\"Distributors\"\n                                value={{ business_type: 'distributor' }}\n                            />"
        ]
      }
    ],
    "TableHeader": [
      {
        "file": "src/customers/CustomerListContent.tsx",
        "context": [
          "<TableHeader>"
        ]
      }
    ],
    "Menu": [
      {
        "file": "src/contacts/TagsListEdit.tsx",
        "context": [
          "<Menu\n                open={Boolean(anchorEl)}\n                onClose={handleMenuClose}\n                anchorEl={anchorEl}\n            >",
          "<MenuItem key={tag.id} onClick={() =>",
          "<MenuItem onClick={openTagCreateDialog}>"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<Menu\n                        anchorEl={menuAnchor}\n                        open={Boolean(menuAnchor)}\n                        onClose={handleMenuClose}\n                        onClick={(e) =>",
          "<MenuItem onClick={() =>",
          "<MenuItem\n                            onClick={() =>"
        ]
      }
    ],
    "CardActions": [
      {
        "file": "src/contacts/ContactCard.tsx",
        "context": [
          "<CardActions className=\"pt-0 justify-between\">"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationCards.tsx",
        "context": [
          "<CardActions className=\"px-4 pb-4 pt-0 justify-between\">"
        ]
      },
      {
        "file": "src/organizations/common/OrganizationCard.tsx",
        "context": [
          "<CardActions className=\"p-2 sm:p-4 pt-0\">",
          "<CardActions className=\"p-2 sm:p-4 pt-0 justify-between\">"
        ]
      }
    ],
    "Avatar as UIAvatar": [
      {
        "file": "src/contacts/Avatar.tsx",
        "context": []
      }
    ],
    "ListItemAvatar": [
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ListItemAvatar>"
        ]
      }
    ],
    "ListItemButton": [
      {
        "file": "src/companies/CompanyShow.tsx",
        "context": [
          "<ListItemButton\n                            component={RouterLink}\n                            to={`/contacts/${contact.id}/show`}\n                            state={{ from: location.pathname }}\n                        >",
          "<ListItemButton\n                            component={RouterLink}\n                            to={`/deals/${deal.id}/show`}\n                        >"
        ]
      }
    ],
    "AvatarGroup": [
      {
        "file": "src/companies/CompanyCard.tsx",
        "context": [
          "<AvatarGroupIterator />",
          "<AvatarGroup max={4} total={total} spacing=\"medium\">"
        ]
      }
    ],
    "Button as UiKitButton": [
      {
        "file": "src/organizations/show/OrganizationShow.tsx",
        "context": []
      }
    ],
    "TableSortLabel": [
      {
        "file": "src/organizations/list/VirtualizedOrganizationTable.tsx",
        "context": [
          "<TableSortLabel\n                            active={viewMode.sortField === 'name'}\n                            direction={\n                                viewMode.sortOrder.toLowerCase() as\n                                | 'asc'\n                                | 'desc'\n                            }\n                            onClick={() =>",
          "<TableSortLabel\n                                    active={\n                                        viewMode.sortField === 'business_type'\n                                    }\n                                    direction={\n                                        viewMode.sortOrder.toLowerCase() as\n                                        | 'asc'\n                                        | 'desc'\n                                    }\n                                    onClick={() =>",
          "<TableSortLabel\n                                    active={viewMode.sortField === 'revenue'}\n                                    direction={\n                                        viewMode.sortOrder.toLowerCase() as\n                                        | 'asc'\n                                        | 'desc'\n                                    }\n                                    onClick={() =>"
        ]
      },
      {
        "file": "src/organizations/list/OrganizationTable.tsx",
        "context": [
          "<TableSortLabel\n                                active={viewMode.sortField === 'name'}\n                                direction={\n                                    viewMode.sortOrder.toLowerCase() as\n                                        | 'asc'\n                                        | 'desc'\n                                }\n                                onClick={() =>",
          "<TableSortLabel\n                                active={viewMode.sortField === 'business_type'}\n                                direction={\n                                    viewMode.sortOrder.toLowerCase() as\n                                        | 'asc'\n                                        | 'desc'\n                                }\n                                onClick={() =>",
          "<TableSortLabel\n                                active={viewMode.sortField === 'revenue'}\n                                direction={\n                                    viewMode.sortOrder.toLowerCase() as\n                                        | 'asc'\n                                        | 'desc'\n                                }\n                                onClick={() =>"
        ]
      }
    ],
    "Snackbar": [
      {
        "file": "src/organizations/list/OrganizationKanban.tsx",
        "context": [
          "<Snackbar\n                open={snackbar.open}\n                autoHideDuration={4000}\n                onClose={handleSnackbarClose}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            >"
        ]
      }
    ],
    "Autocomplete": [
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Autocomplete\n                                size=\"small\"\n                                options={segmentOptions}\n                                value={filterValues?.segment || null}\n                                onChange={(_, value) =>"
        ]
      }
    ],
    "Collapse": [
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Collapse in={expanded}>"
        ]
      },
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<Collapse in={expanded}>"
        ]
      }
    ],
    "InputAdornment": [
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<InputAdornment position=\"start\">",
          "<InputAdornment position=\"end\">"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<InputAdornment position=\"start\">",
          "<InputAdornment position=\"end\">"
        ]
      },
      {
        "file": "src/login/components/PasswordChangeForm.tsx",
        "context": [
          "<InputAdornment position=\"end\">",
          "<InputAdornment position=\"end\">",
          "<InputAdornment position=\"end\">"
        ]
      },
      {
        "file": "src/interactions/components/InteractionSettings.tsx",
        "context": [
          "<InputAdornment position=\"end\">",
          "<InputAdornment position=\"end\">",
          "<InputAdornment position=\"end\">"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<InputAdornment position=\"start\">"
        ]
      }
    ],
    "Slider": [
      {
        "file": "src/organizations/list/AdvancedOrganizationFilter.tsx",
        "context": [
          "<Slider\n                                    value={revenueRange}\n                                    onChange={handleRevenueRangeChange}\n                                    valueLabelDisplay=\"auto\"\n                                    valueLabelFormat={formatCurrency}\n                                    min={0}\n                                    max={10000000}\n                                    step={100000}\n                                    marks={[\n                                        { value: 0, label: '$0' },\n                                        { value: 1000000, label: '$1M' },\n                                        { value: 5000000, label: '$5M' },\n                                        { value: 10000000, label: '$10M+' },\n                                    ]}\n                                />"
        ]
      },
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<Slider\n                            value={revenueSliderValue}\n                            onChange={handleRevenueSliderChange}\n                            onChangeCommitted={handleRevenueSliderCommit}\n                            min={0}\n                            max={10000000}\n                            step={25000}\n                            marks={[\n                                { value: 0, label: '$0' },\n                                { value: 1000000, label: '$1M' },\n                                { value: 5000000, label: '$5M' },\n                                { value: 10000000, label: '$10M+' },\n                            ]}\n                            valueLabelDisplay=\"auto\"\n                            valueLabelFormat={formatCurrency}\n                            sx={{\n                                '& .MuiSlider-thumb': {\n                                    height: 24,\n                                    width: 24,\n                                },\n                                '& .MuiSlider-track': {\n                                    height: 6,\n                                },\n                                '& .MuiSlider-rail': {\n                                    height: 6,\n                                },\n                            }}\n                        />"
        ]
      }
    ],
    "Fade": [
      {
        "file": "src/organizations/common/ViewModeRenderer.tsx",
        "context": [
          "<Fade in={true} timeout={300}>"
        ]
      },
      {
        "file": "src/organizations/common/SmartKeyboard.tsx",
        "context": [
          "<Fade in={showSuggestions}>"
        ]
      }
    ],
    "HomepageCard": [
      {
        "file": "src/components/dashboard/WeeklyActivity.tsx",
        "context": [
          "<HomepageCard className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/TodaysFollowups.tsx",
        "context": [
          "<HomepageCard className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/QuickInteractionEntry.tsx",
        "context": [
          "<HomepageCard className=\"col-span-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/PriorityOrganizations.tsx",
        "context": [
          "<HomepageCard className=\"h-full\">"
        ]
      },
      {
        "file": "src/components/dashboard/PipelineSummary.tsx",
        "context": [
          "<HomepageCard className=\"h-full\">"
        ]
      }
    ],
    "HomepageButton": [
      {
        "file": "src/components/dashboard/QuickInteractionEntry.tsx",
        "context": [
          "<HomepageButton\n              key={type.value}\n              type=\"button\"\n              variant=\"ghost\"\n              className=\"h-16 flex-col space-y-1 text-sm\"\n              onClick={() =>",
          "<HomepageButton\n            type=\"submit\"\n            variant=\"primary\"\n            disabled={isSubmitting}\n            className=\"flex-1\"\n          >",
          "<HomepageButton\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={() =>"
        ]
      },
      {
        "file": "src/components/dashboard/DashboardHeader.tsx",
        "context": [
          "<HomepageButton\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"mr-2 md:hidden\"\n          onClick={onMenuToggle}\n        >",
          "<HomepageButton variant=\"ghost\" size=\"sm\">"
        ]
      }
    ],
    "HomepageInput": [
      {
        "file": "src/components/dashboard/QuickInteractionEntry.tsx",
        "context": [
          "<HomepageInput\n            {...register('subject')}\n            placeholder=\"Brief interaction summary...\"\n            touchOptimized\n          />"
        ]
      },
      {
        "file": "src/components/dashboard/DashboardHeader.tsx",
        "context": [
          "<HomepageInput\n              placeholder=\"Search organizations, contacts...\"\n              className=\"pl-10\"\n              touchOptimized\n            />"
        ]
      }
    ],
    "HomepageSelect": [
      {
        "file": "src/components/dashboard/QuickInteractionEntry.tsx",
        "context": [
          "<HomepageSelect\n              {...register('organization_id', { required: 'Organization is required' })}\n              touchOptimized\n            >",
          "<HomepageSelect\n              {...register('contact_id')}\n              touchOptimized\n            >"
        ]
      }
    ],
    "AlertTitle": [
      {
        "file": "src/organizations/form/steps/ValidationProvider.tsx",
        "context": [
          "<AlertTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>"
        ]
      }
    ],
    "FormHelperText": [
      {
        "file": "src/organizations/form/steps/BusinessDetailsStep.tsx",
        "context": [
          "<FormHelperText>"
        ]
      }
    ]
  },
  "stylePatternAnalysis": {
    "spacing": [
      [
        "px-4",
        7
      ],
      [
        "py-2",
        7
      ],
      [
        "py-1",
        4
      ],
      [
        "px-2",
        4
      ],
      [
        "mt-1",
        3
      ],
      [
        "p-6",
        3
      ],
      [
        "p-4",
        3
      ],
      [
        "px-3",
        3
      ],
      [
        "p-4',",
        2
      ],
      [
        "mb-1",
        2
      ]
    ],
    "sizing": [
      [
        "w-full",
        10
      ],
      [
        "h-5",
        4
      ],
      [
        "w-5",
        4
      ],
      [
        "h-4",
        2
      ],
      [
        "w-4",
        2
      ],
      [
        "w-56",
        2
      ],
      [
        "h-12",
        2
      ],
      [
        "h-full",
        2
      ],
      [
        "w-5',",
        1
      ],
      [
        "h-8",
        1
      ]
    ],
    "colors": [
      [
        "text-gray-900",
        8
      ],
      [
        "text-gray-500",
        6
      ],
      [
        "text-gray-700",
        4
      ],
      [
        "bg-gray-100",
        3
      ],
      [
        "border-gray-300",
        3
      ],
      [
        "bg-gray-800",
        3
      ],
      [
        "text-gray-600",
        2
      ],
      [
        "border-gray-200",
        2
      ],
      [
        "text-gray-500',",
        2
      ],
      [
        "bg-opacity-25",
        2
      ]
    ],
    "layout": [
      [
        "flex",
        10
      ],
      [
        "absolute",
        6
      ],
      [
        "relative",
        6
      ],
      [
        "fixed",
        3
      ],
      [
        "block",
        3
      ],
      [
        "flex-shrink-0",
        2
      ],
      [
        "flex-1",
        2
      ],
      [
        "inline-flex",
        2
      ],
      [
        "inline-block",
        2
      ],
      [
        "inline-flex',",
        1
      ]
    ],
    "responsive": [],
    "interactive": [
      [
        "focus:outline-none",
        9
      ],
      [
        "focus:ring-2",
        4
      ],
      [
        "disabled:opacity-50',",
        3
      ],
      [
        "focus:ring-offset-2",
        2
      ],
      [
        "focus:ring-blue-500",
        2
      ],
      [
        "focus:ring-offset-2',",
        2
      ],
      [
        "hover:bg-green-100",
        1
      ],
      [
        "focus:ring-green-600',",
        1
      ],
      [
        "hover:bg-yellow-100",
        1
      ],
      [
        "focus:ring-yellow-600',",
        1
      ]
    ],
    "custom": []
  }
}